//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for priceItem complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="priceItem">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="price" type="{http://api.company.biz}price" minOccurs="0"/>
 *         &lt;element name="items" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="item" type="{http://api.company.biz}priceItem" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="index" type="{http://www.w3.org/2001/XMLSchema}int" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "priceItem", propOrder = {
    "price",
    "items"
})
public class PriceItem
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected Price price;
    protected PriceItem.Items items;
    @XmlAttribute(name = "type")
    protected String type;
    @XmlAttribute(name = "id")
    protected String id;
    @XmlAttribute(name = "index")
    protected Integer index;

    /**
     * Gets the value of the price property.
     * 
     * @return
     *     possible object is
     *     {@link Price }
     *     
     */
    public Price getPrice() {
        return price;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param value
     *     allowed object is
     *     {@link Price }
     *     
     */
    public void setPrice(Price value) {
        this.price = value;
    }

    /**
     * Gets the value of the items property.
     * 
     * @return
     *     possible object is
     *     {@link PriceItem.Items }
     *     
     */
    public PriceItem.Items getItems() {
        return items;
    }

    /**
     * Sets the value of the items property.
     * 
     * @param value
     *     allowed object is
     *     {@link PriceItem.Items }
     *     
     */
    public void setItems(PriceItem.Items value) {
        this.items = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the index property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getIndex() {
        return index;
    }

    /**
     * Sets the value of the index property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setIndex(Integer value) {
        this.index = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Price thePrice;
            thePrice = this.getPrice();
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            PriceItem.Items theItems;
            theItems = this.getItems();
            strategy.appendField(locator, this, "items", buffer, theItems);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        {
            Integer theIndex;
            theIndex = this.getIndex();
            strategy.appendField(locator, this, "index", buffer, theIndex);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PriceItem)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PriceItem that = ((PriceItem) object);
        {
            Price lhsPrice;
            lhsPrice = this.getPrice();
            Price rhsPrice;
            rhsPrice = that.getPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            PriceItem.Items lhsItems;
            lhsItems = this.getItems();
            PriceItem.Items rhsItems;
            rhsItems = that.getItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "items", lhsItems), LocatorUtils.property(thatLocator, "items", rhsItems), lhsItems, rhsItems)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            Integer lhsIndex;
            lhsIndex = this.getIndex();
            Integer rhsIndex;
            rhsIndex = that.getIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "index", lhsIndex), LocatorUtils.property(thatLocator, "index", rhsIndex), lhsIndex, rhsIndex)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Price thePrice;
            thePrice = this.getPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            PriceItem.Items theItems;
            theItems = this.getItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "items", theItems), currentHashCode, theItems);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            Integer theIndex;
            theIndex = this.getIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "index", theIndex), currentHashCode, theIndex);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PriceItem) {
            final PriceItem copy = ((PriceItem) draftCopy);
            if (this.price!= null) {
                Price sourcePrice;
                sourcePrice = this.getPrice();
                Price copyPrice = ((Price) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
                copy.setPrice(copyPrice);
            } else {
                copy.price = null;
            }
            if (this.items!= null) {
                PriceItem.Items sourceItems;
                sourceItems = this.getItems();
                PriceItem.Items copyItems = ((PriceItem.Items) strategy.copy(LocatorUtils.property(locator, "items", sourceItems), sourceItems));
                copy.setItems(copyItems);
            } else {
                copy.items = null;
            }
            if (this.type!= null) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.id!= null) {
                String sourceId;
                sourceId = this.getId();
                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
            if (this.index!= null) {
                Integer sourceIndex;
                sourceIndex = this.getIndex();
                Integer copyIndex = ((Integer) strategy.copy(LocatorUtils.property(locator, "index", sourceIndex), sourceIndex));
                copy.setIndex(copyIndex);
            } else {
                copy.index = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PriceItem();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof PriceItem) {
            final PriceItem target = this;
            final PriceItem leftObject = ((PriceItem) left);
            final PriceItem rightObject = ((PriceItem) right);
            {
                Price lhsPrice;
                lhsPrice = leftObject.getPrice();
                Price rhsPrice;
                rhsPrice = rightObject.getPrice();
                Price mergedPrice = ((Price) strategy.merge(LocatorUtils.property(leftLocator, "price", lhsPrice), LocatorUtils.property(rightLocator, "price", rhsPrice), lhsPrice, rhsPrice));
                target.setPrice(mergedPrice);
            }
            {
                PriceItem.Items lhsItems;
                lhsItems = leftObject.getItems();
                PriceItem.Items rhsItems;
                rhsItems = rightObject.getItems();
                PriceItem.Items mergedItems = ((PriceItem.Items) strategy.merge(LocatorUtils.property(leftLocator, "items", lhsItems), LocatorUtils.property(rightLocator, "items", rhsItems), lhsItems, rhsItems));
                target.setItems(mergedItems);
            }
            {
                String lhsType;
                lhsType = leftObject.getType();
                String rhsType;
                rhsType = rightObject.getType();
                String mergedType = ((String) strategy.merge(LocatorUtils.property(leftLocator, "type", lhsType), LocatorUtils.property(rightLocator, "type", rhsType), lhsType, rhsType));
                target.setType(mergedType);
            }
            {
                String lhsId;
                lhsId = leftObject.getId();
                String rhsId;
                rhsId = rightObject.getId();
                String mergedId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "id", lhsId), LocatorUtils.property(rightLocator, "id", rhsId), lhsId, rhsId));
                target.setId(mergedId);
            }
            {
                Integer lhsIndex;
                lhsIndex = leftObject.getIndex();
                Integer rhsIndex;
                rhsIndex = rightObject.getIndex();
                Integer mergedIndex = ((Integer) strategy.merge(LocatorUtils.property(leftLocator, "index", lhsIndex), LocatorUtils.property(rightLocator, "index", rhsIndex), lhsIndex, rhsIndex));
                target.setIndex(mergedIndex);
            }
        }
    }

    public PriceItem withPrice(Price value) {
        setPrice(value);
        return this;
    }

    public PriceItem withItems(PriceItem.Items value) {
        setItems(value);
        return this;
    }

    public PriceItem withType(String value) {
        setType(value);
        return this;
    }

    public PriceItem withId(String value) {
        setId(value);
        return this;
    }

    public PriceItem withIndex(Integer value) {
        setIndex(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="item" type="{http://api.company.biz}priceItem" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "item"
    })
    public static class Items
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<PriceItem> item;

        /**
         * Gets the value of the item property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the item property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getItem().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PriceItem }
         * 
         * 
         */
        public List<PriceItem> getItem() {
            if (item == null) {
                item = new ArrayList<PriceItem>();
            }
            return this.item;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<PriceItem> theItem;
                theItem = (((this.item!= null)&&(!this.item.isEmpty()))?this.getItem():null);
                strategy.appendField(locator, this, "item", buffer, theItem);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PriceItem.Items)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PriceItem.Items that = ((PriceItem.Items) object);
            {
                List<PriceItem> lhsItem;
                lhsItem = (((this.item!= null)&&(!this.item.isEmpty()))?this.getItem():null);
                List<PriceItem> rhsItem;
                rhsItem = (((that.item!= null)&&(!that.item.isEmpty()))?that.getItem():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "item", lhsItem), LocatorUtils.property(thatLocator, "item", rhsItem), lhsItem, rhsItem)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<PriceItem> theItem;
                theItem = (((this.item!= null)&&(!this.item.isEmpty()))?this.getItem():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "item", theItem), currentHashCode, theItem);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PriceItem.Items) {
                final PriceItem.Items copy = ((PriceItem.Items) draftCopy);
                if ((this.item!= null)&&(!this.item.isEmpty())) {
                    List<PriceItem> sourceItem;
                    sourceItem = (((this.item!= null)&&(!this.item.isEmpty()))?this.getItem():null);
                    @SuppressWarnings("unchecked")
                    List<PriceItem> copyItem = ((List<PriceItem> ) strategy.copy(LocatorUtils.property(locator, "item", sourceItem), sourceItem));
                    copy.item = null;
                    if (copyItem!= null) {
                        List<PriceItem> uniqueIteml = copy.getItem();
                        uniqueIteml.addAll(copyItem);
                    }
                } else {
                    copy.item = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PriceItem.Items();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof PriceItem.Items) {
                final PriceItem.Items target = this;
                final PriceItem.Items leftObject = ((PriceItem.Items) left);
                final PriceItem.Items rightObject = ((PriceItem.Items) right);
                {
                    List<PriceItem> lhsItem;
                    lhsItem = (((leftObject.item!= null)&&(!leftObject.item.isEmpty()))?leftObject.getItem():null);
                    List<PriceItem> rhsItem;
                    rhsItem = (((rightObject.item!= null)&&(!rightObject.item.isEmpty()))?rightObject.getItem():null);
                    List<PriceItem> mergedItem = ((List<PriceItem> ) strategy.merge(LocatorUtils.property(leftLocator, "item", lhsItem), LocatorUtils.property(rightLocator, "item", rhsItem), lhsItem, rhsItem));
                    target.item = null;
                    if (mergedItem!= null) {
                        List<PriceItem> uniqueIteml = target.getItem();
                        uniqueIteml.addAll(mergedItem);
                    }
                }
            }
        }

        public PriceItem.Items withItem(PriceItem... values) {
            if (values!= null) {
                for (PriceItem value: values) {
                    getItem().add(value);
                }
            }
            return this;
        }

        public PriceItem.Items withItem(Collection<PriceItem> values) {
            if (values!= null) {
                getItem().addAll(values);
            }
            return this;
        }

    }

}
