//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productTypeCategoryDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productTypeCategoryDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="productTypes" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="productType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productTypeCategoryDTO", propOrder = {
    "name",
    "productTypes"
})
public class ProductTypeCategoryDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String name;
    protected ProductTypeCategoryDTO.ProductTypes productTypes;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the productTypes property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeCategoryDTO.ProductTypes }
     *     
     */
    public ProductTypeCategoryDTO.ProductTypes getProductTypes() {
        return productTypes;
    }

    /**
     * Sets the value of the productTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeCategoryDTO.ProductTypes }
     *     
     */
    public void setProductTypes(ProductTypeCategoryDTO.ProductTypes value) {
        this.productTypes = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            ProductTypeCategoryDTO.ProductTypes theProductTypes;
            theProductTypes = this.getProductTypes();
            strategy.appendField(locator, this, "productTypes", buffer, theProductTypes);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductTypeCategoryDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductTypeCategoryDTO that = ((ProductTypeCategoryDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            ProductTypeCategoryDTO.ProductTypes lhsProductTypes;
            lhsProductTypes = this.getProductTypes();
            ProductTypeCategoryDTO.ProductTypes rhsProductTypes;
            rhsProductTypes = that.getProductTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "productTypes", lhsProductTypes), LocatorUtils.property(thatLocator, "productTypes", rhsProductTypes), lhsProductTypes, rhsProductTypes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            ProductTypeCategoryDTO.ProductTypes theProductTypes;
            theProductTypes = this.getProductTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productTypes", theProductTypes), currentHashCode, theProductTypes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductTypeCategoryDTO) {
            final ProductTypeCategoryDTO copy = ((ProductTypeCategoryDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.productTypes!= null) {
                ProductTypeCategoryDTO.ProductTypes sourceProductTypes;
                sourceProductTypes = this.getProductTypes();
                ProductTypeCategoryDTO.ProductTypes copyProductTypes = ((ProductTypeCategoryDTO.ProductTypes) strategy.copy(LocatorUtils.property(locator, "productTypes", sourceProductTypes), sourceProductTypes));
                copy.setProductTypes(copyProductTypes);
            } else {
                copy.productTypes = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductTypeCategoryDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductTypeCategoryDTO) {
            final ProductTypeCategoryDTO target = this;
            final ProductTypeCategoryDTO leftObject = ((ProductTypeCategoryDTO) left);
            final ProductTypeCategoryDTO rightObject = ((ProductTypeCategoryDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                ProductTypeCategoryDTO.ProductTypes lhsProductTypes;
                lhsProductTypes = leftObject.getProductTypes();
                ProductTypeCategoryDTO.ProductTypes rhsProductTypes;
                rhsProductTypes = rightObject.getProductTypes();
                ProductTypeCategoryDTO.ProductTypes mergedProductTypes = ((ProductTypeCategoryDTO.ProductTypes) strategy.merge(LocatorUtils.property(leftLocator, "productTypes", lhsProductTypes), LocatorUtils.property(rightLocator, "productTypes", rhsProductTypes), lhsProductTypes, rhsProductTypes));
                target.setProductTypes(mergedProductTypes);
            }
        }
    }

    public ProductTypeCategoryDTO withName(String value) {
        setName(value);
        return this;
    }

    public ProductTypeCategoryDTO withProductTypes(ProductTypeCategoryDTO.ProductTypes value) {
        setProductTypes(value);
        return this;
    }

    @Override
    public ProductTypeCategoryDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProductTypeCategoryDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductTypeCategoryDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="productType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "productType"
    })
    public static class ProductTypes
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> productType;

        /**
         * Gets the value of the productType property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the productType property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getProductType().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getProductType() {
            if (productType == null) {
                productType = new ArrayList<Reference>();
            }
            return this.productType;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theProductType;
                theProductType = (((this.productType!= null)&&(!this.productType.isEmpty()))?this.getProductType():null);
                strategy.appendField(locator, this, "productType", buffer, theProductType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeCategoryDTO.ProductTypes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeCategoryDTO.ProductTypes that = ((ProductTypeCategoryDTO.ProductTypes) object);
            {
                List<Reference> lhsProductType;
                lhsProductType = (((this.productType!= null)&&(!this.productType.isEmpty()))?this.getProductType():null);
                List<Reference> rhsProductType;
                rhsProductType = (((that.productType!= null)&&(!that.productType.isEmpty()))?that.getProductType():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "productType", lhsProductType), LocatorUtils.property(thatLocator, "productType", rhsProductType), lhsProductType, rhsProductType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theProductType;
                theProductType = (((this.productType!= null)&&(!this.productType.isEmpty()))?this.getProductType():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productType", theProductType), currentHashCode, theProductType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeCategoryDTO.ProductTypes) {
                final ProductTypeCategoryDTO.ProductTypes copy = ((ProductTypeCategoryDTO.ProductTypes) draftCopy);
                if ((this.productType!= null)&&(!this.productType.isEmpty())) {
                    List<Reference> sourceProductType;
                    sourceProductType = (((this.productType!= null)&&(!this.productType.isEmpty()))?this.getProductType():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyProductType = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "productType", sourceProductType), sourceProductType));
                    copy.productType = null;
                    if (copyProductType!= null) {
                        List<Reference> uniqueProductTypel = copy.getProductType();
                        uniqueProductTypel.addAll(copyProductType);
                    }
                } else {
                    copy.productType = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeCategoryDTO.ProductTypes();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeCategoryDTO.ProductTypes) {
                final ProductTypeCategoryDTO.ProductTypes target = this;
                final ProductTypeCategoryDTO.ProductTypes leftObject = ((ProductTypeCategoryDTO.ProductTypes) left);
                final ProductTypeCategoryDTO.ProductTypes rightObject = ((ProductTypeCategoryDTO.ProductTypes) right);
                {
                    List<Reference> lhsProductType;
                    lhsProductType = (((leftObject.productType!= null)&&(!leftObject.productType.isEmpty()))?leftObject.getProductType():null);
                    List<Reference> rhsProductType;
                    rhsProductType = (((rightObject.productType!= null)&&(!rightObject.productType.isEmpty()))?rightObject.getProductType():null);
                    List<Reference> mergedProductType = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "productType", lhsProductType), LocatorUtils.property(rightLocator, "productType", rhsProductType), lhsProductType, rhsProductType));
                    target.productType = null;
                    if (mergedProductType!= null) {
                        List<Reference> uniqueProductTypel = target.getProductType();
                        uniqueProductTypel.addAll(mergedProductType);
                    }
                }
            }
        }

        public ProductTypeCategoryDTO.ProductTypes withProductType(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getProductType().add(value);
                }
            }
            return this;
        }

        public ProductTypeCategoryDTO.ProductTypes withProductType(Collection<Reference> values) {
            if (values!= null) {
                getProductType().addAll(values);
            }
            return this;
        }

    }

}
