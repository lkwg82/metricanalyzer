//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productRestrictionsDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productRestrictionsDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="freeColorSelection" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="example" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="softBoundarySupported" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productRestrictionsDTO", propOrder = {
    "freeColorSelection",
    "example",
    "softBoundarySupported"
})
public class ProductRestrictionsDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected boolean freeColorSelection;
    protected boolean example;
    protected boolean softBoundarySupported;

    /**
     * Gets the value of the freeColorSelection property.
     * 
     */
    public boolean isFreeColorSelection() {
        return freeColorSelection;
    }

    /**
     * Sets the value of the freeColorSelection property.
     * 
     */
    public void setFreeColorSelection(boolean value) {
        this.freeColorSelection = value;
    }

    /**
     * Gets the value of the example property.
     * 
     */
    public boolean isExample() {
        return example;
    }

    /**
     * Sets the value of the example property.
     * 
     */
    public void setExample(boolean value) {
        this.example = value;
    }

    /**
     * Gets the value of the softBoundarySupported property.
     * 
     */
    public boolean isSoftBoundarySupported() {
        return softBoundarySupported;
    }

    /**
     * Sets the value of the softBoundarySupported property.
     * 
     */
    public void setSoftBoundarySupported(boolean value) {
        this.softBoundarySupported = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            boolean theFreeColorSelection;
            theFreeColorSelection = (true?this.isFreeColorSelection():false);
            strategy.appendField(locator, this, "freeColorSelection", buffer, theFreeColorSelection);
        }
        {
            boolean theExample;
            theExample = (true?this.isExample():false);
            strategy.appendField(locator, this, "example", buffer, theExample);
        }
        {
            boolean theSoftBoundarySupported;
            theSoftBoundarySupported = (true?this.isSoftBoundarySupported():false);
            strategy.appendField(locator, this, "softBoundarySupported", buffer, theSoftBoundarySupported);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductRestrictionsDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ProductRestrictionsDTO that = ((ProductRestrictionsDTO) object);
        {
            boolean lhsFreeColorSelection;
            lhsFreeColorSelection = (true?this.isFreeColorSelection():false);
            boolean rhsFreeColorSelection;
            rhsFreeColorSelection = (true?that.isFreeColorSelection():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "freeColorSelection", lhsFreeColorSelection), LocatorUtils.property(thatLocator, "freeColorSelection", rhsFreeColorSelection), lhsFreeColorSelection, rhsFreeColorSelection)) {
                return false;
            }
        }
        {
            boolean lhsExample;
            lhsExample = (true?this.isExample():false);
            boolean rhsExample;
            rhsExample = (true?that.isExample():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "example", lhsExample), LocatorUtils.property(thatLocator, "example", rhsExample), lhsExample, rhsExample)) {
                return false;
            }
        }
        {
            boolean lhsSoftBoundarySupported;
            lhsSoftBoundarySupported = (true?this.isSoftBoundarySupported():false);
            boolean rhsSoftBoundarySupported;
            rhsSoftBoundarySupported = (true?that.isSoftBoundarySupported():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "softBoundarySupported", lhsSoftBoundarySupported), LocatorUtils.property(thatLocator, "softBoundarySupported", rhsSoftBoundarySupported), lhsSoftBoundarySupported, rhsSoftBoundarySupported)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            boolean theFreeColorSelection;
            theFreeColorSelection = (true?this.isFreeColorSelection():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "freeColorSelection", theFreeColorSelection), currentHashCode, theFreeColorSelection);
        }
        {
            boolean theExample;
            theExample = (true?this.isExample():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "example", theExample), currentHashCode, theExample);
        }
        {
            boolean theSoftBoundarySupported;
            theSoftBoundarySupported = (true?this.isSoftBoundarySupported():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "softBoundarySupported", theSoftBoundarySupported), currentHashCode, theSoftBoundarySupported);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ProductRestrictionsDTO) {
            final ProductRestrictionsDTO copy = ((ProductRestrictionsDTO) draftCopy);
            boolean sourceFreeColorSelection;
            sourceFreeColorSelection = (true?this.isFreeColorSelection():false);
            boolean copyFreeColorSelection = strategy.copy(LocatorUtils.property(locator, "freeColorSelection", sourceFreeColorSelection), sourceFreeColorSelection);
            copy.setFreeColorSelection(copyFreeColorSelection);
            boolean sourceExample;
            sourceExample = (true?this.isExample():false);
            boolean copyExample = strategy.copy(LocatorUtils.property(locator, "example", sourceExample), sourceExample);
            copy.setExample(copyExample);
            boolean sourceSoftBoundarySupported;
            sourceSoftBoundarySupported = (true?this.isSoftBoundarySupported():false);
            boolean copySoftBoundarySupported = strategy.copy(LocatorUtils.property(locator, "softBoundarySupported", sourceSoftBoundarySupported), sourceSoftBoundarySupported);
            copy.setSoftBoundarySupported(copySoftBoundarySupported);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductRestrictionsDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof ProductRestrictionsDTO) {
            final ProductRestrictionsDTO target = this;
            final ProductRestrictionsDTO leftObject = ((ProductRestrictionsDTO) left);
            final ProductRestrictionsDTO rightObject = ((ProductRestrictionsDTO) right);
            {
                boolean lhsFreeColorSelection;
                lhsFreeColorSelection = (true?leftObject.isFreeColorSelection():false);
                boolean rhsFreeColorSelection;
                rhsFreeColorSelection = (true?rightObject.isFreeColorSelection():false);
                boolean mergedFreeColorSelection = ((boolean) strategy.merge(LocatorUtils.property(leftLocator, "freeColorSelection", lhsFreeColorSelection), LocatorUtils.property(rightLocator, "freeColorSelection", rhsFreeColorSelection), lhsFreeColorSelection, rhsFreeColorSelection));
                target.setFreeColorSelection(mergedFreeColorSelection);
            }
            {
                boolean lhsExample;
                lhsExample = (true?leftObject.isExample():false);
                boolean rhsExample;
                rhsExample = (true?rightObject.isExample():false);
                boolean mergedExample = ((boolean) strategy.merge(LocatorUtils.property(leftLocator, "example", lhsExample), LocatorUtils.property(rightLocator, "example", rhsExample), lhsExample, rhsExample));
                target.setExample(mergedExample);
            }
            {
                boolean lhsSoftBoundarySupported;
                lhsSoftBoundarySupported = (true?leftObject.isSoftBoundarySupported():false);
                boolean rhsSoftBoundarySupported;
                rhsSoftBoundarySupported = (true?rightObject.isSoftBoundarySupported():false);
                boolean mergedSoftBoundarySupported = ((boolean) strategy.merge(LocatorUtils.property(leftLocator, "softBoundarySupported", lhsSoftBoundarySupported), LocatorUtils.property(rightLocator, "softBoundarySupported", rhsSoftBoundarySupported), lhsSoftBoundarySupported, rhsSoftBoundarySupported));
                target.setSoftBoundarySupported(mergedSoftBoundarySupported);
            }
        }
    }

    public ProductRestrictionsDTO withFreeColorSelection(boolean value) {
        setFreeColorSelection(value);
        return this;
    }

    public ProductRestrictionsDTO withExample(boolean value) {
        setExample(value);
        return this;
    }

    public ProductRestrictionsDTO withSoftBoundarySupported(boolean value) {
        setSoftBoundarySupported(value);
        return this;
    }

}
