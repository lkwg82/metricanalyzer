//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for userDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="userDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="country" type="{http://api.company.biz}reference"/>
 *         &lt;element name="language" type="{http://api.company.biz}reference"/>
 *         &lt;element name="currency" type="{http://api.company.biz}reference"/>
 *         &lt;element name="productTypes" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="printTypes" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="fontFamilies" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="productTypeDepartments" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="shippingTypes" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="designCategories" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="designs" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="products" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="currencies" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="languages" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="countries" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="shops" type="{http://api.company.biz}reference" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "userDTO", propOrder = {
    "name",
    "country",
    "language",
    "currency",
    "productTypes",
    "printTypes",
    "fontFamilies",
    "productTypeDepartments",
    "shippingTypes",
    "designCategories",
    "designs",
    "products",
    "currencies",
    "languages",
    "countries",
    "shops"
})
public class UserDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    @XmlElement(required = true)
    protected Reference country;
    @XmlElement(required = true)
    protected Reference language;
    @XmlElement(required = true)
    protected Reference currency;
    protected Reference productTypes;
    protected Reference printTypes;
    protected Reference fontFamilies;
    protected Reference productTypeDepartments;
    protected Reference shippingTypes;
    protected Reference designCategories;
    protected Reference designs;
    protected Reference products;
    protected Reference currencies;
    protected Reference languages;
    protected Reference countries;
    protected Reference shops;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the country property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCountry() {
        return country;
    }

    /**
     * Sets the value of the country property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCountry(Reference value) {
        this.country = value;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setLanguage(Reference value) {
        this.language = value;
    }

    /**
     * Gets the value of the currency property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the currency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCurrency(Reference value) {
        this.currency = value;
    }

    /**
     * Gets the value of the productTypes property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getProductTypes() {
        return productTypes;
    }

    /**
     * Sets the value of the productTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setProductTypes(Reference value) {
        this.productTypes = value;
    }

    /**
     * Gets the value of the printTypes property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getPrintTypes() {
        return printTypes;
    }

    /**
     * Sets the value of the printTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setPrintTypes(Reference value) {
        this.printTypes = value;
    }

    /**
     * Gets the value of the fontFamilies property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getFontFamilies() {
        return fontFamilies;
    }

    /**
     * Sets the value of the fontFamilies property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setFontFamilies(Reference value) {
        this.fontFamilies = value;
    }

    /**
     * Gets the value of the productTypeDepartments property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getProductTypeDepartments() {
        return productTypeDepartments;
    }

    /**
     * Sets the value of the productTypeDepartments property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setProductTypeDepartments(Reference value) {
        this.productTypeDepartments = value;
    }

    /**
     * Gets the value of the shippingTypes property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getShippingTypes() {
        return shippingTypes;
    }

    /**
     * Sets the value of the shippingTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setShippingTypes(Reference value) {
        this.shippingTypes = value;
    }

    /**
     * Gets the value of the designCategories property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getDesignCategories() {
        return designCategories;
    }

    /**
     * Sets the value of the designCategories property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setDesignCategories(Reference value) {
        this.designCategories = value;
    }

    /**
     * Gets the value of the designs property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getDesigns() {
        return designs;
    }

    /**
     * Sets the value of the designs property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setDesigns(Reference value) {
        this.designs = value;
    }

    /**
     * Gets the value of the products property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getProducts() {
        return products;
    }

    /**
     * Sets the value of the products property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setProducts(Reference value) {
        this.products = value;
    }

    /**
     * Gets the value of the currencies property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCurrencies() {
        return currencies;
    }

    /**
     * Sets the value of the currencies property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCurrencies(Reference value) {
        this.currencies = value;
    }

    /**
     * Gets the value of the languages property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getLanguages() {
        return languages;
    }

    /**
     * Sets the value of the languages property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setLanguages(Reference value) {
        this.languages = value;
    }

    /**
     * Gets the value of the countries property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCountries() {
        return countries;
    }

    /**
     * Sets the value of the countries property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCountries(Reference value) {
        this.countries = value;
    }

    /**
     * Gets the value of the shops property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getShops() {
        return shops;
    }

    /**
     * Sets the value of the shops property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setShops(Reference value) {
        this.shops = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            Reference theCountry;
            theCountry = this.getCountry();
            strategy.appendField(locator, this, "country", buffer, theCountry);
        }
        {
            Reference theLanguage;
            theLanguage = this.getLanguage();
            strategy.appendField(locator, this, "language", buffer, theLanguage);
        }
        {
            Reference theCurrency;
            theCurrency = this.getCurrency();
            strategy.appendField(locator, this, "currency", buffer, theCurrency);
        }
        {
            Reference theProductTypes;
            theProductTypes = this.getProductTypes();
            strategy.appendField(locator, this, "productTypes", buffer, theProductTypes);
        }
        {
            Reference thePrintTypes;
            thePrintTypes = this.getPrintTypes();
            strategy.appendField(locator, this, "printTypes", buffer, thePrintTypes);
        }
        {
            Reference theFontFamilies;
            theFontFamilies = this.getFontFamilies();
            strategy.appendField(locator, this, "fontFamilies", buffer, theFontFamilies);
        }
        {
            Reference theProductTypeDepartments;
            theProductTypeDepartments = this.getProductTypeDepartments();
            strategy.appendField(locator, this, "productTypeDepartments", buffer, theProductTypeDepartments);
        }
        {
            Reference theShippingTypes;
            theShippingTypes = this.getShippingTypes();
            strategy.appendField(locator, this, "shippingTypes", buffer, theShippingTypes);
        }
        {
            Reference theDesignCategories;
            theDesignCategories = this.getDesignCategories();
            strategy.appendField(locator, this, "designCategories", buffer, theDesignCategories);
        }
        {
            Reference theDesigns;
            theDesigns = this.getDesigns();
            strategy.appendField(locator, this, "designs", buffer, theDesigns);
        }
        {
            Reference theProducts;
            theProducts = this.getProducts();
            strategy.appendField(locator, this, "products", buffer, theProducts);
        }
        {
            Reference theCurrencies;
            theCurrencies = this.getCurrencies();
            strategy.appendField(locator, this, "currencies", buffer, theCurrencies);
        }
        {
            Reference theLanguages;
            theLanguages = this.getLanguages();
            strategy.appendField(locator, this, "languages", buffer, theLanguages);
        }
        {
            Reference theCountries;
            theCountries = this.getCountries();
            strategy.appendField(locator, this, "countries", buffer, theCountries);
        }
        {
            Reference theShops;
            theShops = this.getShops();
            strategy.appendField(locator, this, "shops", buffer, theShops);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof UserDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final UserDTO that = ((UserDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Reference lhsCountry;
            lhsCountry = this.getCountry();
            Reference rhsCountry;
            rhsCountry = that.getCountry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "country", lhsCountry), LocatorUtils.property(thatLocator, "country", rhsCountry), lhsCountry, rhsCountry)) {
                return false;
            }
        }
        {
            Reference lhsLanguage;
            lhsLanguage = this.getLanguage();
            Reference rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            Reference lhsCurrency;
            lhsCurrency = this.getCurrency();
            Reference rhsCurrency;
            rhsCurrency = that.getCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currency", lhsCurrency), LocatorUtils.property(thatLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency)) {
                return false;
            }
        }
        {
            Reference lhsProductTypes;
            lhsProductTypes = this.getProductTypes();
            Reference rhsProductTypes;
            rhsProductTypes = that.getProductTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "productTypes", lhsProductTypes), LocatorUtils.property(thatLocator, "productTypes", rhsProductTypes), lhsProductTypes, rhsProductTypes)) {
                return false;
            }
        }
        {
            Reference lhsPrintTypes;
            lhsPrintTypes = this.getPrintTypes();
            Reference rhsPrintTypes;
            rhsPrintTypes = that.getPrintTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printTypes", lhsPrintTypes), LocatorUtils.property(thatLocator, "printTypes", rhsPrintTypes), lhsPrintTypes, rhsPrintTypes)) {
                return false;
            }
        }
        {
            Reference lhsFontFamilies;
            lhsFontFamilies = this.getFontFamilies();
            Reference rhsFontFamilies;
            rhsFontFamilies = that.getFontFamilies();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontFamilies", lhsFontFamilies), LocatorUtils.property(thatLocator, "fontFamilies", rhsFontFamilies), lhsFontFamilies, rhsFontFamilies)) {
                return false;
            }
        }
        {
            Reference lhsProductTypeDepartments;
            lhsProductTypeDepartments = this.getProductTypeDepartments();
            Reference rhsProductTypeDepartments;
            rhsProductTypeDepartments = that.getProductTypeDepartments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "productTypeDepartments", lhsProductTypeDepartments), LocatorUtils.property(thatLocator, "productTypeDepartments", rhsProductTypeDepartments), lhsProductTypeDepartments, rhsProductTypeDepartments)) {
                return false;
            }
        }
        {
            Reference lhsShippingTypes;
            lhsShippingTypes = this.getShippingTypes();
            Reference rhsShippingTypes;
            rhsShippingTypes = that.getShippingTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingTypes", lhsShippingTypes), LocatorUtils.property(thatLocator, "shippingTypes", rhsShippingTypes), lhsShippingTypes, rhsShippingTypes)) {
                return false;
            }
        }
        {
            Reference lhsDesignCategories;
            lhsDesignCategories = this.getDesignCategories();
            Reference rhsDesignCategories;
            rhsDesignCategories = that.getDesignCategories();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "designCategories", lhsDesignCategories), LocatorUtils.property(thatLocator, "designCategories", rhsDesignCategories), lhsDesignCategories, rhsDesignCategories)) {
                return false;
            }
        }
        {
            Reference lhsDesigns;
            lhsDesigns = this.getDesigns();
            Reference rhsDesigns;
            rhsDesigns = that.getDesigns();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "designs", lhsDesigns), LocatorUtils.property(thatLocator, "designs", rhsDesigns), lhsDesigns, rhsDesigns)) {
                return false;
            }
        }
        {
            Reference lhsProducts;
            lhsProducts = this.getProducts();
            Reference rhsProducts;
            rhsProducts = that.getProducts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "products", lhsProducts), LocatorUtils.property(thatLocator, "products", rhsProducts), lhsProducts, rhsProducts)) {
                return false;
            }
        }
        {
            Reference lhsCurrencies;
            lhsCurrencies = this.getCurrencies();
            Reference rhsCurrencies;
            rhsCurrencies = that.getCurrencies();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencies", lhsCurrencies), LocatorUtils.property(thatLocator, "currencies", rhsCurrencies), lhsCurrencies, rhsCurrencies)) {
                return false;
            }
        }
        {
            Reference lhsLanguages;
            lhsLanguages = this.getLanguages();
            Reference rhsLanguages;
            rhsLanguages = that.getLanguages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "languages", lhsLanguages), LocatorUtils.property(thatLocator, "languages", rhsLanguages), lhsLanguages, rhsLanguages)) {
                return false;
            }
        }
        {
            Reference lhsCountries;
            lhsCountries = this.getCountries();
            Reference rhsCountries;
            rhsCountries = that.getCountries();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "countries", lhsCountries), LocatorUtils.property(thatLocator, "countries", rhsCountries), lhsCountries, rhsCountries)) {
                return false;
            }
        }
        {
            Reference lhsShops;
            lhsShops = this.getShops();
            Reference rhsShops;
            rhsShops = that.getShops();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shops", lhsShops), LocatorUtils.property(thatLocator, "shops", rhsShops), lhsShops, rhsShops)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Reference theCountry;
            theCountry = this.getCountry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "country", theCountry), currentHashCode, theCountry);
        }
        {
            Reference theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            Reference theCurrency;
            theCurrency = this.getCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currency", theCurrency), currentHashCode, theCurrency);
        }
        {
            Reference theProductTypes;
            theProductTypes = this.getProductTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productTypes", theProductTypes), currentHashCode, theProductTypes);
        }
        {
            Reference thePrintTypes;
            thePrintTypes = this.getPrintTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printTypes", thePrintTypes), currentHashCode, thePrintTypes);
        }
        {
            Reference theFontFamilies;
            theFontFamilies = this.getFontFamilies();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontFamilies", theFontFamilies), currentHashCode, theFontFamilies);
        }
        {
            Reference theProductTypeDepartments;
            theProductTypeDepartments = this.getProductTypeDepartments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productTypeDepartments", theProductTypeDepartments), currentHashCode, theProductTypeDepartments);
        }
        {
            Reference theShippingTypes;
            theShippingTypes = this.getShippingTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingTypes", theShippingTypes), currentHashCode, theShippingTypes);
        }
        {
            Reference theDesignCategories;
            theDesignCategories = this.getDesignCategories();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designCategories", theDesignCategories), currentHashCode, theDesignCategories);
        }
        {
            Reference theDesigns;
            theDesigns = this.getDesigns();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designs", theDesigns), currentHashCode, theDesigns);
        }
        {
            Reference theProducts;
            theProducts = this.getProducts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "products", theProducts), currentHashCode, theProducts);
        }
        {
            Reference theCurrencies;
            theCurrencies = this.getCurrencies();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencies", theCurrencies), currentHashCode, theCurrencies);
        }
        {
            Reference theLanguages;
            theLanguages = this.getLanguages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "languages", theLanguages), currentHashCode, theLanguages);
        }
        {
            Reference theCountries;
            theCountries = this.getCountries();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "countries", theCountries), currentHashCode, theCountries);
        }
        {
            Reference theShops;
            theShops = this.getShops();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shops", theShops), currentHashCode, theShops);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof UserDTO) {
            final UserDTO copy = ((UserDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.country!= null) {
                Reference sourceCountry;
                sourceCountry = this.getCountry();
                Reference copyCountry = ((Reference) strategy.copy(LocatorUtils.property(locator, "country", sourceCountry), sourceCountry));
                copy.setCountry(copyCountry);
            } else {
                copy.country = null;
            }
            if (this.language!= null) {
                Reference sourceLanguage;
                sourceLanguage = this.getLanguage();
                Reference copyLanguage = ((Reference) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                copy.setLanguage(copyLanguage);
            } else {
                copy.language = null;
            }
            if (this.currency!= null) {
                Reference sourceCurrency;
                sourceCurrency = this.getCurrency();
                Reference copyCurrency = ((Reference) strategy.copy(LocatorUtils.property(locator, "currency", sourceCurrency), sourceCurrency));
                copy.setCurrency(copyCurrency);
            } else {
                copy.currency = null;
            }
            if (this.productTypes!= null) {
                Reference sourceProductTypes;
                sourceProductTypes = this.getProductTypes();
                Reference copyProductTypes = ((Reference) strategy.copy(LocatorUtils.property(locator, "productTypes", sourceProductTypes), sourceProductTypes));
                copy.setProductTypes(copyProductTypes);
            } else {
                copy.productTypes = null;
            }
            if (this.printTypes!= null) {
                Reference sourcePrintTypes;
                sourcePrintTypes = this.getPrintTypes();
                Reference copyPrintTypes = ((Reference) strategy.copy(LocatorUtils.property(locator, "printTypes", sourcePrintTypes), sourcePrintTypes));
                copy.setPrintTypes(copyPrintTypes);
            } else {
                copy.printTypes = null;
            }
            if (this.fontFamilies!= null) {
                Reference sourceFontFamilies;
                sourceFontFamilies = this.getFontFamilies();
                Reference copyFontFamilies = ((Reference) strategy.copy(LocatorUtils.property(locator, "fontFamilies", sourceFontFamilies), sourceFontFamilies));
                copy.setFontFamilies(copyFontFamilies);
            } else {
                copy.fontFamilies = null;
            }
            if (this.productTypeDepartments!= null) {
                Reference sourceProductTypeDepartments;
                sourceProductTypeDepartments = this.getProductTypeDepartments();
                Reference copyProductTypeDepartments = ((Reference) strategy.copy(LocatorUtils.property(locator, "productTypeDepartments", sourceProductTypeDepartments), sourceProductTypeDepartments));
                copy.setProductTypeDepartments(copyProductTypeDepartments);
            } else {
                copy.productTypeDepartments = null;
            }
            if (this.shippingTypes!= null) {
                Reference sourceShippingTypes;
                sourceShippingTypes = this.getShippingTypes();
                Reference copyShippingTypes = ((Reference) strategy.copy(LocatorUtils.property(locator, "shippingTypes", sourceShippingTypes), sourceShippingTypes));
                copy.setShippingTypes(copyShippingTypes);
            } else {
                copy.shippingTypes = null;
            }
            if (this.designCategories!= null) {
                Reference sourceDesignCategories;
                sourceDesignCategories = this.getDesignCategories();
                Reference copyDesignCategories = ((Reference) strategy.copy(LocatorUtils.property(locator, "designCategories", sourceDesignCategories), sourceDesignCategories));
                copy.setDesignCategories(copyDesignCategories);
            } else {
                copy.designCategories = null;
            }
            if (this.designs!= null) {
                Reference sourceDesigns;
                sourceDesigns = this.getDesigns();
                Reference copyDesigns = ((Reference) strategy.copy(LocatorUtils.property(locator, "designs", sourceDesigns), sourceDesigns));
                copy.setDesigns(copyDesigns);
            } else {
                copy.designs = null;
            }
            if (this.products!= null) {
                Reference sourceProducts;
                sourceProducts = this.getProducts();
                Reference copyProducts = ((Reference) strategy.copy(LocatorUtils.property(locator, "products", sourceProducts), sourceProducts));
                copy.setProducts(copyProducts);
            } else {
                copy.products = null;
            }
            if (this.currencies!= null) {
                Reference sourceCurrencies;
                sourceCurrencies = this.getCurrencies();
                Reference copyCurrencies = ((Reference) strategy.copy(LocatorUtils.property(locator, "currencies", sourceCurrencies), sourceCurrencies));
                copy.setCurrencies(copyCurrencies);
            } else {
                copy.currencies = null;
            }
            if (this.languages!= null) {
                Reference sourceLanguages;
                sourceLanguages = this.getLanguages();
                Reference copyLanguages = ((Reference) strategy.copy(LocatorUtils.property(locator, "languages", sourceLanguages), sourceLanguages));
                copy.setLanguages(copyLanguages);
            } else {
                copy.languages = null;
            }
            if (this.countries!= null) {
                Reference sourceCountries;
                sourceCountries = this.getCountries();
                Reference copyCountries = ((Reference) strategy.copy(LocatorUtils.property(locator, "countries", sourceCountries), sourceCountries));
                copy.setCountries(copyCountries);
            } else {
                copy.countries = null;
            }
            if (this.shops!= null) {
                Reference sourceShops;
                sourceShops = this.getShops();
                Reference copyShops = ((Reference) strategy.copy(LocatorUtils.property(locator, "shops", sourceShops), sourceShops));
                copy.setShops(copyShops);
            } else {
                copy.shops = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new UserDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof UserDTO) {
            final UserDTO target = this;
            final UserDTO leftObject = ((UserDTO) left);
            final UserDTO rightObject = ((UserDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                Reference lhsCountry;
                lhsCountry = leftObject.getCountry();
                Reference rhsCountry;
                rhsCountry = rightObject.getCountry();
                Reference mergedCountry = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "country", lhsCountry), LocatorUtils.property(rightLocator, "country", rhsCountry), lhsCountry, rhsCountry));
                target.setCountry(mergedCountry);
            }
            {
                Reference lhsLanguage;
                lhsLanguage = leftObject.getLanguage();
                Reference rhsLanguage;
                rhsLanguage = rightObject.getLanguage();
                Reference mergedLanguage = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "language", lhsLanguage), LocatorUtils.property(rightLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage));
                target.setLanguage(mergedLanguage);
            }
            {
                Reference lhsCurrency;
                lhsCurrency = leftObject.getCurrency();
                Reference rhsCurrency;
                rhsCurrency = rightObject.getCurrency();
                Reference mergedCurrency = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "currency", lhsCurrency), LocatorUtils.property(rightLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency));
                target.setCurrency(mergedCurrency);
            }
            {
                Reference lhsProductTypes;
                lhsProductTypes = leftObject.getProductTypes();
                Reference rhsProductTypes;
                rhsProductTypes = rightObject.getProductTypes();
                Reference mergedProductTypes = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "productTypes", lhsProductTypes), LocatorUtils.property(rightLocator, "productTypes", rhsProductTypes), lhsProductTypes, rhsProductTypes));
                target.setProductTypes(mergedProductTypes);
            }
            {
                Reference lhsPrintTypes;
                lhsPrintTypes = leftObject.getPrintTypes();
                Reference rhsPrintTypes;
                rhsPrintTypes = rightObject.getPrintTypes();
                Reference mergedPrintTypes = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "printTypes", lhsPrintTypes), LocatorUtils.property(rightLocator, "printTypes", rhsPrintTypes), lhsPrintTypes, rhsPrintTypes));
                target.setPrintTypes(mergedPrintTypes);
            }
            {
                Reference lhsFontFamilies;
                lhsFontFamilies = leftObject.getFontFamilies();
                Reference rhsFontFamilies;
                rhsFontFamilies = rightObject.getFontFamilies();
                Reference mergedFontFamilies = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "fontFamilies", lhsFontFamilies), LocatorUtils.property(rightLocator, "fontFamilies", rhsFontFamilies), lhsFontFamilies, rhsFontFamilies));
                target.setFontFamilies(mergedFontFamilies);
            }
            {
                Reference lhsProductTypeDepartments;
                lhsProductTypeDepartments = leftObject.getProductTypeDepartments();
                Reference rhsProductTypeDepartments;
                rhsProductTypeDepartments = rightObject.getProductTypeDepartments();
                Reference mergedProductTypeDepartments = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "productTypeDepartments", lhsProductTypeDepartments), LocatorUtils.property(rightLocator, "productTypeDepartments", rhsProductTypeDepartments), lhsProductTypeDepartments, rhsProductTypeDepartments));
                target.setProductTypeDepartments(mergedProductTypeDepartments);
            }
            {
                Reference lhsShippingTypes;
                lhsShippingTypes = leftObject.getShippingTypes();
                Reference rhsShippingTypes;
                rhsShippingTypes = rightObject.getShippingTypes();
                Reference mergedShippingTypes = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "shippingTypes", lhsShippingTypes), LocatorUtils.property(rightLocator, "shippingTypes", rhsShippingTypes), lhsShippingTypes, rhsShippingTypes));
                target.setShippingTypes(mergedShippingTypes);
            }
            {
                Reference lhsDesignCategories;
                lhsDesignCategories = leftObject.getDesignCategories();
                Reference rhsDesignCategories;
                rhsDesignCategories = rightObject.getDesignCategories();
                Reference mergedDesignCategories = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "designCategories", lhsDesignCategories), LocatorUtils.property(rightLocator, "designCategories", rhsDesignCategories), lhsDesignCategories, rhsDesignCategories));
                target.setDesignCategories(mergedDesignCategories);
            }
            {
                Reference lhsDesigns;
                lhsDesigns = leftObject.getDesigns();
                Reference rhsDesigns;
                rhsDesigns = rightObject.getDesigns();
                Reference mergedDesigns = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "designs", lhsDesigns), LocatorUtils.property(rightLocator, "designs", rhsDesigns), lhsDesigns, rhsDesigns));
                target.setDesigns(mergedDesigns);
            }
            {
                Reference lhsProducts;
                lhsProducts = leftObject.getProducts();
                Reference rhsProducts;
                rhsProducts = rightObject.getProducts();
                Reference mergedProducts = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "products", lhsProducts), LocatorUtils.property(rightLocator, "products", rhsProducts), lhsProducts, rhsProducts));
                target.setProducts(mergedProducts);
            }
            {
                Reference lhsCurrencies;
                lhsCurrencies = leftObject.getCurrencies();
                Reference rhsCurrencies;
                rhsCurrencies = rightObject.getCurrencies();
                Reference mergedCurrencies = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "currencies", lhsCurrencies), LocatorUtils.property(rightLocator, "currencies", rhsCurrencies), lhsCurrencies, rhsCurrencies));
                target.setCurrencies(mergedCurrencies);
            }
            {
                Reference lhsLanguages;
                lhsLanguages = leftObject.getLanguages();
                Reference rhsLanguages;
                rhsLanguages = rightObject.getLanguages();
                Reference mergedLanguages = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "languages", lhsLanguages), LocatorUtils.property(rightLocator, "languages", rhsLanguages), lhsLanguages, rhsLanguages));
                target.setLanguages(mergedLanguages);
            }
            {
                Reference lhsCountries;
                lhsCountries = leftObject.getCountries();
                Reference rhsCountries;
                rhsCountries = rightObject.getCountries();
                Reference mergedCountries = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "countries", lhsCountries), LocatorUtils.property(rightLocator, "countries", rhsCountries), lhsCountries, rhsCountries));
                target.setCountries(mergedCountries);
            }
            {
                Reference lhsShops;
                lhsShops = leftObject.getShops();
                Reference rhsShops;
                rhsShops = rightObject.getShops();
                Reference mergedShops = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "shops", lhsShops), LocatorUtils.property(rightLocator, "shops", rhsShops), lhsShops, rhsShops));
                target.setShops(mergedShops);
            }
        }
    }

    public UserDTO withName(String value) {
        setName(value);
        return this;
    }

    public UserDTO withCountry(Reference value) {
        setCountry(value);
        return this;
    }

    public UserDTO withLanguage(Reference value) {
        setLanguage(value);
        return this;
    }

    public UserDTO withCurrency(Reference value) {
        setCurrency(value);
        return this;
    }

    public UserDTO withProductTypes(Reference value) {
        setProductTypes(value);
        return this;
    }

    public UserDTO withPrintTypes(Reference value) {
        setPrintTypes(value);
        return this;
    }

    public UserDTO withFontFamilies(Reference value) {
        setFontFamilies(value);
        return this;
    }

    public UserDTO withProductTypeDepartments(Reference value) {
        setProductTypeDepartments(value);
        return this;
    }

    public UserDTO withShippingTypes(Reference value) {
        setShippingTypes(value);
        return this;
    }

    public UserDTO withDesignCategories(Reference value) {
        setDesignCategories(value);
        return this;
    }

    public UserDTO withDesigns(Reference value) {
        setDesigns(value);
        return this;
    }

    public UserDTO withProducts(Reference value) {
        setProducts(value);
        return this;
    }

    public UserDTO withCurrencies(Reference value) {
        setCurrencies(value);
        return this;
    }

    public UserDTO withLanguages(Reference value) {
        setLanguages(value);
        return this;
    }

    public UserDTO withCountries(Reference value) {
        setCountries(value);
        return this;
    }

    public UserDTO withShops(Reference value) {
        setShops(value);
        return this;
    }

    @Override
    public UserDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public UserDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public UserDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }

}
