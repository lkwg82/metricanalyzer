//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for currencyDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="currencyDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="plain" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="isoCode" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="symbol" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="decimalCount" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="pattern" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "currencyDTO", propOrder = {
    "plain",
    "isoCode",
    "symbol",
    "decimalCount",
    "pattern"
})
public class CurrencyDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String plain;
    @XmlElement(required = true)
    protected String isoCode;
    @XmlElement(required = true)
    protected String symbol;
    protected int decimalCount;
    @XmlElement(required = true)
    protected String pattern;

    /**
     * Gets the value of the plain property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlain() {
        return plain;
    }

    /**
     * Sets the value of the plain property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlain(String value) {
        this.plain = value;
    }

    /**
     * Gets the value of the isoCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIsoCode() {
        return isoCode;
    }

    /**
     * Sets the value of the isoCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsoCode(String value) {
        this.isoCode = value;
    }

    /**
     * Gets the value of the symbol property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSymbol() {
        return symbol;
    }

    /**
     * Sets the value of the symbol property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSymbol(String value) {
        this.symbol = value;
    }

    /**
     * Gets the value of the decimalCount property.
     * 
     */
    public int getDecimalCount() {
        return decimalCount;
    }

    /**
     * Sets the value of the decimalCount property.
     * 
     */
    public void setDecimalCount(int value) {
        this.decimalCount = value;
    }

    /**
     * Gets the value of the pattern property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Sets the value of the pattern property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPattern(String value) {
        this.pattern = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String thePlain;
            thePlain = this.getPlain();
            strategy.appendField(locator, this, "plain", buffer, thePlain);
        }
        {
            String theIsoCode;
            theIsoCode = this.getIsoCode();
            strategy.appendField(locator, this, "isoCode", buffer, theIsoCode);
        }
        {
            String theSymbol;
            theSymbol = this.getSymbol();
            strategy.appendField(locator, this, "symbol", buffer, theSymbol);
        }
        {
            int theDecimalCount;
            theDecimalCount = (true?this.getDecimalCount(): 0);
            strategy.appendField(locator, this, "decimalCount", buffer, theDecimalCount);
        }
        {
            String thePattern;
            thePattern = this.getPattern();
            strategy.appendField(locator, this, "pattern", buffer, thePattern);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CurrencyDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CurrencyDTO that = ((CurrencyDTO) object);
        {
            String lhsPlain;
            lhsPlain = this.getPlain();
            String rhsPlain;
            rhsPlain = that.getPlain();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "plain", lhsPlain), LocatorUtils.property(thatLocator, "plain", rhsPlain), lhsPlain, rhsPlain)) {
                return false;
            }
        }
        {
            String lhsIsoCode;
            lhsIsoCode = this.getIsoCode();
            String rhsIsoCode;
            rhsIsoCode = that.getIsoCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isoCode", lhsIsoCode), LocatorUtils.property(thatLocator, "isoCode", rhsIsoCode), lhsIsoCode, rhsIsoCode)) {
                return false;
            }
        }
        {
            String lhsSymbol;
            lhsSymbol = this.getSymbol();
            String rhsSymbol;
            rhsSymbol = that.getSymbol();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "symbol", lhsSymbol), LocatorUtils.property(thatLocator, "symbol", rhsSymbol), lhsSymbol, rhsSymbol)) {
                return false;
            }
        }
        {
            int lhsDecimalCount;
            lhsDecimalCount = (true?this.getDecimalCount(): 0);
            int rhsDecimalCount;
            rhsDecimalCount = (true?that.getDecimalCount(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalCount", lhsDecimalCount), LocatorUtils.property(thatLocator, "decimalCount", rhsDecimalCount), lhsDecimalCount, rhsDecimalCount)) {
                return false;
            }
        }
        {
            String lhsPattern;
            lhsPattern = this.getPattern();
            String rhsPattern;
            rhsPattern = that.getPattern();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pattern", lhsPattern), LocatorUtils.property(thatLocator, "pattern", rhsPattern), lhsPattern, rhsPattern)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String thePlain;
            thePlain = this.getPlain();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "plain", thePlain), currentHashCode, thePlain);
        }
        {
            String theIsoCode;
            theIsoCode = this.getIsoCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isoCode", theIsoCode), currentHashCode, theIsoCode);
        }
        {
            String theSymbol;
            theSymbol = this.getSymbol();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "symbol", theSymbol), currentHashCode, theSymbol);
        }
        {
            int theDecimalCount;
            theDecimalCount = (true?this.getDecimalCount(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalCount", theDecimalCount), currentHashCode, theDecimalCount);
        }
        {
            String thePattern;
            thePattern = this.getPattern();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pattern", thePattern), currentHashCode, thePattern);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CurrencyDTO) {
            final CurrencyDTO copy = ((CurrencyDTO) draftCopy);
            if (this.plain!= null) {
                String sourcePlain;
                sourcePlain = this.getPlain();
                String copyPlain = ((String) strategy.copy(LocatorUtils.property(locator, "plain", sourcePlain), sourcePlain));
                copy.setPlain(copyPlain);
            } else {
                copy.plain = null;
            }
            if (this.isoCode!= null) {
                String sourceIsoCode;
                sourceIsoCode = this.getIsoCode();
                String copyIsoCode = ((String) strategy.copy(LocatorUtils.property(locator, "isoCode", sourceIsoCode), sourceIsoCode));
                copy.setIsoCode(copyIsoCode);
            } else {
                copy.isoCode = null;
            }
            if (this.symbol!= null) {
                String sourceSymbol;
                sourceSymbol = this.getSymbol();
                String copySymbol = ((String) strategy.copy(LocatorUtils.property(locator, "symbol", sourceSymbol), sourceSymbol));
                copy.setSymbol(copySymbol);
            } else {
                copy.symbol = null;
            }
            int sourceDecimalCount;
            sourceDecimalCount = (true?this.getDecimalCount(): 0);
            int copyDecimalCount = strategy.copy(LocatorUtils.property(locator, "decimalCount", sourceDecimalCount), sourceDecimalCount);
            copy.setDecimalCount(copyDecimalCount);
            if (this.pattern!= null) {
                String sourcePattern;
                sourcePattern = this.getPattern();
                String copyPattern = ((String) strategy.copy(LocatorUtils.property(locator, "pattern", sourcePattern), sourcePattern));
                copy.setPattern(copyPattern);
            } else {
                copy.pattern = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CurrencyDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof CurrencyDTO) {
            final CurrencyDTO target = this;
            final CurrencyDTO leftObject = ((CurrencyDTO) left);
            final CurrencyDTO rightObject = ((CurrencyDTO) right);
            {
                String lhsPlain;
                lhsPlain = leftObject.getPlain();
                String rhsPlain;
                rhsPlain = rightObject.getPlain();
                String mergedPlain = ((String) strategy.merge(LocatorUtils.property(leftLocator, "plain", lhsPlain), LocatorUtils.property(rightLocator, "plain", rhsPlain), lhsPlain, rhsPlain));
                target.setPlain(mergedPlain);
            }
            {
                String lhsIsoCode;
                lhsIsoCode = leftObject.getIsoCode();
                String rhsIsoCode;
                rhsIsoCode = rightObject.getIsoCode();
                String mergedIsoCode = ((String) strategy.merge(LocatorUtils.property(leftLocator, "isoCode", lhsIsoCode), LocatorUtils.property(rightLocator, "isoCode", rhsIsoCode), lhsIsoCode, rhsIsoCode));
                target.setIsoCode(mergedIsoCode);
            }
            {
                String lhsSymbol;
                lhsSymbol = leftObject.getSymbol();
                String rhsSymbol;
                rhsSymbol = rightObject.getSymbol();
                String mergedSymbol = ((String) strategy.merge(LocatorUtils.property(leftLocator, "symbol", lhsSymbol), LocatorUtils.property(rightLocator, "symbol", rhsSymbol), lhsSymbol, rhsSymbol));
                target.setSymbol(mergedSymbol);
            }
            {
                int lhsDecimalCount;
                lhsDecimalCount = (true?leftObject.getDecimalCount(): 0);
                int rhsDecimalCount;
                rhsDecimalCount = (true?rightObject.getDecimalCount(): 0);
                int mergedDecimalCount = ((int) strategy.merge(LocatorUtils.property(leftLocator, "decimalCount", lhsDecimalCount), LocatorUtils.property(rightLocator, "decimalCount", rhsDecimalCount), lhsDecimalCount, rhsDecimalCount));
                target.setDecimalCount(mergedDecimalCount);
            }
            {
                String lhsPattern;
                lhsPattern = leftObject.getPattern();
                String rhsPattern;
                rhsPattern = rightObject.getPattern();
                String mergedPattern = ((String) strategy.merge(LocatorUtils.property(leftLocator, "pattern", lhsPattern), LocatorUtils.property(rightLocator, "pattern", rhsPattern), lhsPattern, rhsPattern));
                target.setPattern(mergedPattern);
            }
        }
    }

    public CurrencyDTO withPlain(String value) {
        setPlain(value);
        return this;
    }

    public CurrencyDTO withIsoCode(String value) {
        setIsoCode(value);
        return this;
    }

    public CurrencyDTO withSymbol(String value) {
        setSymbol(value);
        return this;
    }

    public CurrencyDTO withDecimalCount(int value) {
        setDecimalCount(value);
        return this;
    }

    public CurrencyDTO withPattern(String value) {
        setPattern(value);
        return this;
    }

    @Override
    public CurrencyDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public CurrencyDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public CurrencyDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }

}
