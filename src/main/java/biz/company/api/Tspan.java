//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlMixed;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for tspan complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="tspan">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element ref="{http://api.company.biz}tspan"/>
 *           &lt;element ref="{http://api.company.biz}text"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="fontFamilyId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="fontId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="printColorId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="x" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="y" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="text-anchor" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="lineWidth" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="fill" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="font-family" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="font-weight" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="font-size" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="font-style" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="transform" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "tspan", propOrder = {
    "content"
})
@XmlSeeAlso({
    Text.class
})
public class Tspan
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElementRefs({
        @XmlElementRef(name = "tspan", namespace = "http://api.company.biz", type = JAXBElement.class),
        @XmlElementRef(name = "text", namespace = "http://api.company.biz", type = JAXBElement.class)
    })
    @XmlMixed
    protected List<Serializable> content;
    @XmlAttribute(name = "fontFamilyId")
    protected String fontFamilyId;
    @XmlAttribute(name = "fontId")
    protected String fontId;
    @XmlAttribute(name = "printColorId")
    protected String printColorId;
    @XmlAttribute(name = "x")
    protected String x;
    @XmlAttribute(name = "y")
    protected String y;
    @XmlAttribute(name = "text-anchor")
    protected String textAnchor;
    @XmlAttribute(name = "lineWidth")
    protected String lineWidth;
    @XmlAttribute(name = "fill")
    protected String fill;
    @XmlAttribute(name = "font-family")
    protected String fontFamily;
    @XmlAttribute(name = "font-weight")
    protected String fontWeight;
    @XmlAttribute(name = "font-size")
    protected String fontSize;
    @XmlAttribute(name = "font-style")
    protected String fontStyle;
    @XmlAttribute(name = "transform")
    protected String transform;

    /**
     * Gets the value of the content property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the content property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link Text }{@code >}
     * {@link String }
     * {@link JAXBElement }{@code <}{@link Tspan }{@code >}
     * 
     * 
     */
    public List<Serializable> getContent() {
        if (content == null) {
            content = new ArrayList<Serializable>();
        }
        return this.content;
    }

    /**
     * Gets the value of the fontFamilyId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFontFamilyId() {
        return fontFamilyId;
    }

    /**
     * Sets the value of the fontFamilyId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFontFamilyId(String value) {
        this.fontFamilyId = value;
    }

    /**
     * Gets the value of the fontId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFontId() {
        return fontId;
    }

    /**
     * Sets the value of the fontId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFontId(String value) {
        this.fontId = value;
    }

    /**
     * Gets the value of the printColorId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrintColorId() {
        return printColorId;
    }

    /**
     * Sets the value of the printColorId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrintColorId(String value) {
        this.printColorId = value;
    }

    /**
     * Gets the value of the x property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getX() {
        return x;
    }

    /**
     * Sets the value of the x property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setX(String value) {
        this.x = value;
    }

    /**
     * Gets the value of the y property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getY() {
        return y;
    }

    /**
     * Sets the value of the y property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setY(String value) {
        this.y = value;
    }

    /**
     * Gets the value of the textAnchor property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTextAnchor() {
        return textAnchor;
    }

    /**
     * Sets the value of the textAnchor property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTextAnchor(String value) {
        this.textAnchor = value;
    }

    /**
     * Gets the value of the lineWidth property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLineWidth() {
        return lineWidth;
    }

    /**
     * Sets the value of the lineWidth property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLineWidth(String value) {
        this.lineWidth = value;
    }

    /**
     * Gets the value of the fill property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFill() {
        return fill;
    }

    /**
     * Sets the value of the fill property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFill(String value) {
        this.fill = value;
    }

    /**
     * Gets the value of the fontFamily property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFontFamily() {
        return fontFamily;
    }

    /**
     * Sets the value of the fontFamily property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFontFamily(String value) {
        this.fontFamily = value;
    }

    /**
     * Gets the value of the fontWeight property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFontWeight() {
        return fontWeight;
    }

    /**
     * Sets the value of the fontWeight property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFontWeight(String value) {
        this.fontWeight = value;
    }

    /**
     * Gets the value of the fontSize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFontSize() {
        return fontSize;
    }

    /**
     * Sets the value of the fontSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFontSize(String value) {
        this.fontSize = value;
    }

    /**
     * Gets the value of the fontStyle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFontStyle() {
        return fontStyle;
    }

    /**
     * Sets the value of the fontStyle property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFontStyle(String value) {
        this.fontStyle = value;
    }

    /**
     * Gets the value of the transform property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransform() {
        return transform;
    }

    /**
     * Sets the value of the transform property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransform(String value) {
        this.transform = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<Serializable> theContent;
            theContent = (((this.content!= null)&&(!this.content.isEmpty()))?this.getContent():null);
            strategy.appendField(locator, this, "content", buffer, theContent);
        }
        {
            String theFontFamilyId;
            theFontFamilyId = this.getFontFamilyId();
            strategy.appendField(locator, this, "fontFamilyId", buffer, theFontFamilyId);
        }
        {
            String theFontId;
            theFontId = this.getFontId();
            strategy.appendField(locator, this, "fontId", buffer, theFontId);
        }
        {
            String thePrintColorId;
            thePrintColorId = this.getPrintColorId();
            strategy.appendField(locator, this, "printColorId", buffer, thePrintColorId);
        }
        {
            String theX;
            theX = this.getX();
            strategy.appendField(locator, this, "x", buffer, theX);
        }
        {
            String theY;
            theY = this.getY();
            strategy.appendField(locator, this, "y", buffer, theY);
        }
        {
            String theTextAnchor;
            theTextAnchor = this.getTextAnchor();
            strategy.appendField(locator, this, "textAnchor", buffer, theTextAnchor);
        }
        {
            String theLineWidth;
            theLineWidth = this.getLineWidth();
            strategy.appendField(locator, this, "lineWidth", buffer, theLineWidth);
        }
        {
            String theFill;
            theFill = this.getFill();
            strategy.appendField(locator, this, "fill", buffer, theFill);
        }
        {
            String theFontFamily;
            theFontFamily = this.getFontFamily();
            strategy.appendField(locator, this, "fontFamily", buffer, theFontFamily);
        }
        {
            String theFontWeight;
            theFontWeight = this.getFontWeight();
            strategy.appendField(locator, this, "fontWeight", buffer, theFontWeight);
        }
        {
            String theFontSize;
            theFontSize = this.getFontSize();
            strategy.appendField(locator, this, "fontSize", buffer, theFontSize);
        }
        {
            String theFontStyle;
            theFontStyle = this.getFontStyle();
            strategy.appendField(locator, this, "fontStyle", buffer, theFontStyle);
        }
        {
            String theTransform;
            theTransform = this.getTransform();
            strategy.appendField(locator, this, "transform", buffer, theTransform);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Tspan)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Tspan that = ((Tspan) object);
        {
            List<Serializable> lhsContent;
            lhsContent = (((this.content!= null)&&(!this.content.isEmpty()))?this.getContent():null);
            List<Serializable> rhsContent;
            rhsContent = (((that.content!= null)&&(!that.content.isEmpty()))?that.getContent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                return false;
            }
        }
        {
            String lhsFontFamilyId;
            lhsFontFamilyId = this.getFontFamilyId();
            String rhsFontFamilyId;
            rhsFontFamilyId = that.getFontFamilyId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontFamilyId", lhsFontFamilyId), LocatorUtils.property(thatLocator, "fontFamilyId", rhsFontFamilyId), lhsFontFamilyId, rhsFontFamilyId)) {
                return false;
            }
        }
        {
            String lhsFontId;
            lhsFontId = this.getFontId();
            String rhsFontId;
            rhsFontId = that.getFontId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontId", lhsFontId), LocatorUtils.property(thatLocator, "fontId", rhsFontId), lhsFontId, rhsFontId)) {
                return false;
            }
        }
        {
            String lhsPrintColorId;
            lhsPrintColorId = this.getPrintColorId();
            String rhsPrintColorId;
            rhsPrintColorId = that.getPrintColorId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printColorId", lhsPrintColorId), LocatorUtils.property(thatLocator, "printColorId", rhsPrintColorId), lhsPrintColorId, rhsPrintColorId)) {
                return false;
            }
        }
        {
            String lhsX;
            lhsX = this.getX();
            String rhsX;
            rhsX = that.getX();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "x", lhsX), LocatorUtils.property(thatLocator, "x", rhsX), lhsX, rhsX)) {
                return false;
            }
        }
        {
            String lhsY;
            lhsY = this.getY();
            String rhsY;
            rhsY = that.getY();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "y", lhsY), LocatorUtils.property(thatLocator, "y", rhsY), lhsY, rhsY)) {
                return false;
            }
        }
        {
            String lhsTextAnchor;
            lhsTextAnchor = this.getTextAnchor();
            String rhsTextAnchor;
            rhsTextAnchor = that.getTextAnchor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textAnchor", lhsTextAnchor), LocatorUtils.property(thatLocator, "textAnchor", rhsTextAnchor), lhsTextAnchor, rhsTextAnchor)) {
                return false;
            }
        }
        {
            String lhsLineWidth;
            lhsLineWidth = this.getLineWidth();
            String rhsLineWidth;
            rhsLineWidth = that.getLineWidth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lineWidth", lhsLineWidth), LocatorUtils.property(thatLocator, "lineWidth", rhsLineWidth), lhsLineWidth, rhsLineWidth)) {
                return false;
            }
        }
        {
            String lhsFill;
            lhsFill = this.getFill();
            String rhsFill;
            rhsFill = that.getFill();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fill", lhsFill), LocatorUtils.property(thatLocator, "fill", rhsFill), lhsFill, rhsFill)) {
                return false;
            }
        }
        {
            String lhsFontFamily;
            lhsFontFamily = this.getFontFamily();
            String rhsFontFamily;
            rhsFontFamily = that.getFontFamily();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontFamily", lhsFontFamily), LocatorUtils.property(thatLocator, "fontFamily", rhsFontFamily), lhsFontFamily, rhsFontFamily)) {
                return false;
            }
        }
        {
            String lhsFontWeight;
            lhsFontWeight = this.getFontWeight();
            String rhsFontWeight;
            rhsFontWeight = that.getFontWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontWeight", lhsFontWeight), LocatorUtils.property(thatLocator, "fontWeight", rhsFontWeight), lhsFontWeight, rhsFontWeight)) {
                return false;
            }
        }
        {
            String lhsFontSize;
            lhsFontSize = this.getFontSize();
            String rhsFontSize;
            rhsFontSize = that.getFontSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontSize", lhsFontSize), LocatorUtils.property(thatLocator, "fontSize", rhsFontSize), lhsFontSize, rhsFontSize)) {
                return false;
            }
        }
        {
            String lhsFontStyle;
            lhsFontStyle = this.getFontStyle();
            String rhsFontStyle;
            rhsFontStyle = that.getFontStyle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontStyle", lhsFontStyle), LocatorUtils.property(thatLocator, "fontStyle", rhsFontStyle), lhsFontStyle, rhsFontStyle)) {
                return false;
            }
        }
        {
            String lhsTransform;
            lhsTransform = this.getTransform();
            String rhsTransform;
            rhsTransform = that.getTransform();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transform", lhsTransform), LocatorUtils.property(thatLocator, "transform", rhsTransform), lhsTransform, rhsTransform)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<Serializable> theContent;
            theContent = (((this.content!= null)&&(!this.content.isEmpty()))?this.getContent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
        }
        {
            String theFontFamilyId;
            theFontFamilyId = this.getFontFamilyId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontFamilyId", theFontFamilyId), currentHashCode, theFontFamilyId);
        }
        {
            String theFontId;
            theFontId = this.getFontId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontId", theFontId), currentHashCode, theFontId);
        }
        {
            String thePrintColorId;
            thePrintColorId = this.getPrintColorId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printColorId", thePrintColorId), currentHashCode, thePrintColorId);
        }
        {
            String theX;
            theX = this.getX();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "x", theX), currentHashCode, theX);
        }
        {
            String theY;
            theY = this.getY();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "y", theY), currentHashCode, theY);
        }
        {
            String theTextAnchor;
            theTextAnchor = this.getTextAnchor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textAnchor", theTextAnchor), currentHashCode, theTextAnchor);
        }
        {
            String theLineWidth;
            theLineWidth = this.getLineWidth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lineWidth", theLineWidth), currentHashCode, theLineWidth);
        }
        {
            String theFill;
            theFill = this.getFill();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fill", theFill), currentHashCode, theFill);
        }
        {
            String theFontFamily;
            theFontFamily = this.getFontFamily();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontFamily", theFontFamily), currentHashCode, theFontFamily);
        }
        {
            String theFontWeight;
            theFontWeight = this.getFontWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontWeight", theFontWeight), currentHashCode, theFontWeight);
        }
        {
            String theFontSize;
            theFontSize = this.getFontSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontSize", theFontSize), currentHashCode, theFontSize);
        }
        {
            String theFontStyle;
            theFontStyle = this.getFontStyle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontStyle", theFontStyle), currentHashCode, theFontStyle);
        }
        {
            String theTransform;
            theTransform = this.getTransform();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transform", theTransform), currentHashCode, theTransform);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Tspan) {
            final Tspan copy = ((Tspan) draftCopy);
            if ((this.content!= null)&&(!this.content.isEmpty())) {
                List<Serializable> sourceContent;
                sourceContent = (((this.content!= null)&&(!this.content.isEmpty()))?this.getContent():null);
                @SuppressWarnings("unchecked")
                List<Serializable> copyContent = ((List<Serializable> ) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                copy.content = null;
                if (copyContent!= null) {
                    List<Serializable> uniqueContentl = copy.getContent();
                    uniqueContentl.addAll(copyContent);
                }
            } else {
                copy.content = null;
            }
            if (this.fontFamilyId!= null) {
                String sourceFontFamilyId;
                sourceFontFamilyId = this.getFontFamilyId();
                String copyFontFamilyId = ((String) strategy.copy(LocatorUtils.property(locator, "fontFamilyId", sourceFontFamilyId), sourceFontFamilyId));
                copy.setFontFamilyId(copyFontFamilyId);
            } else {
                copy.fontFamilyId = null;
            }
            if (this.fontId!= null) {
                String sourceFontId;
                sourceFontId = this.getFontId();
                String copyFontId = ((String) strategy.copy(LocatorUtils.property(locator, "fontId", sourceFontId), sourceFontId));
                copy.setFontId(copyFontId);
            } else {
                copy.fontId = null;
            }
            if (this.printColorId!= null) {
                String sourcePrintColorId;
                sourcePrintColorId = this.getPrintColorId();
                String copyPrintColorId = ((String) strategy.copy(LocatorUtils.property(locator, "printColorId", sourcePrintColorId), sourcePrintColorId));
                copy.setPrintColorId(copyPrintColorId);
            } else {
                copy.printColorId = null;
            }
            if (this.x!= null) {
                String sourceX;
                sourceX = this.getX();
                String copyX = ((String) strategy.copy(LocatorUtils.property(locator, "x", sourceX), sourceX));
                copy.setX(copyX);
            } else {
                copy.x = null;
            }
            if (this.y!= null) {
                String sourceY;
                sourceY = this.getY();
                String copyY = ((String) strategy.copy(LocatorUtils.property(locator, "y", sourceY), sourceY));
                copy.setY(copyY);
            } else {
                copy.y = null;
            }
            if (this.textAnchor!= null) {
                String sourceTextAnchor;
                sourceTextAnchor = this.getTextAnchor();
                String copyTextAnchor = ((String) strategy.copy(LocatorUtils.property(locator, "textAnchor", sourceTextAnchor), sourceTextAnchor));
                copy.setTextAnchor(copyTextAnchor);
            } else {
                copy.textAnchor = null;
            }
            if (this.lineWidth!= null) {
                String sourceLineWidth;
                sourceLineWidth = this.getLineWidth();
                String copyLineWidth = ((String) strategy.copy(LocatorUtils.property(locator, "lineWidth", sourceLineWidth), sourceLineWidth));
                copy.setLineWidth(copyLineWidth);
            } else {
                copy.lineWidth = null;
            }
            if (this.fill!= null) {
                String sourceFill;
                sourceFill = this.getFill();
                String copyFill = ((String) strategy.copy(LocatorUtils.property(locator, "fill", sourceFill), sourceFill));
                copy.setFill(copyFill);
            } else {
                copy.fill = null;
            }
            if (this.fontFamily!= null) {
                String sourceFontFamily;
                sourceFontFamily = this.getFontFamily();
                String copyFontFamily = ((String) strategy.copy(LocatorUtils.property(locator, "fontFamily", sourceFontFamily), sourceFontFamily));
                copy.setFontFamily(copyFontFamily);
            } else {
                copy.fontFamily = null;
            }
            if (this.fontWeight!= null) {
                String sourceFontWeight;
                sourceFontWeight = this.getFontWeight();
                String copyFontWeight = ((String) strategy.copy(LocatorUtils.property(locator, "fontWeight", sourceFontWeight), sourceFontWeight));
                copy.setFontWeight(copyFontWeight);
            } else {
                copy.fontWeight = null;
            }
            if (this.fontSize!= null) {
                String sourceFontSize;
                sourceFontSize = this.getFontSize();
                String copyFontSize = ((String) strategy.copy(LocatorUtils.property(locator, "fontSize", sourceFontSize), sourceFontSize));
                copy.setFontSize(copyFontSize);
            } else {
                copy.fontSize = null;
            }
            if (this.fontStyle!= null) {
                String sourceFontStyle;
                sourceFontStyle = this.getFontStyle();
                String copyFontStyle = ((String) strategy.copy(LocatorUtils.property(locator, "fontStyle", sourceFontStyle), sourceFontStyle));
                copy.setFontStyle(copyFontStyle);
            } else {
                copy.fontStyle = null;
            }
            if (this.transform!= null) {
                String sourceTransform;
                sourceTransform = this.getTransform();
                String copyTransform = ((String) strategy.copy(LocatorUtils.property(locator, "transform", sourceTransform), sourceTransform));
                copy.setTransform(copyTransform);
            } else {
                copy.transform = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Tspan();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof Tspan) {
            final Tspan target = this;
            final Tspan leftObject = ((Tspan) left);
            final Tspan rightObject = ((Tspan) right);
            {
                List<Serializable> lhsContent;
                lhsContent = (((leftObject.content!= null)&&(!leftObject.content.isEmpty()))?leftObject.getContent():null);
                List<Serializable> rhsContent;
                rhsContent = (((rightObject.content!= null)&&(!rightObject.content.isEmpty()))?rightObject.getContent():null);
                List<Serializable> mergedContent = ((List<Serializable> ) strategy.merge(LocatorUtils.property(leftLocator, "content", lhsContent), LocatorUtils.property(rightLocator, "content", rhsContent), lhsContent, rhsContent));
                target.content = null;
                if (mergedContent!= null) {
                    List<Serializable> uniqueContentl = target.getContent();
                    uniqueContentl.addAll(mergedContent);
                }
            }
            {
                String lhsFontFamilyId;
                lhsFontFamilyId = leftObject.getFontFamilyId();
                String rhsFontFamilyId;
                rhsFontFamilyId = rightObject.getFontFamilyId();
                String mergedFontFamilyId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fontFamilyId", lhsFontFamilyId), LocatorUtils.property(rightLocator, "fontFamilyId", rhsFontFamilyId), lhsFontFamilyId, rhsFontFamilyId));
                target.setFontFamilyId(mergedFontFamilyId);
            }
            {
                String lhsFontId;
                lhsFontId = leftObject.getFontId();
                String rhsFontId;
                rhsFontId = rightObject.getFontId();
                String mergedFontId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fontId", lhsFontId), LocatorUtils.property(rightLocator, "fontId", rhsFontId), lhsFontId, rhsFontId));
                target.setFontId(mergedFontId);
            }
            {
                String lhsPrintColorId;
                lhsPrintColorId = leftObject.getPrintColorId();
                String rhsPrintColorId;
                rhsPrintColorId = rightObject.getPrintColorId();
                String mergedPrintColorId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "printColorId", lhsPrintColorId), LocatorUtils.property(rightLocator, "printColorId", rhsPrintColorId), lhsPrintColorId, rhsPrintColorId));
                target.setPrintColorId(mergedPrintColorId);
            }
            {
                String lhsX;
                lhsX = leftObject.getX();
                String rhsX;
                rhsX = rightObject.getX();
                String mergedX = ((String) strategy.merge(LocatorUtils.property(leftLocator, "x", lhsX), LocatorUtils.property(rightLocator, "x", rhsX), lhsX, rhsX));
                target.setX(mergedX);
            }
            {
                String lhsY;
                lhsY = leftObject.getY();
                String rhsY;
                rhsY = rightObject.getY();
                String mergedY = ((String) strategy.merge(LocatorUtils.property(leftLocator, "y", lhsY), LocatorUtils.property(rightLocator, "y", rhsY), lhsY, rhsY));
                target.setY(mergedY);
            }
            {
                String lhsTextAnchor;
                lhsTextAnchor = leftObject.getTextAnchor();
                String rhsTextAnchor;
                rhsTextAnchor = rightObject.getTextAnchor();
                String mergedTextAnchor = ((String) strategy.merge(LocatorUtils.property(leftLocator, "textAnchor", lhsTextAnchor), LocatorUtils.property(rightLocator, "textAnchor", rhsTextAnchor), lhsTextAnchor, rhsTextAnchor));
                target.setTextAnchor(mergedTextAnchor);
            }
            {
                String lhsLineWidth;
                lhsLineWidth = leftObject.getLineWidth();
                String rhsLineWidth;
                rhsLineWidth = rightObject.getLineWidth();
                String mergedLineWidth = ((String) strategy.merge(LocatorUtils.property(leftLocator, "lineWidth", lhsLineWidth), LocatorUtils.property(rightLocator, "lineWidth", rhsLineWidth), lhsLineWidth, rhsLineWidth));
                target.setLineWidth(mergedLineWidth);
            }
            {
                String lhsFill;
                lhsFill = leftObject.getFill();
                String rhsFill;
                rhsFill = rightObject.getFill();
                String mergedFill = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fill", lhsFill), LocatorUtils.property(rightLocator, "fill", rhsFill), lhsFill, rhsFill));
                target.setFill(mergedFill);
            }
            {
                String lhsFontFamily;
                lhsFontFamily = leftObject.getFontFamily();
                String rhsFontFamily;
                rhsFontFamily = rightObject.getFontFamily();
                String mergedFontFamily = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fontFamily", lhsFontFamily), LocatorUtils.property(rightLocator, "fontFamily", rhsFontFamily), lhsFontFamily, rhsFontFamily));
                target.setFontFamily(mergedFontFamily);
            }
            {
                String lhsFontWeight;
                lhsFontWeight = leftObject.getFontWeight();
                String rhsFontWeight;
                rhsFontWeight = rightObject.getFontWeight();
                String mergedFontWeight = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fontWeight", lhsFontWeight), LocatorUtils.property(rightLocator, "fontWeight", rhsFontWeight), lhsFontWeight, rhsFontWeight));
                target.setFontWeight(mergedFontWeight);
            }
            {
                String lhsFontSize;
                lhsFontSize = leftObject.getFontSize();
                String rhsFontSize;
                rhsFontSize = rightObject.getFontSize();
                String mergedFontSize = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fontSize", lhsFontSize), LocatorUtils.property(rightLocator, "fontSize", rhsFontSize), lhsFontSize, rhsFontSize));
                target.setFontSize(mergedFontSize);
            }
            {
                String lhsFontStyle;
                lhsFontStyle = leftObject.getFontStyle();
                String rhsFontStyle;
                rhsFontStyle = rightObject.getFontStyle();
                String mergedFontStyle = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fontStyle", lhsFontStyle), LocatorUtils.property(rightLocator, "fontStyle", rhsFontStyle), lhsFontStyle, rhsFontStyle));
                target.setFontStyle(mergedFontStyle);
            }
            {
                String lhsTransform;
                lhsTransform = leftObject.getTransform();
                String rhsTransform;
                rhsTransform = rightObject.getTransform();
                String mergedTransform = ((String) strategy.merge(LocatorUtils.property(leftLocator, "transform", lhsTransform), LocatorUtils.property(rightLocator, "transform", rhsTransform), lhsTransform, rhsTransform));
                target.setTransform(mergedTransform);
            }
        }
    }

    public Tspan withContent(Serializable... values) {
        if (values!= null) {
            for (Serializable value: values) {
                getContent().add(value);
            }
        }
        return this;
    }

    public Tspan withContent(Collection<Serializable> values) {
        if (values!= null) {
            getContent().addAll(values);
        }
        return this;
    }

    public Tspan withFontFamilyId(String value) {
        setFontFamilyId(value);
        return this;
    }

    public Tspan withFontId(String value) {
        setFontId(value);
        return this;
    }

    public Tspan withPrintColorId(String value) {
        setPrintColorId(value);
        return this;
    }

    public Tspan withX(String value) {
        setX(value);
        return this;
    }

    public Tspan withY(String value) {
        setY(value);
        return this;
    }

    public Tspan withTextAnchor(String value) {
        setTextAnchor(value);
        return this;
    }

    public Tspan withLineWidth(String value) {
        setLineWidth(value);
        return this;
    }

    public Tspan withFill(String value) {
        setFill(value);
        return this;
    }

    public Tspan withFontFamily(String value) {
        setFontFamily(value);
        return this;
    }

    public Tspan withFontWeight(String value) {
        setFontWeight(value);
        return this;
    }

    public Tspan withFontSize(String value) {
        setFontSize(value);
        return this;
    }

    public Tspan withFontStyle(String value) {
        setFontStyle(value);
        return this;
    }

    public Tspan withTransform(String value) {
        setTransform(value);
        return this;
    }

}
