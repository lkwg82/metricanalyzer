//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for clientSettingsDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="clientSettingsDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="browserLocale" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="applicationLocale" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="platformLocale" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="language" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="country" type="{http://api.company.biz}reference" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "clientSettingsDTO", propOrder = {
    "browserLocale",
    "applicationLocale",
    "platformLocale",
    "language",
    "country"
})
public class ClientSettingsDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String browserLocale;
    protected String applicationLocale;
    protected String platformLocale;
    protected Reference language;
    protected Reference country;

    /**
     * Gets the value of the browserLocale property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBrowserLocale() {
        return browserLocale;
    }

    /**
     * Sets the value of the browserLocale property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBrowserLocale(String value) {
        this.browserLocale = value;
    }

    /**
     * Gets the value of the applicationLocale property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getApplicationLocale() {
        return applicationLocale;
    }

    /**
     * Sets the value of the applicationLocale property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setApplicationLocale(String value) {
        this.applicationLocale = value;
    }

    /**
     * Gets the value of the platformLocale property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPlatformLocale() {
        return platformLocale;
    }

    /**
     * Sets the value of the platformLocale property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPlatformLocale(String value) {
        this.platformLocale = value;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setLanguage(Reference value) {
        this.language = value;
    }

    /**
     * Gets the value of the country property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCountry() {
        return country;
    }

    /**
     * Sets the value of the country property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCountry(Reference value) {
        this.country = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theBrowserLocale;
            theBrowserLocale = this.getBrowserLocale();
            strategy.appendField(locator, this, "browserLocale", buffer, theBrowserLocale);
        }
        {
            String theApplicationLocale;
            theApplicationLocale = this.getApplicationLocale();
            strategy.appendField(locator, this, "applicationLocale", buffer, theApplicationLocale);
        }
        {
            String thePlatformLocale;
            thePlatformLocale = this.getPlatformLocale();
            strategy.appendField(locator, this, "platformLocale", buffer, thePlatformLocale);
        }
        {
            Reference theLanguage;
            theLanguage = this.getLanguage();
            strategy.appendField(locator, this, "language", buffer, theLanguage);
        }
        {
            Reference theCountry;
            theCountry = this.getCountry();
            strategy.appendField(locator, this, "country", buffer, theCountry);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ClientSettingsDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ClientSettingsDTO that = ((ClientSettingsDTO) object);
        {
            String lhsBrowserLocale;
            lhsBrowserLocale = this.getBrowserLocale();
            String rhsBrowserLocale;
            rhsBrowserLocale = that.getBrowserLocale();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "browserLocale", lhsBrowserLocale), LocatorUtils.property(thatLocator, "browserLocale", rhsBrowserLocale), lhsBrowserLocale, rhsBrowserLocale)) {
                return false;
            }
        }
        {
            String lhsApplicationLocale;
            lhsApplicationLocale = this.getApplicationLocale();
            String rhsApplicationLocale;
            rhsApplicationLocale = that.getApplicationLocale();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "applicationLocale", lhsApplicationLocale), LocatorUtils.property(thatLocator, "applicationLocale", rhsApplicationLocale), lhsApplicationLocale, rhsApplicationLocale)) {
                return false;
            }
        }
        {
            String lhsPlatformLocale;
            lhsPlatformLocale = this.getPlatformLocale();
            String rhsPlatformLocale;
            rhsPlatformLocale = that.getPlatformLocale();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "platformLocale", lhsPlatformLocale), LocatorUtils.property(thatLocator, "platformLocale", rhsPlatformLocale), lhsPlatformLocale, rhsPlatformLocale)) {
                return false;
            }
        }
        {
            Reference lhsLanguage;
            lhsLanguage = this.getLanguage();
            Reference rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            Reference lhsCountry;
            lhsCountry = this.getCountry();
            Reference rhsCountry;
            rhsCountry = that.getCountry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "country", lhsCountry), LocatorUtils.property(thatLocator, "country", rhsCountry), lhsCountry, rhsCountry)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theBrowserLocale;
            theBrowserLocale = this.getBrowserLocale();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "browserLocale", theBrowserLocale), currentHashCode, theBrowserLocale);
        }
        {
            String theApplicationLocale;
            theApplicationLocale = this.getApplicationLocale();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "applicationLocale", theApplicationLocale), currentHashCode, theApplicationLocale);
        }
        {
            String thePlatformLocale;
            thePlatformLocale = this.getPlatformLocale();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "platformLocale", thePlatformLocale), currentHashCode, thePlatformLocale);
        }
        {
            Reference theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            Reference theCountry;
            theCountry = this.getCountry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "country", theCountry), currentHashCode, theCountry);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ClientSettingsDTO) {
            final ClientSettingsDTO copy = ((ClientSettingsDTO) draftCopy);
            if (this.browserLocale!= null) {
                String sourceBrowserLocale;
                sourceBrowserLocale = this.getBrowserLocale();
                String copyBrowserLocale = ((String) strategy.copy(LocatorUtils.property(locator, "browserLocale", sourceBrowserLocale), sourceBrowserLocale));
                copy.setBrowserLocale(copyBrowserLocale);
            } else {
                copy.browserLocale = null;
            }
            if (this.applicationLocale!= null) {
                String sourceApplicationLocale;
                sourceApplicationLocale = this.getApplicationLocale();
                String copyApplicationLocale = ((String) strategy.copy(LocatorUtils.property(locator, "applicationLocale", sourceApplicationLocale), sourceApplicationLocale));
                copy.setApplicationLocale(copyApplicationLocale);
            } else {
                copy.applicationLocale = null;
            }
            if (this.platformLocale!= null) {
                String sourcePlatformLocale;
                sourcePlatformLocale = this.getPlatformLocale();
                String copyPlatformLocale = ((String) strategy.copy(LocatorUtils.property(locator, "platformLocale", sourcePlatformLocale), sourcePlatformLocale));
                copy.setPlatformLocale(copyPlatformLocale);
            } else {
                copy.platformLocale = null;
            }
            if (this.language!= null) {
                Reference sourceLanguage;
                sourceLanguage = this.getLanguage();
                Reference copyLanguage = ((Reference) strategy.copy(LocatorUtils.property(locator, "language", sourceLanguage), sourceLanguage));
                copy.setLanguage(copyLanguage);
            } else {
                copy.language = null;
            }
            if (this.country!= null) {
                Reference sourceCountry;
                sourceCountry = this.getCountry();
                Reference copyCountry = ((Reference) strategy.copy(LocatorUtils.property(locator, "country", sourceCountry), sourceCountry));
                copy.setCountry(copyCountry);
            } else {
                copy.country = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ClientSettingsDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof ClientSettingsDTO) {
            final ClientSettingsDTO target = this;
            final ClientSettingsDTO leftObject = ((ClientSettingsDTO) left);
            final ClientSettingsDTO rightObject = ((ClientSettingsDTO) right);
            {
                String lhsBrowserLocale;
                lhsBrowserLocale = leftObject.getBrowserLocale();
                String rhsBrowserLocale;
                rhsBrowserLocale = rightObject.getBrowserLocale();
                String mergedBrowserLocale = ((String) strategy.merge(LocatorUtils.property(leftLocator, "browserLocale", lhsBrowserLocale), LocatorUtils.property(rightLocator, "browserLocale", rhsBrowserLocale), lhsBrowserLocale, rhsBrowserLocale));
                target.setBrowserLocale(mergedBrowserLocale);
            }
            {
                String lhsApplicationLocale;
                lhsApplicationLocale = leftObject.getApplicationLocale();
                String rhsApplicationLocale;
                rhsApplicationLocale = rightObject.getApplicationLocale();
                String mergedApplicationLocale = ((String) strategy.merge(LocatorUtils.property(leftLocator, "applicationLocale", lhsApplicationLocale), LocatorUtils.property(rightLocator, "applicationLocale", rhsApplicationLocale), lhsApplicationLocale, rhsApplicationLocale));
                target.setApplicationLocale(mergedApplicationLocale);
            }
            {
                String lhsPlatformLocale;
                lhsPlatformLocale = leftObject.getPlatformLocale();
                String rhsPlatformLocale;
                rhsPlatformLocale = rightObject.getPlatformLocale();
                String mergedPlatformLocale = ((String) strategy.merge(LocatorUtils.property(leftLocator, "platformLocale", lhsPlatformLocale), LocatorUtils.property(rightLocator, "platformLocale", rhsPlatformLocale), lhsPlatformLocale, rhsPlatformLocale));
                target.setPlatformLocale(mergedPlatformLocale);
            }
            {
                Reference lhsLanguage;
                lhsLanguage = leftObject.getLanguage();
                Reference rhsLanguage;
                rhsLanguage = rightObject.getLanguage();
                Reference mergedLanguage = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "language", lhsLanguage), LocatorUtils.property(rightLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage));
                target.setLanguage(mergedLanguage);
            }
            {
                Reference lhsCountry;
                lhsCountry = leftObject.getCountry();
                Reference rhsCountry;
                rhsCountry = rightObject.getCountry();
                Reference mergedCountry = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "country", lhsCountry), LocatorUtils.property(rightLocator, "country", rhsCountry), lhsCountry, rhsCountry));
                target.setCountry(mergedCountry);
            }
        }
    }

    public ClientSettingsDTO withBrowserLocale(String value) {
        setBrowserLocale(value);
        return this;
    }

    public ClientSettingsDTO withApplicationLocale(String value) {
        setApplicationLocale(value);
        return this;
    }

    public ClientSettingsDTO withPlatformLocale(String value) {
        setPlatformLocale(value);
        return this;
    }

    public ClientSettingsDTO withLanguage(Reference value) {
        setLanguage(value);
        return this;
    }

    public ClientSettingsDTO withCountry(Reference value) {
        setCountry(value);
        return this;
    }

}
