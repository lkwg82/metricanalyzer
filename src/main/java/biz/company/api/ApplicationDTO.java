//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for applicationDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="applicationDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="properties" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="property" type="{http://api.company.biz}applicationPropertyDTO" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "applicationDTO", propOrder = {
    "name",
    "properties"
})
public class ApplicationDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    protected ApplicationDTO.Properties properties;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the properties property.
     * 
     * @return
     *     possible object is
     *     {@link ApplicationDTO.Properties }
     *     
     */
    public ApplicationDTO.Properties getProperties() {
        return properties;
    }

    /**
     * Sets the value of the properties property.
     * 
     * @param value
     *     allowed object is
     *     {@link ApplicationDTO.Properties }
     *     
     */
    public void setProperties(ApplicationDTO.Properties value) {
        this.properties = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            ApplicationDTO.Properties theProperties;
            theProperties = this.getProperties();
            strategy.appendField(locator, this, "properties", buffer, theProperties);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ApplicationDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ApplicationDTO that = ((ApplicationDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            ApplicationDTO.Properties lhsProperties;
            lhsProperties = this.getProperties();
            ApplicationDTO.Properties rhsProperties;
            rhsProperties = that.getProperties();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "properties", lhsProperties), LocatorUtils.property(thatLocator, "properties", rhsProperties), lhsProperties, rhsProperties)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            ApplicationDTO.Properties theProperties;
            theProperties = this.getProperties();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "properties", theProperties), currentHashCode, theProperties);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ApplicationDTO) {
            final ApplicationDTO copy = ((ApplicationDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.properties!= null) {
                ApplicationDTO.Properties sourceProperties;
                sourceProperties = this.getProperties();
                ApplicationDTO.Properties copyProperties = ((ApplicationDTO.Properties) strategy.copy(LocatorUtils.property(locator, "properties", sourceProperties), sourceProperties));
                copy.setProperties(copyProperties);
            } else {
                copy.properties = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ApplicationDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ApplicationDTO) {
            final ApplicationDTO target = this;
            final ApplicationDTO leftObject = ((ApplicationDTO) left);
            final ApplicationDTO rightObject = ((ApplicationDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                ApplicationDTO.Properties lhsProperties;
                lhsProperties = leftObject.getProperties();
                ApplicationDTO.Properties rhsProperties;
                rhsProperties = rightObject.getProperties();
                ApplicationDTO.Properties mergedProperties = ((ApplicationDTO.Properties) strategy.merge(LocatorUtils.property(leftLocator, "properties", lhsProperties), LocatorUtils.property(rightLocator, "properties", rhsProperties), lhsProperties, rhsProperties));
                target.setProperties(mergedProperties);
            }
        }
    }

    public ApplicationDTO withName(String value) {
        setName(value);
        return this;
    }

    public ApplicationDTO withProperties(ApplicationDTO.Properties value) {
        setProperties(value);
        return this;
    }

    @Override
    public ApplicationDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ApplicationDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ApplicationDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="property" type="{http://api.company.biz}applicationPropertyDTO" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "property"
    })
    public static class Properties
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ApplicationPropertyDTO> property;

        /**
         * Gets the value of the property property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the property property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getProperty().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ApplicationPropertyDTO }
         * 
         * 
         */
        public List<ApplicationPropertyDTO> getProperty() {
            if (property == null) {
                property = new ArrayList<ApplicationPropertyDTO>();
            }
            return this.property;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ApplicationPropertyDTO> theProperty;
                theProperty = (((this.property!= null)&&(!this.property.isEmpty()))?this.getProperty():null);
                strategy.appendField(locator, this, "property", buffer, theProperty);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ApplicationDTO.Properties)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ApplicationDTO.Properties that = ((ApplicationDTO.Properties) object);
            {
                List<ApplicationPropertyDTO> lhsProperty;
                lhsProperty = (((this.property!= null)&&(!this.property.isEmpty()))?this.getProperty():null);
                List<ApplicationPropertyDTO> rhsProperty;
                rhsProperty = (((that.property!= null)&&(!that.property.isEmpty()))?that.getProperty():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "property", lhsProperty), LocatorUtils.property(thatLocator, "property", rhsProperty), lhsProperty, rhsProperty)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ApplicationPropertyDTO> theProperty;
                theProperty = (((this.property!= null)&&(!this.property.isEmpty()))?this.getProperty():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "property", theProperty), currentHashCode, theProperty);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ApplicationDTO.Properties) {
                final ApplicationDTO.Properties copy = ((ApplicationDTO.Properties) draftCopy);
                if ((this.property!= null)&&(!this.property.isEmpty())) {
                    List<ApplicationPropertyDTO> sourceProperty;
                    sourceProperty = (((this.property!= null)&&(!this.property.isEmpty()))?this.getProperty():null);
                    @SuppressWarnings("unchecked")
                    List<ApplicationPropertyDTO> copyProperty = ((List<ApplicationPropertyDTO> ) strategy.copy(LocatorUtils.property(locator, "property", sourceProperty), sourceProperty));
                    copy.property = null;
                    if (copyProperty!= null) {
                        List<ApplicationPropertyDTO> uniquePropertyl = copy.getProperty();
                        uniquePropertyl.addAll(copyProperty);
                    }
                } else {
                    copy.property = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ApplicationDTO.Properties();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ApplicationDTO.Properties) {
                final ApplicationDTO.Properties target = this;
                final ApplicationDTO.Properties leftObject = ((ApplicationDTO.Properties) left);
                final ApplicationDTO.Properties rightObject = ((ApplicationDTO.Properties) right);
                {
                    List<ApplicationPropertyDTO> lhsProperty;
                    lhsProperty = (((leftObject.property!= null)&&(!leftObject.property.isEmpty()))?leftObject.getProperty():null);
                    List<ApplicationPropertyDTO> rhsProperty;
                    rhsProperty = (((rightObject.property!= null)&&(!rightObject.property.isEmpty()))?rightObject.getProperty():null);
                    List<ApplicationPropertyDTO> mergedProperty = ((List<ApplicationPropertyDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "property", lhsProperty), LocatorUtils.property(rightLocator, "property", rhsProperty), lhsProperty, rhsProperty));
                    target.property = null;
                    if (mergedProperty!= null) {
                        List<ApplicationPropertyDTO> uniquePropertyl = target.getProperty();
                        uniquePropertyl.addAll(mergedProperty);
                    }
                }
            }
        }

        public ApplicationDTO.Properties withProperty(ApplicationPropertyDTO... values) {
            if (values!= null) {
                for (ApplicationPropertyDTO value: values) {
                    getProperty().add(value);
                }
            }
            return this;
        }

        public ApplicationDTO.Properties withProperty(Collection<ApplicationPropertyDTO> values) {
            if (values!= null) {
                getProperty().addAll(values);
            }
            return this;
        }

    }

}
