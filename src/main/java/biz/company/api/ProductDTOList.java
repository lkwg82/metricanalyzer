//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productDTOList complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productDTOList">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}abstractList">
 *       &lt;sequence>
 *         &lt;element ref="{http://api.company.biz}product" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productDTOList", propOrder = {
    "product"
})
public class ProductDTOList
    extends AbstractList
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected List<ProductDTO> product;

    /**
     * Gets the value of the product property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the product property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProduct().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProductDTO }
     * 
     * 
     */
    public List<ProductDTO> getProduct() {
        if (product == null) {
            product = new ArrayList<ProductDTO>();
        }
        return this.product;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<ProductDTO> theProduct;
            theProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
            strategy.appendField(locator, this, "product", buffer, theProduct);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductDTOList)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductDTOList that = ((ProductDTOList) object);
        {
            List<ProductDTO> lhsProduct;
            lhsProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
            List<ProductDTO> rhsProduct;
            rhsProduct = (((that.product!= null)&&(!that.product.isEmpty()))?that.getProduct():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "product", lhsProduct), LocatorUtils.property(thatLocator, "product", rhsProduct), lhsProduct, rhsProduct)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<ProductDTO> theProduct;
            theProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "product", theProduct), currentHashCode, theProduct);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductDTOList) {
            final ProductDTOList copy = ((ProductDTOList) draftCopy);
            if ((this.product!= null)&&(!this.product.isEmpty())) {
                List<ProductDTO> sourceProduct;
                sourceProduct = (((this.product!= null)&&(!this.product.isEmpty()))?this.getProduct():null);
                @SuppressWarnings("unchecked")
                List<ProductDTO> copyProduct = ((List<ProductDTO> ) strategy.copy(LocatorUtils.property(locator, "product", sourceProduct), sourceProduct));
                copy.product = null;
                if (copyProduct!= null) {
                    List<ProductDTO> uniqueProductl = copy.getProduct();
                    uniqueProductl.addAll(copyProduct);
                }
            } else {
                copy.product = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductDTOList();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductDTOList) {
            final ProductDTOList target = this;
            final ProductDTOList leftObject = ((ProductDTOList) left);
            final ProductDTOList rightObject = ((ProductDTOList) right);
            {
                List<ProductDTO> lhsProduct;
                lhsProduct = (((leftObject.product!= null)&&(!leftObject.product.isEmpty()))?leftObject.getProduct():null);
                List<ProductDTO> rhsProduct;
                rhsProduct = (((rightObject.product!= null)&&(!rightObject.product.isEmpty()))?rightObject.getProduct():null);
                List<ProductDTO> mergedProduct = ((List<ProductDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "product", lhsProduct), LocatorUtils.property(rightLocator, "product", rhsProduct), lhsProduct, rhsProduct));
                target.product = null;
                if (mergedProduct!= null) {
                    List<ProductDTO> uniqueProductl = target.getProduct();
                    uniqueProductl.addAll(mergedProduct);
                }
            }
        }
    }

    public ProductDTOList withProduct(ProductDTO... values) {
        if (values!= null) {
            for (ProductDTO value: values) {
                getProduct().add(value);
            }
        }
        return this;
    }

    public ProductDTOList withProduct(Collection<ProductDTO> values) {
        if (values!= null) {
            getProduct().addAll(values);
        }
        return this;
    }

    @Override
    public ProductDTOList withFacets(AbstractList.Facets value) {
        setFacets(value);
        return this;
    }

    @Override
    public ProductDTOList withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductDTOList withOffset(long value) {
        setOffset(value);
        return this;
    }

    @Override
    public ProductDTOList withLimit(long value) {
        setLimit(value);
        return this;
    }

    @Override
    public ProductDTOList withCount(long value) {
        setCount(value);
        return this;
    }

    @Override
    public ProductDTOList withSortField(String value) {
        setSortField(value);
        return this;
    }

    @Override
    public ProductDTOList withSortOrder(String value) {
        setSortOrder(value);
        return this;
    }

    @Override
    public ProductDTOList withQuery(String value) {
        setQuery(value);
        return this;
    }

    @Override
    public ProductDTOList withSuggestedQuery(String value) {
        setSuggestedQuery(value);
        return this;
    }

    @Override
    public ProductDTOList withExecutedQuery(String value) {
        setExecutedQuery(value);
        return this;
    }

    @Override
    public ProductDTOList withUngroupedCount(Long value) {
        setUngroupedCount(value);
        return this;
    }

}
