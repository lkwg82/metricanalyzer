//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for price complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="price">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="vatExcluded" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/>
 *         &lt;element name="vatIncluded" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/>
 *         &lt;element name="vat" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/>
 *         &lt;element name="currency" type="{http://api.company.biz}reference" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "price", propOrder = {
    "vatExcluded",
    "vatIncluded",
    "vat",
    "currency"
})
@XmlSeeAlso({
    ElementPrice.class
})
public class Price
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected BigDecimal vatExcluded;
    protected BigDecimal vatIncluded;
    protected BigDecimal vat;
    protected Reference currency;

    /**
     * Gets the value of the vatExcluded property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getVatExcluded() {
        return vatExcluded;
    }

    /**
     * Sets the value of the vatExcluded property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setVatExcluded(BigDecimal value) {
        this.vatExcluded = value;
    }

    /**
     * Gets the value of the vatIncluded property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getVatIncluded() {
        return vatIncluded;
    }

    /**
     * Sets the value of the vatIncluded property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setVatIncluded(BigDecimal value) {
        this.vatIncluded = value;
    }

    /**
     * Gets the value of the vat property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getVat() {
        return vat;
    }

    /**
     * Sets the value of the vat property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setVat(BigDecimal value) {
        this.vat = value;
    }

    /**
     * Gets the value of the currency property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the currency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCurrency(Reference value) {
        this.currency = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            BigDecimal theVatExcluded;
            theVatExcluded = this.getVatExcluded();
            strategy.appendField(locator, this, "vatExcluded", buffer, theVatExcluded);
        }
        {
            BigDecimal theVatIncluded;
            theVatIncluded = this.getVatIncluded();
            strategy.appendField(locator, this, "vatIncluded", buffer, theVatIncluded);
        }
        {
            BigDecimal theVat;
            theVat = this.getVat();
            strategy.appendField(locator, this, "vat", buffer, theVat);
        }
        {
            Reference theCurrency;
            theCurrency = this.getCurrency();
            strategy.appendField(locator, this, "currency", buffer, theCurrency);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Price)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Price that = ((Price) object);
        {
            BigDecimal lhsVatExcluded;
            lhsVatExcluded = this.getVatExcluded();
            BigDecimal rhsVatExcluded;
            rhsVatExcluded = that.getVatExcluded();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vatExcluded", lhsVatExcluded), LocatorUtils.property(thatLocator, "vatExcluded", rhsVatExcluded), lhsVatExcluded, rhsVatExcluded)) {
                return false;
            }
        }
        {
            BigDecimal lhsVatIncluded;
            lhsVatIncluded = this.getVatIncluded();
            BigDecimal rhsVatIncluded;
            rhsVatIncluded = that.getVatIncluded();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vatIncluded", lhsVatIncluded), LocatorUtils.property(thatLocator, "vatIncluded", rhsVatIncluded), lhsVatIncluded, rhsVatIncluded)) {
                return false;
            }
        }
        {
            BigDecimal lhsVat;
            lhsVat = this.getVat();
            BigDecimal rhsVat;
            rhsVat = that.getVat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vat", lhsVat), LocatorUtils.property(thatLocator, "vat", rhsVat), lhsVat, rhsVat)) {
                return false;
            }
        }
        {
            Reference lhsCurrency;
            lhsCurrency = this.getCurrency();
            Reference rhsCurrency;
            rhsCurrency = that.getCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currency", lhsCurrency), LocatorUtils.property(thatLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            BigDecimal theVatExcluded;
            theVatExcluded = this.getVatExcluded();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vatExcluded", theVatExcluded), currentHashCode, theVatExcluded);
        }
        {
            BigDecimal theVatIncluded;
            theVatIncluded = this.getVatIncluded();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vatIncluded", theVatIncluded), currentHashCode, theVatIncluded);
        }
        {
            BigDecimal theVat;
            theVat = this.getVat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vat", theVat), currentHashCode, theVat);
        }
        {
            Reference theCurrency;
            theCurrency = this.getCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currency", theCurrency), currentHashCode, theCurrency);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Price) {
            final Price copy = ((Price) draftCopy);
            if (this.vatExcluded!= null) {
                BigDecimal sourceVatExcluded;
                sourceVatExcluded = this.getVatExcluded();
                BigDecimal copyVatExcluded = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "vatExcluded", sourceVatExcluded), sourceVatExcluded));
                copy.setVatExcluded(copyVatExcluded);
            } else {
                copy.vatExcluded = null;
            }
            if (this.vatIncluded!= null) {
                BigDecimal sourceVatIncluded;
                sourceVatIncluded = this.getVatIncluded();
                BigDecimal copyVatIncluded = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "vatIncluded", sourceVatIncluded), sourceVatIncluded));
                copy.setVatIncluded(copyVatIncluded);
            } else {
                copy.vatIncluded = null;
            }
            if (this.vat!= null) {
                BigDecimal sourceVat;
                sourceVat = this.getVat();
                BigDecimal copyVat = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "vat", sourceVat), sourceVat));
                copy.setVat(copyVat);
            } else {
                copy.vat = null;
            }
            if (this.currency!= null) {
                Reference sourceCurrency;
                sourceCurrency = this.getCurrency();
                Reference copyCurrency = ((Reference) strategy.copy(LocatorUtils.property(locator, "currency", sourceCurrency), sourceCurrency));
                copy.setCurrency(copyCurrency);
            } else {
                copy.currency = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Price();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof Price) {
            final Price target = this;
            final Price leftObject = ((Price) left);
            final Price rightObject = ((Price) right);
            {
                BigDecimal lhsVatExcluded;
                lhsVatExcluded = leftObject.getVatExcluded();
                BigDecimal rhsVatExcluded;
                rhsVatExcluded = rightObject.getVatExcluded();
                BigDecimal mergedVatExcluded = ((BigDecimal) strategy.merge(LocatorUtils.property(leftLocator, "vatExcluded", lhsVatExcluded), LocatorUtils.property(rightLocator, "vatExcluded", rhsVatExcluded), lhsVatExcluded, rhsVatExcluded));
                target.setVatExcluded(mergedVatExcluded);
            }
            {
                BigDecimal lhsVatIncluded;
                lhsVatIncluded = leftObject.getVatIncluded();
                BigDecimal rhsVatIncluded;
                rhsVatIncluded = rightObject.getVatIncluded();
                BigDecimal mergedVatIncluded = ((BigDecimal) strategy.merge(LocatorUtils.property(leftLocator, "vatIncluded", lhsVatIncluded), LocatorUtils.property(rightLocator, "vatIncluded", rhsVatIncluded), lhsVatIncluded, rhsVatIncluded));
                target.setVatIncluded(mergedVatIncluded);
            }
            {
                BigDecimal lhsVat;
                lhsVat = leftObject.getVat();
                BigDecimal rhsVat;
                rhsVat = rightObject.getVat();
                BigDecimal mergedVat = ((BigDecimal) strategy.merge(LocatorUtils.property(leftLocator, "vat", lhsVat), LocatorUtils.property(rightLocator, "vat", rhsVat), lhsVat, rhsVat));
                target.setVat(mergedVat);
            }
            {
                Reference lhsCurrency;
                lhsCurrency = leftObject.getCurrency();
                Reference rhsCurrency;
                rhsCurrency = rightObject.getCurrency();
                Reference mergedCurrency = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "currency", lhsCurrency), LocatorUtils.property(rightLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency));
                target.setCurrency(mergedCurrency);
            }
        }
    }

    public Price withVatExcluded(BigDecimal value) {
        setVatExcluded(value);
        return this;
    }

    public Price withVatIncluded(BigDecimal value) {
        setVatIncluded(value);
        return this;
    }

    public Price withVat(BigDecimal value) {
        setVat(value);
        return this;
    }

    public Price withCurrency(Reference value) {
        setCurrency(value);
        return this;
    }

}
