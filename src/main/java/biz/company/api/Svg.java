//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for svg complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="svg">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://api.company.biz}path" minOccurs="0"/>
 *         &lt;element ref="{http://api.company.biz}rect" minOccurs="0"/>
 *         &lt;element ref="{http://api.company.biz}image" minOccurs="0"/>
 *         &lt;element ref="{http://api.company.biz}text" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="version" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="viewBox" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "svg", propOrder = {
    "path",
    "rect",
    "image",
    "text"
})
public class Svg
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected Path path;
    protected Rect rect;
    protected Image image;
    protected Text text;
    @XmlAttribute(name = "version")
    protected String version;
    @XmlAttribute(name = "viewBox")
    protected String viewBox;

    /**
     * Gets the value of the path property.
     * 
     * @return
     *     possible object is
     *     {@link Path }
     *     
     */
    public Path getPath() {
        return path;
    }

    /**
     * Sets the value of the path property.
     * 
     * @param value
     *     allowed object is
     *     {@link Path }
     *     
     */
    public void setPath(Path value) {
        this.path = value;
    }

    /**
     * Gets the value of the rect property.
     * 
     * @return
     *     possible object is
     *     {@link Rect }
     *     
     */
    public Rect getRect() {
        return rect;
    }

    /**
     * Sets the value of the rect property.
     * 
     * @param value
     *     allowed object is
     *     {@link Rect }
     *     
     */
    public void setRect(Rect value) {
        this.rect = value;
    }

    /**
     * Gets the value of the image property.
     * 
     * @return
     *     possible object is
     *     {@link Image }
     *     
     */
    public Image getImage() {
        return image;
    }

    /**
     * Sets the value of the image property.
     * 
     * @param value
     *     allowed object is
     *     {@link Image }
     *     
     */
    public void setImage(Image value) {
        this.image = value;
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link Text }
     *     
     */
    public Text getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link Text }
     *     
     */
    public void setText(Text value) {
        this.text = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVersion(String value) {
        this.version = value;
    }

    /**
     * Gets the value of the viewBox property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getViewBox() {
        return viewBox;
    }

    /**
     * Sets the value of the viewBox property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setViewBox(String value) {
        this.viewBox = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Path thePath;
            thePath = this.getPath();
            strategy.appendField(locator, this, "path", buffer, thePath);
        }
        {
            Rect theRect;
            theRect = this.getRect();
            strategy.appendField(locator, this, "rect", buffer, theRect);
        }
        {
            Image theImage;
            theImage = this.getImage();
            strategy.appendField(locator, this, "image", buffer, theImage);
        }
        {
            Text theText;
            theText = this.getText();
            strategy.appendField(locator, this, "text", buffer, theText);
        }
        {
            String theVersion;
            theVersion = this.getVersion();
            strategy.appendField(locator, this, "version", buffer, theVersion);
        }
        {
            String theViewBox;
            theViewBox = this.getViewBox();
            strategy.appendField(locator, this, "viewBox", buffer, theViewBox);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Svg)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Svg that = ((Svg) object);
        {
            Path lhsPath;
            lhsPath = this.getPath();
            Path rhsPath;
            rhsPath = that.getPath();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "path", lhsPath), LocatorUtils.property(thatLocator, "path", rhsPath), lhsPath, rhsPath)) {
                return false;
            }
        }
        {
            Rect lhsRect;
            lhsRect = this.getRect();
            Rect rhsRect;
            rhsRect = that.getRect();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rect", lhsRect), LocatorUtils.property(thatLocator, "rect", rhsRect), lhsRect, rhsRect)) {
                return false;
            }
        }
        {
            Image lhsImage;
            lhsImage = this.getImage();
            Image rhsImage;
            rhsImage = that.getImage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "image", lhsImage), LocatorUtils.property(thatLocator, "image", rhsImage), lhsImage, rhsImage)) {
                return false;
            }
        }
        {
            Text lhsText;
            lhsText = this.getText();
            Text rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            String lhsVersion;
            lhsVersion = this.getVersion();
            String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            String lhsViewBox;
            lhsViewBox = this.getViewBox();
            String rhsViewBox;
            rhsViewBox = that.getViewBox();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "viewBox", lhsViewBox), LocatorUtils.property(thatLocator, "viewBox", rhsViewBox), lhsViewBox, rhsViewBox)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Path thePath;
            thePath = this.getPath();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "path", thePath), currentHashCode, thePath);
        }
        {
            Rect theRect;
            theRect = this.getRect();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rect", theRect), currentHashCode, theRect);
        }
        {
            Image theImage;
            theImage = this.getImage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "image", theImage), currentHashCode, theImage);
        }
        {
            Text theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            String theViewBox;
            theViewBox = this.getViewBox();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "viewBox", theViewBox), currentHashCode, theViewBox);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Svg) {
            final Svg copy = ((Svg) draftCopy);
            if (this.path!= null) {
                Path sourcePath;
                sourcePath = this.getPath();
                Path copyPath = ((Path) strategy.copy(LocatorUtils.property(locator, "path", sourcePath), sourcePath));
                copy.setPath(copyPath);
            } else {
                copy.path = null;
            }
            if (this.rect!= null) {
                Rect sourceRect;
                sourceRect = this.getRect();
                Rect copyRect = ((Rect) strategy.copy(LocatorUtils.property(locator, "rect", sourceRect), sourceRect));
                copy.setRect(copyRect);
            } else {
                copy.rect = null;
            }
            if (this.image!= null) {
                Image sourceImage;
                sourceImage = this.getImage();
                Image copyImage = ((Image) strategy.copy(LocatorUtils.property(locator, "image", sourceImage), sourceImage));
                copy.setImage(copyImage);
            } else {
                copy.image = null;
            }
            if (this.text!= null) {
                Text sourceText;
                sourceText = this.getText();
                Text copyText = ((Text) strategy.copy(LocatorUtils.property(locator, "text", sourceText), sourceText));
                copy.setText(copyText);
            } else {
                copy.text = null;
            }
            if (this.version!= null) {
                String sourceVersion;
                sourceVersion = this.getVersion();
                String copyVersion = ((String) strategy.copy(LocatorUtils.property(locator, "version", sourceVersion), sourceVersion));
                copy.setVersion(copyVersion);
            } else {
                copy.version = null;
            }
            if (this.viewBox!= null) {
                String sourceViewBox;
                sourceViewBox = this.getViewBox();
                String copyViewBox = ((String) strategy.copy(LocatorUtils.property(locator, "viewBox", sourceViewBox), sourceViewBox));
                copy.setViewBox(copyViewBox);
            } else {
                copy.viewBox = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Svg();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof Svg) {
            final Svg target = this;
            final Svg leftObject = ((Svg) left);
            final Svg rightObject = ((Svg) right);
            {
                Path lhsPath;
                lhsPath = leftObject.getPath();
                Path rhsPath;
                rhsPath = rightObject.getPath();
                Path mergedPath = ((Path) strategy.merge(LocatorUtils.property(leftLocator, "path", lhsPath), LocatorUtils.property(rightLocator, "path", rhsPath), lhsPath, rhsPath));
                target.setPath(mergedPath);
            }
            {
                Rect lhsRect;
                lhsRect = leftObject.getRect();
                Rect rhsRect;
                rhsRect = rightObject.getRect();
                Rect mergedRect = ((Rect) strategy.merge(LocatorUtils.property(leftLocator, "rect", lhsRect), LocatorUtils.property(rightLocator, "rect", rhsRect), lhsRect, rhsRect));
                target.setRect(mergedRect);
            }
            {
                Image lhsImage;
                lhsImage = leftObject.getImage();
                Image rhsImage;
                rhsImage = rightObject.getImage();
                Image mergedImage = ((Image) strategy.merge(LocatorUtils.property(leftLocator, "image", lhsImage), LocatorUtils.property(rightLocator, "image", rhsImage), lhsImage, rhsImage));
                target.setImage(mergedImage);
            }
            {
                Text lhsText;
                lhsText = leftObject.getText();
                Text rhsText;
                rhsText = rightObject.getText();
                Text mergedText = ((Text) strategy.merge(LocatorUtils.property(leftLocator, "text", lhsText), LocatorUtils.property(rightLocator, "text", rhsText), lhsText, rhsText));
                target.setText(mergedText);
            }
            {
                String lhsVersion;
                lhsVersion = leftObject.getVersion();
                String rhsVersion;
                rhsVersion = rightObject.getVersion();
                String mergedVersion = ((String) strategy.merge(LocatorUtils.property(leftLocator, "version", lhsVersion), LocatorUtils.property(rightLocator, "version", rhsVersion), lhsVersion, rhsVersion));
                target.setVersion(mergedVersion);
            }
            {
                String lhsViewBox;
                lhsViewBox = leftObject.getViewBox();
                String rhsViewBox;
                rhsViewBox = rightObject.getViewBox();
                String mergedViewBox = ((String) strategy.merge(LocatorUtils.property(leftLocator, "viewBox", lhsViewBox), LocatorUtils.property(rightLocator, "viewBox", rhsViewBox), lhsViewBox, rhsViewBox));
                target.setViewBox(mergedViewBox);
            }
        }
    }

    public Svg withPath(Path value) {
        setPath(value);
        return this;
    }

    public Svg withRect(Rect value) {
        setRect(value);
        return this;
    }

    public Svg withImage(Image value) {
        setImage(value);
        return this;
    }

    public Svg withText(Text value) {
        setText(value);
        return this;
    }

    public Svg withVersion(String value) {
        setVersion(value);
        return this;
    }

    public Svg withViewBox(String value) {
        setViewBox(value);
        return this;
    }

}
