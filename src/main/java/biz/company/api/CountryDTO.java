//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for countryDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="countryDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="isoCode" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="thousandsSeparator" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="decimalPoint" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element ref="{http://api.company.biz}length"/>
 *         &lt;element name="currency" type="{http://api.company.biz}reference"/>
 *         &lt;element name="currencyPattern" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "countryDTO", propOrder = {
    "isoCode",
    "thousandsSeparator",
    "decimalPoint",
    "length",
    "currency",
    "currencyPattern"
})
public class CountryDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String isoCode;
    @XmlElement(required = true)
    protected String thousandsSeparator;
    @XmlElement(required = true)
    protected String decimalPoint;
    @XmlElement(required = true)
    protected Length length;
    @XmlElement(required = true)
    protected Reference currency;
    @XmlElement(required = true)
    protected String currencyPattern;

    /**
     * Gets the value of the isoCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIsoCode() {
        return isoCode;
    }

    /**
     * Sets the value of the isoCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIsoCode(String value) {
        this.isoCode = value;
    }

    /**
     * Gets the value of the thousandsSeparator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getThousandsSeparator() {
        return thousandsSeparator;
    }

    /**
     * Sets the value of the thousandsSeparator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setThousandsSeparator(String value) {
        this.thousandsSeparator = value;
    }

    /**
     * Gets the value of the decimalPoint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDecimalPoint() {
        return decimalPoint;
    }

    /**
     * Sets the value of the decimalPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDecimalPoint(String value) {
        this.decimalPoint = value;
    }

    /**
     * Gets the value of the length property.
     * 
     * @return
     *     possible object is
     *     {@link Length }
     *     
     */
    public Length getLength() {
        return length;
    }

    /**
     * Sets the value of the length property.
     * 
     * @param value
     *     allowed object is
     *     {@link Length }
     *     
     */
    public void setLength(Length value) {
        this.length = value;
    }

    /**
     * Gets the value of the currency property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the currency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setCurrency(Reference value) {
        this.currency = value;
    }

    /**
     * Gets the value of the currencyPattern property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrencyPattern() {
        return currencyPattern;
    }

    /**
     * Sets the value of the currencyPattern property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrencyPattern(String value) {
        this.currencyPattern = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theIsoCode;
            theIsoCode = this.getIsoCode();
            strategy.appendField(locator, this, "isoCode", buffer, theIsoCode);
        }
        {
            String theThousandsSeparator;
            theThousandsSeparator = this.getThousandsSeparator();
            strategy.appendField(locator, this, "thousandsSeparator", buffer, theThousandsSeparator);
        }
        {
            String theDecimalPoint;
            theDecimalPoint = this.getDecimalPoint();
            strategy.appendField(locator, this, "decimalPoint", buffer, theDecimalPoint);
        }
        {
            Length theLength;
            theLength = this.getLength();
            strategy.appendField(locator, this, "length", buffer, theLength);
        }
        {
            Reference theCurrency;
            theCurrency = this.getCurrency();
            strategy.appendField(locator, this, "currency", buffer, theCurrency);
        }
        {
            String theCurrencyPattern;
            theCurrencyPattern = this.getCurrencyPattern();
            strategy.appendField(locator, this, "currencyPattern", buffer, theCurrencyPattern);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CountryDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CountryDTO that = ((CountryDTO) object);
        {
            String lhsIsoCode;
            lhsIsoCode = this.getIsoCode();
            String rhsIsoCode;
            rhsIsoCode = that.getIsoCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isoCode", lhsIsoCode), LocatorUtils.property(thatLocator, "isoCode", rhsIsoCode), lhsIsoCode, rhsIsoCode)) {
                return false;
            }
        }
        {
            String lhsThousandsSeparator;
            lhsThousandsSeparator = this.getThousandsSeparator();
            String rhsThousandsSeparator;
            rhsThousandsSeparator = that.getThousandsSeparator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thousandsSeparator", lhsThousandsSeparator), LocatorUtils.property(thatLocator, "thousandsSeparator", rhsThousandsSeparator), lhsThousandsSeparator, rhsThousandsSeparator)) {
                return false;
            }
        }
        {
            String lhsDecimalPoint;
            lhsDecimalPoint = this.getDecimalPoint();
            String rhsDecimalPoint;
            rhsDecimalPoint = that.getDecimalPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPoint", lhsDecimalPoint), LocatorUtils.property(thatLocator, "decimalPoint", rhsDecimalPoint), lhsDecimalPoint, rhsDecimalPoint)) {
                return false;
            }
        }
        {
            Length lhsLength;
            lhsLength = this.getLength();
            Length rhsLength;
            rhsLength = that.getLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "length", lhsLength), LocatorUtils.property(thatLocator, "length", rhsLength), lhsLength, rhsLength)) {
                return false;
            }
        }
        {
            Reference lhsCurrency;
            lhsCurrency = this.getCurrency();
            Reference rhsCurrency;
            rhsCurrency = that.getCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currency", lhsCurrency), LocatorUtils.property(thatLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency)) {
                return false;
            }
        }
        {
            String lhsCurrencyPattern;
            lhsCurrencyPattern = this.getCurrencyPattern();
            String rhsCurrencyPattern;
            rhsCurrencyPattern = that.getCurrencyPattern();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyPattern", lhsCurrencyPattern), LocatorUtils.property(thatLocator, "currencyPattern", rhsCurrencyPattern), lhsCurrencyPattern, rhsCurrencyPattern)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theIsoCode;
            theIsoCode = this.getIsoCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isoCode", theIsoCode), currentHashCode, theIsoCode);
        }
        {
            String theThousandsSeparator;
            theThousandsSeparator = this.getThousandsSeparator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thousandsSeparator", theThousandsSeparator), currentHashCode, theThousandsSeparator);
        }
        {
            String theDecimalPoint;
            theDecimalPoint = this.getDecimalPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPoint", theDecimalPoint), currentHashCode, theDecimalPoint);
        }
        {
            Length theLength;
            theLength = this.getLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "length", theLength), currentHashCode, theLength);
        }
        {
            Reference theCurrency;
            theCurrency = this.getCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currency", theCurrency), currentHashCode, theCurrency);
        }
        {
            String theCurrencyPattern;
            theCurrencyPattern = this.getCurrencyPattern();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyPattern", theCurrencyPattern), currentHashCode, theCurrencyPattern);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CountryDTO) {
            final CountryDTO copy = ((CountryDTO) draftCopy);
            if (this.isoCode!= null) {
                String sourceIsoCode;
                sourceIsoCode = this.getIsoCode();
                String copyIsoCode = ((String) strategy.copy(LocatorUtils.property(locator, "isoCode", sourceIsoCode), sourceIsoCode));
                copy.setIsoCode(copyIsoCode);
            } else {
                copy.isoCode = null;
            }
            if (this.thousandsSeparator!= null) {
                String sourceThousandsSeparator;
                sourceThousandsSeparator = this.getThousandsSeparator();
                String copyThousandsSeparator = ((String) strategy.copy(LocatorUtils.property(locator, "thousandsSeparator", sourceThousandsSeparator), sourceThousandsSeparator));
                copy.setThousandsSeparator(copyThousandsSeparator);
            } else {
                copy.thousandsSeparator = null;
            }
            if (this.decimalPoint!= null) {
                String sourceDecimalPoint;
                sourceDecimalPoint = this.getDecimalPoint();
                String copyDecimalPoint = ((String) strategy.copy(LocatorUtils.property(locator, "decimalPoint", sourceDecimalPoint), sourceDecimalPoint));
                copy.setDecimalPoint(copyDecimalPoint);
            } else {
                copy.decimalPoint = null;
            }
            if (this.length!= null) {
                Length sourceLength;
                sourceLength = this.getLength();
                Length copyLength = ((Length) strategy.copy(LocatorUtils.property(locator, "length", sourceLength), sourceLength));
                copy.setLength(copyLength);
            } else {
                copy.length = null;
            }
            if (this.currency!= null) {
                Reference sourceCurrency;
                sourceCurrency = this.getCurrency();
                Reference copyCurrency = ((Reference) strategy.copy(LocatorUtils.property(locator, "currency", sourceCurrency), sourceCurrency));
                copy.setCurrency(copyCurrency);
            } else {
                copy.currency = null;
            }
            if (this.currencyPattern!= null) {
                String sourceCurrencyPattern;
                sourceCurrencyPattern = this.getCurrencyPattern();
                String copyCurrencyPattern = ((String) strategy.copy(LocatorUtils.property(locator, "currencyPattern", sourceCurrencyPattern), sourceCurrencyPattern));
                copy.setCurrencyPattern(copyCurrencyPattern);
            } else {
                copy.currencyPattern = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CountryDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof CountryDTO) {
            final CountryDTO target = this;
            final CountryDTO leftObject = ((CountryDTO) left);
            final CountryDTO rightObject = ((CountryDTO) right);
            {
                String lhsIsoCode;
                lhsIsoCode = leftObject.getIsoCode();
                String rhsIsoCode;
                rhsIsoCode = rightObject.getIsoCode();
                String mergedIsoCode = ((String) strategy.merge(LocatorUtils.property(leftLocator, "isoCode", lhsIsoCode), LocatorUtils.property(rightLocator, "isoCode", rhsIsoCode), lhsIsoCode, rhsIsoCode));
                target.setIsoCode(mergedIsoCode);
            }
            {
                String lhsThousandsSeparator;
                lhsThousandsSeparator = leftObject.getThousandsSeparator();
                String rhsThousandsSeparator;
                rhsThousandsSeparator = rightObject.getThousandsSeparator();
                String mergedThousandsSeparator = ((String) strategy.merge(LocatorUtils.property(leftLocator, "thousandsSeparator", lhsThousandsSeparator), LocatorUtils.property(rightLocator, "thousandsSeparator", rhsThousandsSeparator), lhsThousandsSeparator, rhsThousandsSeparator));
                target.setThousandsSeparator(mergedThousandsSeparator);
            }
            {
                String lhsDecimalPoint;
                lhsDecimalPoint = leftObject.getDecimalPoint();
                String rhsDecimalPoint;
                rhsDecimalPoint = rightObject.getDecimalPoint();
                String mergedDecimalPoint = ((String) strategy.merge(LocatorUtils.property(leftLocator, "decimalPoint", lhsDecimalPoint), LocatorUtils.property(rightLocator, "decimalPoint", rhsDecimalPoint), lhsDecimalPoint, rhsDecimalPoint));
                target.setDecimalPoint(mergedDecimalPoint);
            }
            {
                Length lhsLength;
                lhsLength = leftObject.getLength();
                Length rhsLength;
                rhsLength = rightObject.getLength();
                Length mergedLength = ((Length) strategy.merge(LocatorUtils.property(leftLocator, "length", lhsLength), LocatorUtils.property(rightLocator, "length", rhsLength), lhsLength, rhsLength));
                target.setLength(mergedLength);
            }
            {
                Reference lhsCurrency;
                lhsCurrency = leftObject.getCurrency();
                Reference rhsCurrency;
                rhsCurrency = rightObject.getCurrency();
                Reference mergedCurrency = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "currency", lhsCurrency), LocatorUtils.property(rightLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency));
                target.setCurrency(mergedCurrency);
            }
            {
                String lhsCurrencyPattern;
                lhsCurrencyPattern = leftObject.getCurrencyPattern();
                String rhsCurrencyPattern;
                rhsCurrencyPattern = rightObject.getCurrencyPattern();
                String mergedCurrencyPattern = ((String) strategy.merge(LocatorUtils.property(leftLocator, "currencyPattern", lhsCurrencyPattern), LocatorUtils.property(rightLocator, "currencyPattern", rhsCurrencyPattern), lhsCurrencyPattern, rhsCurrencyPattern));
                target.setCurrencyPattern(mergedCurrencyPattern);
            }
        }
    }

    public CountryDTO withIsoCode(String value) {
        setIsoCode(value);
        return this;
    }

    public CountryDTO withThousandsSeparator(String value) {
        setThousandsSeparator(value);
        return this;
    }

    public CountryDTO withDecimalPoint(String value) {
        setDecimalPoint(value);
        return this;
    }

    public CountryDTO withLength(Length value) {
        setLength(value);
        return this;
    }

    public CountryDTO withCurrency(Reference value) {
        setCurrency(value);
        return this;
    }

    public CountryDTO withCurrencyPattern(String value) {
        setCurrencyPattern(value);
        return this;
    }

    @Override
    public CountryDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public CountryDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public CountryDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }

}
