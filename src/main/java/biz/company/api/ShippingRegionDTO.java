//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for shippingRegionDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="shippingRegionDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="shippingCosts" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}shippingCost" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "shippingRegionDTO", propOrder = {
    "shippingCosts"
})
public class ShippingRegionDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected ShippingRegionDTO.ShippingCosts shippingCosts;

    /**
     * Gets the value of the shippingCosts property.
     * 
     * @return
     *     possible object is
     *     {@link ShippingRegionDTO.ShippingCosts }
     *     
     */
    public ShippingRegionDTO.ShippingCosts getShippingCosts() {
        return shippingCosts;
    }

    /**
     * Sets the value of the shippingCosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShippingRegionDTO.ShippingCosts }
     *     
     */
    public void setShippingCosts(ShippingRegionDTO.ShippingCosts value) {
        this.shippingCosts = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            ShippingRegionDTO.ShippingCosts theShippingCosts;
            theShippingCosts = this.getShippingCosts();
            strategy.appendField(locator, this, "shippingCosts", buffer, theShippingCosts);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ShippingRegionDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ShippingRegionDTO that = ((ShippingRegionDTO) object);
        {
            ShippingRegionDTO.ShippingCosts lhsShippingCosts;
            lhsShippingCosts = this.getShippingCosts();
            ShippingRegionDTO.ShippingCosts rhsShippingCosts;
            rhsShippingCosts = that.getShippingCosts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingCosts", lhsShippingCosts), LocatorUtils.property(thatLocator, "shippingCosts", rhsShippingCosts), lhsShippingCosts, rhsShippingCosts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ShippingRegionDTO.ShippingCosts theShippingCosts;
            theShippingCosts = this.getShippingCosts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingCosts", theShippingCosts), currentHashCode, theShippingCosts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ShippingRegionDTO) {
            final ShippingRegionDTO copy = ((ShippingRegionDTO) draftCopy);
            if (this.shippingCosts!= null) {
                ShippingRegionDTO.ShippingCosts sourceShippingCosts;
                sourceShippingCosts = this.getShippingCosts();
                ShippingRegionDTO.ShippingCosts copyShippingCosts = ((ShippingRegionDTO.ShippingCosts) strategy.copy(LocatorUtils.property(locator, "shippingCosts", sourceShippingCosts), sourceShippingCosts));
                copy.setShippingCosts(copyShippingCosts);
            } else {
                copy.shippingCosts = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ShippingRegionDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ShippingRegionDTO) {
            final ShippingRegionDTO target = this;
            final ShippingRegionDTO leftObject = ((ShippingRegionDTO) left);
            final ShippingRegionDTO rightObject = ((ShippingRegionDTO) right);
            {
                ShippingRegionDTO.ShippingCosts lhsShippingCosts;
                lhsShippingCosts = leftObject.getShippingCosts();
                ShippingRegionDTO.ShippingCosts rhsShippingCosts;
                rhsShippingCosts = rightObject.getShippingCosts();
                ShippingRegionDTO.ShippingCosts mergedShippingCosts = ((ShippingRegionDTO.ShippingCosts) strategy.merge(LocatorUtils.property(leftLocator, "shippingCosts", lhsShippingCosts), LocatorUtils.property(rightLocator, "shippingCosts", rhsShippingCosts), lhsShippingCosts, rhsShippingCosts));
                target.setShippingCosts(mergedShippingCosts);
            }
        }
    }

    public ShippingRegionDTO withShippingCosts(ShippingRegionDTO.ShippingCosts value) {
        setShippingCosts(value);
        return this;
    }

    @Override
    public ShippingRegionDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ShippingRegionDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ShippingRegionDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}shippingCost" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "shippingCost"
    })
    public static class ShippingCosts
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        @XmlElement(required = true)
        protected List<ShippingCostDTO> shippingCost;

        /**
         * Gets the value of the shippingCost property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the shippingCost property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getShippingCost().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ShippingCostDTO }
         * 
         * 
         */
        public List<ShippingCostDTO> getShippingCost() {
            if (shippingCost == null) {
                shippingCost = new ArrayList<ShippingCostDTO>();
            }
            return this.shippingCost;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ShippingCostDTO> theShippingCost;
                theShippingCost = (((this.shippingCost!= null)&&(!this.shippingCost.isEmpty()))?this.getShippingCost():null);
                strategy.appendField(locator, this, "shippingCost", buffer, theShippingCost);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ShippingRegionDTO.ShippingCosts)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ShippingRegionDTO.ShippingCosts that = ((ShippingRegionDTO.ShippingCosts) object);
            {
                List<ShippingCostDTO> lhsShippingCost;
                lhsShippingCost = (((this.shippingCost!= null)&&(!this.shippingCost.isEmpty()))?this.getShippingCost():null);
                List<ShippingCostDTO> rhsShippingCost;
                rhsShippingCost = (((that.shippingCost!= null)&&(!that.shippingCost.isEmpty()))?that.getShippingCost():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingCost", lhsShippingCost), LocatorUtils.property(thatLocator, "shippingCost", rhsShippingCost), lhsShippingCost, rhsShippingCost)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ShippingCostDTO> theShippingCost;
                theShippingCost = (((this.shippingCost!= null)&&(!this.shippingCost.isEmpty()))?this.getShippingCost():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingCost", theShippingCost), currentHashCode, theShippingCost);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ShippingRegionDTO.ShippingCosts) {
                final ShippingRegionDTO.ShippingCosts copy = ((ShippingRegionDTO.ShippingCosts) draftCopy);
                if ((this.shippingCost!= null)&&(!this.shippingCost.isEmpty())) {
                    List<ShippingCostDTO> sourceShippingCost;
                    sourceShippingCost = (((this.shippingCost!= null)&&(!this.shippingCost.isEmpty()))?this.getShippingCost():null);
                    @SuppressWarnings("unchecked")
                    List<ShippingCostDTO> copyShippingCost = ((List<ShippingCostDTO> ) strategy.copy(LocatorUtils.property(locator, "shippingCost", sourceShippingCost), sourceShippingCost));
                    copy.shippingCost = null;
                    if (copyShippingCost!= null) {
                        List<ShippingCostDTO> uniqueShippingCostl = copy.getShippingCost();
                        uniqueShippingCostl.addAll(copyShippingCost);
                    }
                } else {
                    copy.shippingCost = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ShippingRegionDTO.ShippingCosts();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ShippingRegionDTO.ShippingCosts) {
                final ShippingRegionDTO.ShippingCosts target = this;
                final ShippingRegionDTO.ShippingCosts leftObject = ((ShippingRegionDTO.ShippingCosts) left);
                final ShippingRegionDTO.ShippingCosts rightObject = ((ShippingRegionDTO.ShippingCosts) right);
                {
                    List<ShippingCostDTO> lhsShippingCost;
                    lhsShippingCost = (((leftObject.shippingCost!= null)&&(!leftObject.shippingCost.isEmpty()))?leftObject.getShippingCost():null);
                    List<ShippingCostDTO> rhsShippingCost;
                    rhsShippingCost = (((rightObject.shippingCost!= null)&&(!rightObject.shippingCost.isEmpty()))?rightObject.getShippingCost():null);
                    List<ShippingCostDTO> mergedShippingCost = ((List<ShippingCostDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "shippingCost", lhsShippingCost), LocatorUtils.property(rightLocator, "shippingCost", rhsShippingCost), lhsShippingCost, rhsShippingCost));
                    target.shippingCost = null;
                    if (mergedShippingCost!= null) {
                        List<ShippingCostDTO> uniqueShippingCostl = target.getShippingCost();
                        uniqueShippingCostl.addAll(mergedShippingCost);
                    }
                }
            }
        }

        public ShippingRegionDTO.ShippingCosts withShippingCost(ShippingCostDTO... values) {
            if (values!= null) {
                for (ShippingCostDTO value: values) {
                    getShippingCost().add(value);
                }
            }
            return this;
        }

        public ShippingRegionDTO.ShippingCosts withShippingCost(Collection<ShippingCostDTO> values) {
            if (values!= null) {
                getShippingCost().addAll(values);
            }
            return this;
        }

    }

}
