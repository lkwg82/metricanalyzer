//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for image complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="image">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *       &lt;/sequence>
 *       &lt;attribute name="designId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="printColorIds" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="printColorRGBs" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="x" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="y" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="width" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="height" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="transform" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute ref="{http://www.w3.org/1999/xlink}href"/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "image")
public class Image
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlAttribute(name = "designId")
    protected String designId;
    @XmlAttribute(name = "printColorIds")
    protected String printColorIds;
    @XmlAttribute(name = "printColorRGBs")
    protected String printColorRGBs;
    @XmlAttribute(name = "x")
    protected String x;
    @XmlAttribute(name = "y")
    protected String y;
    @XmlAttribute(name = "width")
    protected String width;
    @XmlAttribute(name = "height")
    protected String height;
    @XmlAttribute(name = "transform")
    protected String transform;
    @XmlAttribute(name = "href", namespace = "http://www.w3.org/1999/xlink")
    protected String href;

    /**
     * Gets the value of the designId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDesignId() {
        return designId;
    }

    /**
     * Sets the value of the designId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDesignId(String value) {
        this.designId = value;
    }

    /**
     * Gets the value of the printColorIds property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrintColorIds() {
        return printColorIds;
    }

    /**
     * Sets the value of the printColorIds property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrintColorIds(String value) {
        this.printColorIds = value;
    }

    /**
     * Gets the value of the printColorRGBs property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrintColorRGBs() {
        return printColorRGBs;
    }

    /**
     * Sets the value of the printColorRGBs property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrintColorRGBs(String value) {
        this.printColorRGBs = value;
    }

    /**
     * Gets the value of the x property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getX() {
        return x;
    }

    /**
     * Sets the value of the x property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setX(String value) {
        this.x = value;
    }

    /**
     * Gets the value of the y property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getY() {
        return y;
    }

    /**
     * Sets the value of the y property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setY(String value) {
        this.y = value;
    }

    /**
     * Gets the value of the width property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWidth() {
        return width;
    }

    /**
     * Sets the value of the width property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWidth(String value) {
        this.width = value;
    }

    /**
     * Gets the value of the height property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHeight() {
        return height;
    }

    /**
     * Sets the value of the height property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHeight(String value) {
        this.height = value;
    }

    /**
     * Gets the value of the transform property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransform() {
        return transform;
    }

    /**
     * Sets the value of the transform property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransform(String value) {
        this.transform = value;
    }

    /**
     * Gets the value of the href property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHref() {
        return href;
    }

    /**
     * Sets the value of the href property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHref(String value) {
        this.href = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theDesignId;
            theDesignId = this.getDesignId();
            strategy.appendField(locator, this, "designId", buffer, theDesignId);
        }
        {
            String thePrintColorIds;
            thePrintColorIds = this.getPrintColorIds();
            strategy.appendField(locator, this, "printColorIds", buffer, thePrintColorIds);
        }
        {
            String thePrintColorRGBs;
            thePrintColorRGBs = this.getPrintColorRGBs();
            strategy.appendField(locator, this, "printColorRGBs", buffer, thePrintColorRGBs);
        }
        {
            String theX;
            theX = this.getX();
            strategy.appendField(locator, this, "x", buffer, theX);
        }
        {
            String theY;
            theY = this.getY();
            strategy.appendField(locator, this, "y", buffer, theY);
        }
        {
            String theWidth;
            theWidth = this.getWidth();
            strategy.appendField(locator, this, "width", buffer, theWidth);
        }
        {
            String theHeight;
            theHeight = this.getHeight();
            strategy.appendField(locator, this, "height", buffer, theHeight);
        }
        {
            String theTransform;
            theTransform = this.getTransform();
            strategy.appendField(locator, this, "transform", buffer, theTransform);
        }
        {
            String theHref;
            theHref = this.getHref();
            strategy.appendField(locator, this, "href", buffer, theHref);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Image)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Image that = ((Image) object);
        {
            String lhsDesignId;
            lhsDesignId = this.getDesignId();
            String rhsDesignId;
            rhsDesignId = that.getDesignId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "designId", lhsDesignId), LocatorUtils.property(thatLocator, "designId", rhsDesignId), lhsDesignId, rhsDesignId)) {
                return false;
            }
        }
        {
            String lhsPrintColorIds;
            lhsPrintColorIds = this.getPrintColorIds();
            String rhsPrintColorIds;
            rhsPrintColorIds = that.getPrintColorIds();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printColorIds", lhsPrintColorIds), LocatorUtils.property(thatLocator, "printColorIds", rhsPrintColorIds), lhsPrintColorIds, rhsPrintColorIds)) {
                return false;
            }
        }
        {
            String lhsPrintColorRGBs;
            lhsPrintColorRGBs = this.getPrintColorRGBs();
            String rhsPrintColorRGBs;
            rhsPrintColorRGBs = that.getPrintColorRGBs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printColorRGBs", lhsPrintColorRGBs), LocatorUtils.property(thatLocator, "printColorRGBs", rhsPrintColorRGBs), lhsPrintColorRGBs, rhsPrintColorRGBs)) {
                return false;
            }
        }
        {
            String lhsX;
            lhsX = this.getX();
            String rhsX;
            rhsX = that.getX();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "x", lhsX), LocatorUtils.property(thatLocator, "x", rhsX), lhsX, rhsX)) {
                return false;
            }
        }
        {
            String lhsY;
            lhsY = this.getY();
            String rhsY;
            rhsY = that.getY();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "y", lhsY), LocatorUtils.property(thatLocator, "y", rhsY), lhsY, rhsY)) {
                return false;
            }
        }
        {
            String lhsWidth;
            lhsWidth = this.getWidth();
            String rhsWidth;
            rhsWidth = that.getWidth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "width", lhsWidth), LocatorUtils.property(thatLocator, "width", rhsWidth), lhsWidth, rhsWidth)) {
                return false;
            }
        }
        {
            String lhsHeight;
            lhsHeight = this.getHeight();
            String rhsHeight;
            rhsHeight = that.getHeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "height", lhsHeight), LocatorUtils.property(thatLocator, "height", rhsHeight), lhsHeight, rhsHeight)) {
                return false;
            }
        }
        {
            String lhsTransform;
            lhsTransform = this.getTransform();
            String rhsTransform;
            rhsTransform = that.getTransform();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transform", lhsTransform), LocatorUtils.property(thatLocator, "transform", rhsTransform), lhsTransform, rhsTransform)) {
                return false;
            }
        }
        {
            String lhsHref;
            lhsHref = this.getHref();
            String rhsHref;
            rhsHref = that.getHref();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "href", lhsHref), LocatorUtils.property(thatLocator, "href", rhsHref), lhsHref, rhsHref)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theDesignId;
            theDesignId = this.getDesignId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designId", theDesignId), currentHashCode, theDesignId);
        }
        {
            String thePrintColorIds;
            thePrintColorIds = this.getPrintColorIds();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printColorIds", thePrintColorIds), currentHashCode, thePrintColorIds);
        }
        {
            String thePrintColorRGBs;
            thePrintColorRGBs = this.getPrintColorRGBs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printColorRGBs", thePrintColorRGBs), currentHashCode, thePrintColorRGBs);
        }
        {
            String theX;
            theX = this.getX();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "x", theX), currentHashCode, theX);
        }
        {
            String theY;
            theY = this.getY();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "y", theY), currentHashCode, theY);
        }
        {
            String theWidth;
            theWidth = this.getWidth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "width", theWidth), currentHashCode, theWidth);
        }
        {
            String theHeight;
            theHeight = this.getHeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "height", theHeight), currentHashCode, theHeight);
        }
        {
            String theTransform;
            theTransform = this.getTransform();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transform", theTransform), currentHashCode, theTransform);
        }
        {
            String theHref;
            theHref = this.getHref();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "href", theHref), currentHashCode, theHref);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Image) {
            final Image copy = ((Image) draftCopy);
            if (this.designId!= null) {
                String sourceDesignId;
                sourceDesignId = this.getDesignId();
                String copyDesignId = ((String) strategy.copy(LocatorUtils.property(locator, "designId", sourceDesignId), sourceDesignId));
                copy.setDesignId(copyDesignId);
            } else {
                copy.designId = null;
            }
            if (this.printColorIds!= null) {
                String sourcePrintColorIds;
                sourcePrintColorIds = this.getPrintColorIds();
                String copyPrintColorIds = ((String) strategy.copy(LocatorUtils.property(locator, "printColorIds", sourcePrintColorIds), sourcePrintColorIds));
                copy.setPrintColorIds(copyPrintColorIds);
            } else {
                copy.printColorIds = null;
            }
            if (this.printColorRGBs!= null) {
                String sourcePrintColorRGBs;
                sourcePrintColorRGBs = this.getPrintColorRGBs();
                String copyPrintColorRGBs = ((String) strategy.copy(LocatorUtils.property(locator, "printColorRGBs", sourcePrintColorRGBs), sourcePrintColorRGBs));
                copy.setPrintColorRGBs(copyPrintColorRGBs);
            } else {
                copy.printColorRGBs = null;
            }
            if (this.x!= null) {
                String sourceX;
                sourceX = this.getX();
                String copyX = ((String) strategy.copy(LocatorUtils.property(locator, "x", sourceX), sourceX));
                copy.setX(copyX);
            } else {
                copy.x = null;
            }
            if (this.y!= null) {
                String sourceY;
                sourceY = this.getY();
                String copyY = ((String) strategy.copy(LocatorUtils.property(locator, "y", sourceY), sourceY));
                copy.setY(copyY);
            } else {
                copy.y = null;
            }
            if (this.width!= null) {
                String sourceWidth;
                sourceWidth = this.getWidth();
                String copyWidth = ((String) strategy.copy(LocatorUtils.property(locator, "width", sourceWidth), sourceWidth));
                copy.setWidth(copyWidth);
            } else {
                copy.width = null;
            }
            if (this.height!= null) {
                String sourceHeight;
                sourceHeight = this.getHeight();
                String copyHeight = ((String) strategy.copy(LocatorUtils.property(locator, "height", sourceHeight), sourceHeight));
                copy.setHeight(copyHeight);
            } else {
                copy.height = null;
            }
            if (this.transform!= null) {
                String sourceTransform;
                sourceTransform = this.getTransform();
                String copyTransform = ((String) strategy.copy(LocatorUtils.property(locator, "transform", sourceTransform), sourceTransform));
                copy.setTransform(copyTransform);
            } else {
                copy.transform = null;
            }
            if (this.href!= null) {
                String sourceHref;
                sourceHref = this.getHref();
                String copyHref = ((String) strategy.copy(LocatorUtils.property(locator, "href", sourceHref), sourceHref));
                copy.setHref(copyHref);
            } else {
                copy.href = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Image();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof Image) {
            final Image target = this;
            final Image leftObject = ((Image) left);
            final Image rightObject = ((Image) right);
            {
                String lhsDesignId;
                lhsDesignId = leftObject.getDesignId();
                String rhsDesignId;
                rhsDesignId = rightObject.getDesignId();
                String mergedDesignId = ((String) strategy.merge(LocatorUtils.property(leftLocator, "designId", lhsDesignId), LocatorUtils.property(rightLocator, "designId", rhsDesignId), lhsDesignId, rhsDesignId));
                target.setDesignId(mergedDesignId);
            }
            {
                String lhsPrintColorIds;
                lhsPrintColorIds = leftObject.getPrintColorIds();
                String rhsPrintColorIds;
                rhsPrintColorIds = rightObject.getPrintColorIds();
                String mergedPrintColorIds = ((String) strategy.merge(LocatorUtils.property(leftLocator, "printColorIds", lhsPrintColorIds), LocatorUtils.property(rightLocator, "printColorIds", rhsPrintColorIds), lhsPrintColorIds, rhsPrintColorIds));
                target.setPrintColorIds(mergedPrintColorIds);
            }
            {
                String lhsPrintColorRGBs;
                lhsPrintColorRGBs = leftObject.getPrintColorRGBs();
                String rhsPrintColorRGBs;
                rhsPrintColorRGBs = rightObject.getPrintColorRGBs();
                String mergedPrintColorRGBs = ((String) strategy.merge(LocatorUtils.property(leftLocator, "printColorRGBs", lhsPrintColorRGBs), LocatorUtils.property(rightLocator, "printColorRGBs", rhsPrintColorRGBs), lhsPrintColorRGBs, rhsPrintColorRGBs));
                target.setPrintColorRGBs(mergedPrintColorRGBs);
            }
            {
                String lhsX;
                lhsX = leftObject.getX();
                String rhsX;
                rhsX = rightObject.getX();
                String mergedX = ((String) strategy.merge(LocatorUtils.property(leftLocator, "x", lhsX), LocatorUtils.property(rightLocator, "x", rhsX), lhsX, rhsX));
                target.setX(mergedX);
            }
            {
                String lhsY;
                lhsY = leftObject.getY();
                String rhsY;
                rhsY = rightObject.getY();
                String mergedY = ((String) strategy.merge(LocatorUtils.property(leftLocator, "y", lhsY), LocatorUtils.property(rightLocator, "y", rhsY), lhsY, rhsY));
                target.setY(mergedY);
            }
            {
                String lhsWidth;
                lhsWidth = leftObject.getWidth();
                String rhsWidth;
                rhsWidth = rightObject.getWidth();
                String mergedWidth = ((String) strategy.merge(LocatorUtils.property(leftLocator, "width", lhsWidth), LocatorUtils.property(rightLocator, "width", rhsWidth), lhsWidth, rhsWidth));
                target.setWidth(mergedWidth);
            }
            {
                String lhsHeight;
                lhsHeight = leftObject.getHeight();
                String rhsHeight;
                rhsHeight = rightObject.getHeight();
                String mergedHeight = ((String) strategy.merge(LocatorUtils.property(leftLocator, "height", lhsHeight), LocatorUtils.property(rightLocator, "height", rhsHeight), lhsHeight, rhsHeight));
                target.setHeight(mergedHeight);
            }
            {
                String lhsTransform;
                lhsTransform = leftObject.getTransform();
                String rhsTransform;
                rhsTransform = rightObject.getTransform();
                String mergedTransform = ((String) strategy.merge(LocatorUtils.property(leftLocator, "transform", lhsTransform), LocatorUtils.property(rightLocator, "transform", rhsTransform), lhsTransform, rhsTransform));
                target.setTransform(mergedTransform);
            }
            {
                String lhsHref;
                lhsHref = leftObject.getHref();
                String rhsHref;
                rhsHref = rightObject.getHref();
                String mergedHref = ((String) strategy.merge(LocatorUtils.property(leftLocator, "href", lhsHref), LocatorUtils.property(rightLocator, "href", rhsHref), lhsHref, rhsHref));
                target.setHref(mergedHref);
            }
        }
    }

    public Image withDesignId(String value) {
        setDesignId(value);
        return this;
    }

    public Image withPrintColorIds(String value) {
        setPrintColorIds(value);
        return this;
    }

    public Image withPrintColorRGBs(String value) {
        setPrintColorRGBs(value);
        return this;
    }

    public Image withX(String value) {
        setX(value);
        return this;
    }

    public Image withY(String value) {
        setY(value);
        return this;
    }

    public Image withWidth(String value) {
        setWidth(value);
        return this;
    }

    public Image withHeight(String value) {
        setHeight(value);
        return this;
    }

    public Image withTransform(String value) {
        setTransform(value);
        return this;
    }

    public Image withHref(String value) {
        setHref(value);
        return this;
    }

}
