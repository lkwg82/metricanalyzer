//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for facetEntryDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="facetEntryDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="entryCount" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="option" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="label" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "facetEntryDTO", propOrder = {
    "entryCount",
    "option",
    "label"
})
public class FacetEntryDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected int entryCount;
    @XmlElement(required = true)
    protected String option;
    protected String label;

    /**
     * Gets the value of the entryCount property.
     * 
     */
    public int getEntryCount() {
        return entryCount;
    }

    /**
     * Sets the value of the entryCount property.
     * 
     */
    public void setEntryCount(int value) {
        this.entryCount = value;
    }

    /**
     * Gets the value of the option property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOption() {
        return option;
    }

    /**
     * Sets the value of the option property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOption(String value) {
        this.option = value;
    }

    /**
     * Gets the value of the label property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLabel() {
        return label;
    }

    /**
     * Sets the value of the label property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLabel(String value) {
        this.label = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            int theEntryCount;
            theEntryCount = (true?this.getEntryCount(): 0);
            strategy.appendField(locator, this, "entryCount", buffer, theEntryCount);
        }
        {
            String theOption;
            theOption = this.getOption();
            strategy.appendField(locator, this, "option", buffer, theOption);
        }
        {
            String theLabel;
            theLabel = this.getLabel();
            strategy.appendField(locator, this, "label", buffer, theLabel);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FacetEntryDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final FacetEntryDTO that = ((FacetEntryDTO) object);
        {
            int lhsEntryCount;
            lhsEntryCount = (true?this.getEntryCount(): 0);
            int rhsEntryCount;
            rhsEntryCount = (true?that.getEntryCount(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "entryCount", lhsEntryCount), LocatorUtils.property(thatLocator, "entryCount", rhsEntryCount), lhsEntryCount, rhsEntryCount)) {
                return false;
            }
        }
        {
            String lhsOption;
            lhsOption = this.getOption();
            String rhsOption;
            rhsOption = that.getOption();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "option", lhsOption), LocatorUtils.property(thatLocator, "option", rhsOption), lhsOption, rhsOption)) {
                return false;
            }
        }
        {
            String lhsLabel;
            lhsLabel = this.getLabel();
            String rhsLabel;
            rhsLabel = that.getLabel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "label", lhsLabel), LocatorUtils.property(thatLocator, "label", rhsLabel), lhsLabel, rhsLabel)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            int theEntryCount;
            theEntryCount = (true?this.getEntryCount(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "entryCount", theEntryCount), currentHashCode, theEntryCount);
        }
        {
            String theOption;
            theOption = this.getOption();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "option", theOption), currentHashCode, theOption);
        }
        {
            String theLabel;
            theLabel = this.getLabel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "label", theLabel), currentHashCode, theLabel);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof FacetEntryDTO) {
            final FacetEntryDTO copy = ((FacetEntryDTO) draftCopy);
            int sourceEntryCount;
            sourceEntryCount = (true?this.getEntryCount(): 0);
            int copyEntryCount = strategy.copy(LocatorUtils.property(locator, "entryCount", sourceEntryCount), sourceEntryCount);
            copy.setEntryCount(copyEntryCount);
            if (this.option!= null) {
                String sourceOption;
                sourceOption = this.getOption();
                String copyOption = ((String) strategy.copy(LocatorUtils.property(locator, "option", sourceOption), sourceOption));
                copy.setOption(copyOption);
            } else {
                copy.option = null;
            }
            if (this.label!= null) {
                String sourceLabel;
                sourceLabel = this.getLabel();
                String copyLabel = ((String) strategy.copy(LocatorUtils.property(locator, "label", sourceLabel), sourceLabel));
                copy.setLabel(copyLabel);
            } else {
                copy.label = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FacetEntryDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof FacetEntryDTO) {
            final FacetEntryDTO target = this;
            final FacetEntryDTO leftObject = ((FacetEntryDTO) left);
            final FacetEntryDTO rightObject = ((FacetEntryDTO) right);
            {
                int lhsEntryCount;
                lhsEntryCount = (true?leftObject.getEntryCount(): 0);
                int rhsEntryCount;
                rhsEntryCount = (true?rightObject.getEntryCount(): 0);
                int mergedEntryCount = ((int) strategy.merge(LocatorUtils.property(leftLocator, "entryCount", lhsEntryCount), LocatorUtils.property(rightLocator, "entryCount", rhsEntryCount), lhsEntryCount, rhsEntryCount));
                target.setEntryCount(mergedEntryCount);
            }
            {
                String lhsOption;
                lhsOption = leftObject.getOption();
                String rhsOption;
                rhsOption = rightObject.getOption();
                String mergedOption = ((String) strategy.merge(LocatorUtils.property(leftLocator, "option", lhsOption), LocatorUtils.property(rightLocator, "option", rhsOption), lhsOption, rhsOption));
                target.setOption(mergedOption);
            }
            {
                String lhsLabel;
                lhsLabel = leftObject.getLabel();
                String rhsLabel;
                rhsLabel = rightObject.getLabel();
                String mergedLabel = ((String) strategy.merge(LocatorUtils.property(leftLocator, "label", lhsLabel), LocatorUtils.property(rightLocator, "label", rhsLabel), lhsLabel, rhsLabel));
                target.setLabel(mergedLabel);
            }
        }
    }

    public FacetEntryDTO withEntryCount(int value) {
        setEntryCount(value);
        return this;
    }

    public FacetEntryDTO withOption(String value) {
        setOption(value);
        return this;
    }

    public FacetEntryDTO withLabel(String value) {
        setLabel(value);
        return this;
    }

    @Override
    public FacetEntryDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public FacetEntryDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public FacetEntryDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }

}
