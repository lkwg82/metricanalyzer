//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productTypeAppearanceDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productTypeAppearanceDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="colors" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="color" type="{http://api.company.biz}productTypeAppearanceColorDTO" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="printTypes" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="printType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productTypeAppearanceDTO", propOrder = {
    "name",
    "colors",
    "printTypes",
    "resources"
})
public class ProductTypeAppearanceDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String name;
    protected ProductTypeAppearanceDTO.Colors colors;
    protected ProductTypeAppearanceDTO.PrintTypes printTypes;
    protected ProductTypeAppearanceDTO.Resources resources;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the colors property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeAppearanceDTO.Colors }
     *     
     */
    public ProductTypeAppearanceDTO.Colors getColors() {
        return colors;
    }

    /**
     * Sets the value of the colors property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeAppearanceDTO.Colors }
     *     
     */
    public void setColors(ProductTypeAppearanceDTO.Colors value) {
        this.colors = value;
    }

    /**
     * Gets the value of the printTypes property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeAppearanceDTO.PrintTypes }
     *     
     */
    public ProductTypeAppearanceDTO.PrintTypes getPrintTypes() {
        return printTypes;
    }

    /**
     * Sets the value of the printTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeAppearanceDTO.PrintTypes }
     *     
     */
    public void setPrintTypes(ProductTypeAppearanceDTO.PrintTypes value) {
        this.printTypes = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeAppearanceDTO.Resources }
     *     
     */
    public ProductTypeAppearanceDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeAppearanceDTO.Resources }
     *     
     */
    public void setResources(ProductTypeAppearanceDTO.Resources value) {
        this.resources = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            ProductTypeAppearanceDTO.Colors theColors;
            theColors = this.getColors();
            strategy.appendField(locator, this, "colors", buffer, theColors);
        }
        {
            ProductTypeAppearanceDTO.PrintTypes thePrintTypes;
            thePrintTypes = this.getPrintTypes();
            strategy.appendField(locator, this, "printTypes", buffer, thePrintTypes);
        }
        {
            ProductTypeAppearanceDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductTypeAppearanceDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductTypeAppearanceDTO that = ((ProductTypeAppearanceDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            ProductTypeAppearanceDTO.Colors lhsColors;
            lhsColors = this.getColors();
            ProductTypeAppearanceDTO.Colors rhsColors;
            rhsColors = that.getColors();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "colors", lhsColors), LocatorUtils.property(thatLocator, "colors", rhsColors), lhsColors, rhsColors)) {
                return false;
            }
        }
        {
            ProductTypeAppearanceDTO.PrintTypes lhsPrintTypes;
            lhsPrintTypes = this.getPrintTypes();
            ProductTypeAppearanceDTO.PrintTypes rhsPrintTypes;
            rhsPrintTypes = that.getPrintTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printTypes", lhsPrintTypes), LocatorUtils.property(thatLocator, "printTypes", rhsPrintTypes), lhsPrintTypes, rhsPrintTypes)) {
                return false;
            }
        }
        {
            ProductTypeAppearanceDTO.Resources lhsResources;
            lhsResources = this.getResources();
            ProductTypeAppearanceDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            ProductTypeAppearanceDTO.Colors theColors;
            theColors = this.getColors();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "colors", theColors), currentHashCode, theColors);
        }
        {
            ProductTypeAppearanceDTO.PrintTypes thePrintTypes;
            thePrintTypes = this.getPrintTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printTypes", thePrintTypes), currentHashCode, thePrintTypes);
        }
        {
            ProductTypeAppearanceDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductTypeAppearanceDTO) {
            final ProductTypeAppearanceDTO copy = ((ProductTypeAppearanceDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.colors!= null) {
                ProductTypeAppearanceDTO.Colors sourceColors;
                sourceColors = this.getColors();
                ProductTypeAppearanceDTO.Colors copyColors = ((ProductTypeAppearanceDTO.Colors) strategy.copy(LocatorUtils.property(locator, "colors", sourceColors), sourceColors));
                copy.setColors(copyColors);
            } else {
                copy.colors = null;
            }
            if (this.printTypes!= null) {
                ProductTypeAppearanceDTO.PrintTypes sourcePrintTypes;
                sourcePrintTypes = this.getPrintTypes();
                ProductTypeAppearanceDTO.PrintTypes copyPrintTypes = ((ProductTypeAppearanceDTO.PrintTypes) strategy.copy(LocatorUtils.property(locator, "printTypes", sourcePrintTypes), sourcePrintTypes));
                copy.setPrintTypes(copyPrintTypes);
            } else {
                copy.printTypes = null;
            }
            if (this.resources!= null) {
                ProductTypeAppearanceDTO.Resources sourceResources;
                sourceResources = this.getResources();
                ProductTypeAppearanceDTO.Resources copyResources = ((ProductTypeAppearanceDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductTypeAppearanceDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductTypeAppearanceDTO) {
            final ProductTypeAppearanceDTO target = this;
            final ProductTypeAppearanceDTO leftObject = ((ProductTypeAppearanceDTO) left);
            final ProductTypeAppearanceDTO rightObject = ((ProductTypeAppearanceDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                ProductTypeAppearanceDTO.Colors lhsColors;
                lhsColors = leftObject.getColors();
                ProductTypeAppearanceDTO.Colors rhsColors;
                rhsColors = rightObject.getColors();
                ProductTypeAppearanceDTO.Colors mergedColors = ((ProductTypeAppearanceDTO.Colors) strategy.merge(LocatorUtils.property(leftLocator, "colors", lhsColors), LocatorUtils.property(rightLocator, "colors", rhsColors), lhsColors, rhsColors));
                target.setColors(mergedColors);
            }
            {
                ProductTypeAppearanceDTO.PrintTypes lhsPrintTypes;
                lhsPrintTypes = leftObject.getPrintTypes();
                ProductTypeAppearanceDTO.PrintTypes rhsPrintTypes;
                rhsPrintTypes = rightObject.getPrintTypes();
                ProductTypeAppearanceDTO.PrintTypes mergedPrintTypes = ((ProductTypeAppearanceDTO.PrintTypes) strategy.merge(LocatorUtils.property(leftLocator, "printTypes", lhsPrintTypes), LocatorUtils.property(rightLocator, "printTypes", rhsPrintTypes), lhsPrintTypes, rhsPrintTypes));
                target.setPrintTypes(mergedPrintTypes);
            }
            {
                ProductTypeAppearanceDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                ProductTypeAppearanceDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                ProductTypeAppearanceDTO.Resources mergedResources = ((ProductTypeAppearanceDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
        }
    }

    public ProductTypeAppearanceDTO withName(String value) {
        setName(value);
        return this;
    }

    public ProductTypeAppearanceDTO withColors(ProductTypeAppearanceDTO.Colors value) {
        setColors(value);
        return this;
    }

    public ProductTypeAppearanceDTO withPrintTypes(ProductTypeAppearanceDTO.PrintTypes value) {
        setPrintTypes(value);
        return this;
    }

    public ProductTypeAppearanceDTO withResources(ProductTypeAppearanceDTO.Resources value) {
        setResources(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="color" type="{http://api.company.biz}productTypeAppearanceColorDTO" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "color"
    })
    public static class Colors
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeAppearanceColorDTO> color;

        /**
         * Gets the value of the color property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the color property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getColor().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeAppearanceColorDTO }
         * 
         * 
         */
        public List<ProductTypeAppearanceColorDTO> getColor() {
            if (color == null) {
                color = new ArrayList<ProductTypeAppearanceColorDTO>();
            }
            return this.color;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeAppearanceColorDTO> theColor;
                theColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                strategy.appendField(locator, this, "color", buffer, theColor);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeAppearanceDTO.Colors)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeAppearanceDTO.Colors that = ((ProductTypeAppearanceDTO.Colors) object);
            {
                List<ProductTypeAppearanceColorDTO> lhsColor;
                lhsColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                List<ProductTypeAppearanceColorDTO> rhsColor;
                rhsColor = (((that.color!= null)&&(!that.color.isEmpty()))?that.getColor():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "color", lhsColor), LocatorUtils.property(thatLocator, "color", rhsColor), lhsColor, rhsColor)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeAppearanceColorDTO> theColor;
                theColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "color", theColor), currentHashCode, theColor);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeAppearanceDTO.Colors) {
                final ProductTypeAppearanceDTO.Colors copy = ((ProductTypeAppearanceDTO.Colors) draftCopy);
                if ((this.color!= null)&&(!this.color.isEmpty())) {
                    List<ProductTypeAppearanceColorDTO> sourceColor;
                    sourceColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeAppearanceColorDTO> copyColor = ((List<ProductTypeAppearanceColorDTO> ) strategy.copy(LocatorUtils.property(locator, "color", sourceColor), sourceColor));
                    copy.color = null;
                    if (copyColor!= null) {
                        List<ProductTypeAppearanceColorDTO> uniqueColorl = copy.getColor();
                        uniqueColorl.addAll(copyColor);
                    }
                } else {
                    copy.color = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeAppearanceDTO.Colors();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeAppearanceDTO.Colors) {
                final ProductTypeAppearanceDTO.Colors target = this;
                final ProductTypeAppearanceDTO.Colors leftObject = ((ProductTypeAppearanceDTO.Colors) left);
                final ProductTypeAppearanceDTO.Colors rightObject = ((ProductTypeAppearanceDTO.Colors) right);
                {
                    List<ProductTypeAppearanceColorDTO> lhsColor;
                    lhsColor = (((leftObject.color!= null)&&(!leftObject.color.isEmpty()))?leftObject.getColor():null);
                    List<ProductTypeAppearanceColorDTO> rhsColor;
                    rhsColor = (((rightObject.color!= null)&&(!rightObject.color.isEmpty()))?rightObject.getColor():null);
                    List<ProductTypeAppearanceColorDTO> mergedColor = ((List<ProductTypeAppearanceColorDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "color", lhsColor), LocatorUtils.property(rightLocator, "color", rhsColor), lhsColor, rhsColor));
                    target.color = null;
                    if (mergedColor!= null) {
                        List<ProductTypeAppearanceColorDTO> uniqueColorl = target.getColor();
                        uniqueColorl.addAll(mergedColor);
                    }
                }
            }
        }

        public ProductTypeAppearanceDTO.Colors withColor(ProductTypeAppearanceColorDTO... values) {
            if (values!= null) {
                for (ProductTypeAppearanceColorDTO value: values) {
                    getColor().add(value);
                }
            }
            return this;
        }

        public ProductTypeAppearanceDTO.Colors withColor(Collection<ProductTypeAppearanceColorDTO> values) {
            if (values!= null) {
                getColor().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="printType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "printType"
    })
    public static class PrintTypes
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> printType;

        /**
         * Gets the value of the printType property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the printType property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPrintType().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getPrintType() {
            if (printType == null) {
                printType = new ArrayList<Reference>();
            }
            return this.printType;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> thePrintType;
                thePrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                strategy.appendField(locator, this, "printType", buffer, thePrintType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeAppearanceDTO.PrintTypes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeAppearanceDTO.PrintTypes that = ((ProductTypeAppearanceDTO.PrintTypes) object);
            {
                List<Reference> lhsPrintType;
                lhsPrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                List<Reference> rhsPrintType;
                rhsPrintType = (((that.printType!= null)&&(!that.printType.isEmpty()))?that.getPrintType():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "printType", lhsPrintType), LocatorUtils.property(thatLocator, "printType", rhsPrintType), lhsPrintType, rhsPrintType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> thePrintType;
                thePrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printType", thePrintType), currentHashCode, thePrintType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeAppearanceDTO.PrintTypes) {
                final ProductTypeAppearanceDTO.PrintTypes copy = ((ProductTypeAppearanceDTO.PrintTypes) draftCopy);
                if ((this.printType!= null)&&(!this.printType.isEmpty())) {
                    List<Reference> sourcePrintType;
                    sourcePrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyPrintType = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "printType", sourcePrintType), sourcePrintType));
                    copy.printType = null;
                    if (copyPrintType!= null) {
                        List<Reference> uniquePrintTypel = copy.getPrintType();
                        uniquePrintTypel.addAll(copyPrintType);
                    }
                } else {
                    copy.printType = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeAppearanceDTO.PrintTypes();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeAppearanceDTO.PrintTypes) {
                final ProductTypeAppearanceDTO.PrintTypes target = this;
                final ProductTypeAppearanceDTO.PrintTypes leftObject = ((ProductTypeAppearanceDTO.PrintTypes) left);
                final ProductTypeAppearanceDTO.PrintTypes rightObject = ((ProductTypeAppearanceDTO.PrintTypes) right);
                {
                    List<Reference> lhsPrintType;
                    lhsPrintType = (((leftObject.printType!= null)&&(!leftObject.printType.isEmpty()))?leftObject.getPrintType():null);
                    List<Reference> rhsPrintType;
                    rhsPrintType = (((rightObject.printType!= null)&&(!rightObject.printType.isEmpty()))?rightObject.getPrintType():null);
                    List<Reference> mergedPrintType = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "printType", lhsPrintType), LocatorUtils.property(rightLocator, "printType", rhsPrintType), lhsPrintType, rhsPrintType));
                    target.printType = null;
                    if (mergedPrintType!= null) {
                        List<Reference> uniquePrintTypel = target.getPrintType();
                        uniquePrintTypel.addAll(mergedPrintType);
                    }
                }
            }
        }

        public ProductTypeAppearanceDTO.PrintTypes withPrintType(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getPrintType().add(value);
                }
            }
            return this;
        }

        public ProductTypeAppearanceDTO.PrintTypes withPrintType(Collection<Reference> values) {
            if (values!= null) {
                getPrintType().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        @XmlElement(required = true)
        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeAppearanceDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeAppearanceDTO.Resources that = ((ProductTypeAppearanceDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeAppearanceDTO.Resources) {
                final ProductTypeAppearanceDTO.Resources copy = ((ProductTypeAppearanceDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeAppearanceDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeAppearanceDTO.Resources) {
                final ProductTypeAppearanceDTO.Resources target = this;
                final ProductTypeAppearanceDTO.Resources leftObject = ((ProductTypeAppearanceDTO.Resources) left);
                final ProductTypeAppearanceDTO.Resources rightObject = ((ProductTypeAppearanceDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public ProductTypeAppearanceDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public ProductTypeAppearanceDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }

}
