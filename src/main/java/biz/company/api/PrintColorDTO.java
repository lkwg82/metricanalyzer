//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for printColorDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="printColorDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="fill" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element ref="{http://api.company.biz}price" minOccurs="0"/>
 *         &lt;element name="restrictions" type="{http://api.company.biz}printColorRestrictionsDTO"/>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="weight" use="required" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "printColorDTO", propOrder = {
    "name",
    "fill",
    "price",
    "restrictions",
    "resources"
})
public class PrintColorDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String name;
    @XmlElement(required = true)
    protected String fill;
    protected ElementPrice price;
    @XmlElement(required = true)
    protected PrintColorRestrictionsDTO restrictions;
    protected PrintColorDTO.Resources resources;
    @XmlAttribute(name = "weight", required = true)
    protected double weight;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the fill property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFill() {
        return fill;
    }

    /**
     * Sets the value of the fill property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFill(String value) {
        this.fill = value;
    }

    /**
     * Gets the value of the price property.
     * 
     * @return
     *     possible object is
     *     {@link ElementPrice }
     *     
     */
    public ElementPrice getPrice() {
        return price;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementPrice }
     *     
     */
    public void setPrice(ElementPrice value) {
        this.price = value;
    }

    /**
     * Gets the value of the restrictions property.
     * 
     * @return
     *     possible object is
     *     {@link PrintColorRestrictionsDTO }
     *     
     */
    public PrintColorRestrictionsDTO getRestrictions() {
        return restrictions;
    }

    /**
     * Sets the value of the restrictions property.
     * 
     * @param value
     *     allowed object is
     *     {@link PrintColorRestrictionsDTO }
     *     
     */
    public void setRestrictions(PrintColorRestrictionsDTO value) {
        this.restrictions = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link PrintColorDTO.Resources }
     *     
     */
    public PrintColorDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link PrintColorDTO.Resources }
     *     
     */
    public void setResources(PrintColorDTO.Resources value) {
        this.resources = value;
    }

    /**
     * Gets the value of the weight property.
     * 
     */
    public double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     */
    public void setWeight(double value) {
        this.weight = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theFill;
            theFill = this.getFill();
            strategy.appendField(locator, this, "fill", buffer, theFill);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            PrintColorRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            strategy.appendField(locator, this, "restrictions", buffer, theRestrictions);
        }
        {
            PrintColorDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            double theWeight;
            theWeight = (true?this.getWeight(): 0.0D);
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PrintColorDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PrintColorDTO that = ((PrintColorDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsFill;
            lhsFill = this.getFill();
            String rhsFill;
            rhsFill = that.getFill();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fill", lhsFill), LocatorUtils.property(thatLocator, "fill", rhsFill), lhsFill, rhsFill)) {
                return false;
            }
        }
        {
            ElementPrice lhsPrice;
            lhsPrice = this.getPrice();
            ElementPrice rhsPrice;
            rhsPrice = that.getPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            PrintColorRestrictionsDTO lhsRestrictions;
            lhsRestrictions = this.getRestrictions();
            PrintColorRestrictionsDTO rhsRestrictions;
            rhsRestrictions = that.getRestrictions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restrictions", lhsRestrictions), LocatorUtils.property(thatLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions)) {
                return false;
            }
        }
        {
            PrintColorDTO.Resources lhsResources;
            lhsResources = this.getResources();
            PrintColorDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            double lhsWeight;
            lhsWeight = (true?this.getWeight(): 0.0D);
            double rhsWeight;
            rhsWeight = (true?that.getWeight(): 0.0D);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theFill;
            theFill = this.getFill();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fill", theFill), currentHashCode, theFill);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            PrintColorRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restrictions", theRestrictions), currentHashCode, theRestrictions);
        }
        {
            PrintColorDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            double theWeight;
            theWeight = (true?this.getWeight(): 0.0D);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof PrintColorDTO) {
            final PrintColorDTO copy = ((PrintColorDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.fill!= null) {
                String sourceFill;
                sourceFill = this.getFill();
                String copyFill = ((String) strategy.copy(LocatorUtils.property(locator, "fill", sourceFill), sourceFill));
                copy.setFill(copyFill);
            } else {
                copy.fill = null;
            }
            if (this.price!= null) {
                ElementPrice sourcePrice;
                sourcePrice = this.getPrice();
                ElementPrice copyPrice = ((ElementPrice) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
                copy.setPrice(copyPrice);
            } else {
                copy.price = null;
            }
            if (this.restrictions!= null) {
                PrintColorRestrictionsDTO sourceRestrictions;
                sourceRestrictions = this.getRestrictions();
                PrintColorRestrictionsDTO copyRestrictions = ((PrintColorRestrictionsDTO) strategy.copy(LocatorUtils.property(locator, "restrictions", sourceRestrictions), sourceRestrictions));
                copy.setRestrictions(copyRestrictions);
            } else {
                copy.restrictions = null;
            }
            if (this.resources!= null) {
                PrintColorDTO.Resources sourceResources;
                sourceResources = this.getResources();
                PrintColorDTO.Resources copyResources = ((PrintColorDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
            double sourceWeight;
            sourceWeight = (true?this.getWeight(): 0.0D);
            double copyWeight = strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight);
            copy.setWeight(copyWeight);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PrintColorDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof PrintColorDTO) {
            final PrintColorDTO target = this;
            final PrintColorDTO leftObject = ((PrintColorDTO) left);
            final PrintColorDTO rightObject = ((PrintColorDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                String lhsFill;
                lhsFill = leftObject.getFill();
                String rhsFill;
                rhsFill = rightObject.getFill();
                String mergedFill = ((String) strategy.merge(LocatorUtils.property(leftLocator, "fill", lhsFill), LocatorUtils.property(rightLocator, "fill", rhsFill), lhsFill, rhsFill));
                target.setFill(mergedFill);
            }
            {
                ElementPrice lhsPrice;
                lhsPrice = leftObject.getPrice();
                ElementPrice rhsPrice;
                rhsPrice = rightObject.getPrice();
                ElementPrice mergedPrice = ((ElementPrice) strategy.merge(LocatorUtils.property(leftLocator, "price", lhsPrice), LocatorUtils.property(rightLocator, "price", rhsPrice), lhsPrice, rhsPrice));
                target.setPrice(mergedPrice);
            }
            {
                PrintColorRestrictionsDTO lhsRestrictions;
                lhsRestrictions = leftObject.getRestrictions();
                PrintColorRestrictionsDTO rhsRestrictions;
                rhsRestrictions = rightObject.getRestrictions();
                PrintColorRestrictionsDTO mergedRestrictions = ((PrintColorRestrictionsDTO) strategy.merge(LocatorUtils.property(leftLocator, "restrictions", lhsRestrictions), LocatorUtils.property(rightLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions));
                target.setRestrictions(mergedRestrictions);
            }
            {
                PrintColorDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                PrintColorDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                PrintColorDTO.Resources mergedResources = ((PrintColorDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
            {
                double lhsWeight;
                lhsWeight = (true?leftObject.getWeight(): 0.0D);
                double rhsWeight;
                rhsWeight = (true?rightObject.getWeight(): 0.0D);
                double mergedWeight = ((double) strategy.merge(LocatorUtils.property(leftLocator, "weight", lhsWeight), LocatorUtils.property(rightLocator, "weight", rhsWeight), lhsWeight, rhsWeight));
                target.setWeight(mergedWeight);
            }
        }
    }

    public PrintColorDTO withName(String value) {
        setName(value);
        return this;
    }

    public PrintColorDTO withFill(String value) {
        setFill(value);
        return this;
    }

    public PrintColorDTO withPrice(ElementPrice value) {
        setPrice(value);
        return this;
    }

    public PrintColorDTO withRestrictions(PrintColorRestrictionsDTO value) {
        setRestrictions(value);
        return this;
    }

    public PrintColorDTO withResources(PrintColorDTO.Resources value) {
        setResources(value);
        return this;
    }

    public PrintColorDTO withWeight(double value) {
        setWeight(value);
        return this;
    }

    @Override
    public PrintColorDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public PrintColorDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public PrintColorDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        @XmlElement(required = true)
        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PrintColorDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PrintColorDTO.Resources that = ((PrintColorDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PrintColorDTO.Resources) {
                final PrintColorDTO.Resources copy = ((PrintColorDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PrintColorDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof PrintColorDTO.Resources) {
                final PrintColorDTO.Resources target = this;
                final PrintColorDTO.Resources leftObject = ((PrintColorDTO.Resources) left);
                final PrintColorDTO.Resources rightObject = ((PrintColorDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public PrintColorDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public PrintColorDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }

}
