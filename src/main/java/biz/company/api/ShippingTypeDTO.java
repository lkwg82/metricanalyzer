//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for shippingTypeDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="shippingTypeDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="shippingCountries" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}shippingCountry" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="shippingRegions" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}shippingRegion" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="weight" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "shippingTypeDTO", propOrder = {
    "name",
    "description",
    "shippingCountries",
    "shippingRegions"
})
public class ShippingTypeDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    protected String description;
    protected ShippingTypeDTO.ShippingCountries shippingCountries;
    protected ShippingTypeDTO.ShippingRegions shippingRegions;
    @XmlAttribute(name = "weight")
    protected Double weight;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the shippingCountries property.
     * 
     * @return
     *     possible object is
     *     {@link ShippingTypeDTO.ShippingCountries }
     *     
     */
    public ShippingTypeDTO.ShippingCountries getShippingCountries() {
        return shippingCountries;
    }

    /**
     * Sets the value of the shippingCountries property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShippingTypeDTO.ShippingCountries }
     *     
     */
    public void setShippingCountries(ShippingTypeDTO.ShippingCountries value) {
        this.shippingCountries = value;
    }

    /**
     * Gets the value of the shippingRegions property.
     * 
     * @return
     *     possible object is
     *     {@link ShippingTypeDTO.ShippingRegions }
     *     
     */
    public ShippingTypeDTO.ShippingRegions getShippingRegions() {
        return shippingRegions;
    }

    /**
     * Sets the value of the shippingRegions property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShippingTypeDTO.ShippingRegions }
     *     
     */
    public void setShippingRegions(ShippingTypeDTO.ShippingRegions value) {
        this.shippingRegions = value;
    }

    /**
     * Gets the value of the weight property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setWeight(Double value) {
        this.weight = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            ShippingTypeDTO.ShippingCountries theShippingCountries;
            theShippingCountries = this.getShippingCountries();
            strategy.appendField(locator, this, "shippingCountries", buffer, theShippingCountries);
        }
        {
            ShippingTypeDTO.ShippingRegions theShippingRegions;
            theShippingRegions = this.getShippingRegions();
            strategy.appendField(locator, this, "shippingRegions", buffer, theShippingRegions);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ShippingTypeDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ShippingTypeDTO that = ((ShippingTypeDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            ShippingTypeDTO.ShippingCountries lhsShippingCountries;
            lhsShippingCountries = this.getShippingCountries();
            ShippingTypeDTO.ShippingCountries rhsShippingCountries;
            rhsShippingCountries = that.getShippingCountries();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingCountries", lhsShippingCountries), LocatorUtils.property(thatLocator, "shippingCountries", rhsShippingCountries), lhsShippingCountries, rhsShippingCountries)) {
                return false;
            }
        }
        {
            ShippingTypeDTO.ShippingRegions lhsShippingRegions;
            lhsShippingRegions = this.getShippingRegions();
            ShippingTypeDTO.ShippingRegions rhsShippingRegions;
            rhsShippingRegions = that.getShippingRegions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingRegions", lhsShippingRegions), LocatorUtils.property(thatLocator, "shippingRegions", rhsShippingRegions), lhsShippingRegions, rhsShippingRegions)) {
                return false;
            }
        }
        {
            Double lhsWeight;
            lhsWeight = this.getWeight();
            Double rhsWeight;
            rhsWeight = that.getWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            ShippingTypeDTO.ShippingCountries theShippingCountries;
            theShippingCountries = this.getShippingCountries();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingCountries", theShippingCountries), currentHashCode, theShippingCountries);
        }
        {
            ShippingTypeDTO.ShippingRegions theShippingRegions;
            theShippingRegions = this.getShippingRegions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingRegions", theShippingRegions), currentHashCode, theShippingRegions);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ShippingTypeDTO) {
            final ShippingTypeDTO copy = ((ShippingTypeDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.shippingCountries!= null) {
                ShippingTypeDTO.ShippingCountries sourceShippingCountries;
                sourceShippingCountries = this.getShippingCountries();
                ShippingTypeDTO.ShippingCountries copyShippingCountries = ((ShippingTypeDTO.ShippingCountries) strategy.copy(LocatorUtils.property(locator, "shippingCountries", sourceShippingCountries), sourceShippingCountries));
                copy.setShippingCountries(copyShippingCountries);
            } else {
                copy.shippingCountries = null;
            }
            if (this.shippingRegions!= null) {
                ShippingTypeDTO.ShippingRegions sourceShippingRegions;
                sourceShippingRegions = this.getShippingRegions();
                ShippingTypeDTO.ShippingRegions copyShippingRegions = ((ShippingTypeDTO.ShippingRegions) strategy.copy(LocatorUtils.property(locator, "shippingRegions", sourceShippingRegions), sourceShippingRegions));
                copy.setShippingRegions(copyShippingRegions);
            } else {
                copy.shippingRegions = null;
            }
            if (this.weight!= null) {
                Double sourceWeight;
                sourceWeight = this.getWeight();
                Double copyWeight = ((Double) strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight));
                copy.setWeight(copyWeight);
            } else {
                copy.weight = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ShippingTypeDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ShippingTypeDTO) {
            final ShippingTypeDTO target = this;
            final ShippingTypeDTO leftObject = ((ShippingTypeDTO) left);
            final ShippingTypeDTO rightObject = ((ShippingTypeDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                String lhsDescription;
                lhsDescription = leftObject.getDescription();
                String rhsDescription;
                rhsDescription = rightObject.getDescription();
                String mergedDescription = ((String) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription));
                target.setDescription(mergedDescription);
            }
            {
                ShippingTypeDTO.ShippingCountries lhsShippingCountries;
                lhsShippingCountries = leftObject.getShippingCountries();
                ShippingTypeDTO.ShippingCountries rhsShippingCountries;
                rhsShippingCountries = rightObject.getShippingCountries();
                ShippingTypeDTO.ShippingCountries mergedShippingCountries = ((ShippingTypeDTO.ShippingCountries) strategy.merge(LocatorUtils.property(leftLocator, "shippingCountries", lhsShippingCountries), LocatorUtils.property(rightLocator, "shippingCountries", rhsShippingCountries), lhsShippingCountries, rhsShippingCountries));
                target.setShippingCountries(mergedShippingCountries);
            }
            {
                ShippingTypeDTO.ShippingRegions lhsShippingRegions;
                lhsShippingRegions = leftObject.getShippingRegions();
                ShippingTypeDTO.ShippingRegions rhsShippingRegions;
                rhsShippingRegions = rightObject.getShippingRegions();
                ShippingTypeDTO.ShippingRegions mergedShippingRegions = ((ShippingTypeDTO.ShippingRegions) strategy.merge(LocatorUtils.property(leftLocator, "shippingRegions", lhsShippingRegions), LocatorUtils.property(rightLocator, "shippingRegions", rhsShippingRegions), lhsShippingRegions, rhsShippingRegions));
                target.setShippingRegions(mergedShippingRegions);
            }
            {
                Double lhsWeight;
                lhsWeight = leftObject.getWeight();
                Double rhsWeight;
                rhsWeight = rightObject.getWeight();
                Double mergedWeight = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "weight", lhsWeight), LocatorUtils.property(rightLocator, "weight", rhsWeight), lhsWeight, rhsWeight));
                target.setWeight(mergedWeight);
            }
        }
    }

    public ShippingTypeDTO withName(String value) {
        setName(value);
        return this;
    }

    public ShippingTypeDTO withDescription(String value) {
        setDescription(value);
        return this;
    }

    public ShippingTypeDTO withShippingCountries(ShippingTypeDTO.ShippingCountries value) {
        setShippingCountries(value);
        return this;
    }

    public ShippingTypeDTO withShippingRegions(ShippingTypeDTO.ShippingRegions value) {
        setShippingRegions(value);
        return this;
    }

    public ShippingTypeDTO withWeight(Double value) {
        setWeight(value);
        return this;
    }

    @Override
    public ShippingTypeDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ShippingTypeDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ShippingTypeDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}shippingCountry" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "shippingCountry"
    })
    public static class ShippingCountries
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        @XmlElement(required = true)
        protected List<ShippingCountryDTO> shippingCountry;

        /**
         * Gets the value of the shippingCountry property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the shippingCountry property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getShippingCountry().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ShippingCountryDTO }
         * 
         * 
         */
        public List<ShippingCountryDTO> getShippingCountry() {
            if (shippingCountry == null) {
                shippingCountry = new ArrayList<ShippingCountryDTO>();
            }
            return this.shippingCountry;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ShippingCountryDTO> theShippingCountry;
                theShippingCountry = (((this.shippingCountry!= null)&&(!this.shippingCountry.isEmpty()))?this.getShippingCountry():null);
                strategy.appendField(locator, this, "shippingCountry", buffer, theShippingCountry);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ShippingTypeDTO.ShippingCountries)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ShippingTypeDTO.ShippingCountries that = ((ShippingTypeDTO.ShippingCountries) object);
            {
                List<ShippingCountryDTO> lhsShippingCountry;
                lhsShippingCountry = (((this.shippingCountry!= null)&&(!this.shippingCountry.isEmpty()))?this.getShippingCountry():null);
                List<ShippingCountryDTO> rhsShippingCountry;
                rhsShippingCountry = (((that.shippingCountry!= null)&&(!that.shippingCountry.isEmpty()))?that.getShippingCountry():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingCountry", lhsShippingCountry), LocatorUtils.property(thatLocator, "shippingCountry", rhsShippingCountry), lhsShippingCountry, rhsShippingCountry)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ShippingCountryDTO> theShippingCountry;
                theShippingCountry = (((this.shippingCountry!= null)&&(!this.shippingCountry.isEmpty()))?this.getShippingCountry():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingCountry", theShippingCountry), currentHashCode, theShippingCountry);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ShippingTypeDTO.ShippingCountries) {
                final ShippingTypeDTO.ShippingCountries copy = ((ShippingTypeDTO.ShippingCountries) draftCopy);
                if ((this.shippingCountry!= null)&&(!this.shippingCountry.isEmpty())) {
                    List<ShippingCountryDTO> sourceShippingCountry;
                    sourceShippingCountry = (((this.shippingCountry!= null)&&(!this.shippingCountry.isEmpty()))?this.getShippingCountry():null);
                    @SuppressWarnings("unchecked")
                    List<ShippingCountryDTO> copyShippingCountry = ((List<ShippingCountryDTO> ) strategy.copy(LocatorUtils.property(locator, "shippingCountry", sourceShippingCountry), sourceShippingCountry));
                    copy.shippingCountry = null;
                    if (copyShippingCountry!= null) {
                        List<ShippingCountryDTO> uniqueShippingCountryl = copy.getShippingCountry();
                        uniqueShippingCountryl.addAll(copyShippingCountry);
                    }
                } else {
                    copy.shippingCountry = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ShippingTypeDTO.ShippingCountries();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ShippingTypeDTO.ShippingCountries) {
                final ShippingTypeDTO.ShippingCountries target = this;
                final ShippingTypeDTO.ShippingCountries leftObject = ((ShippingTypeDTO.ShippingCountries) left);
                final ShippingTypeDTO.ShippingCountries rightObject = ((ShippingTypeDTO.ShippingCountries) right);
                {
                    List<ShippingCountryDTO> lhsShippingCountry;
                    lhsShippingCountry = (((leftObject.shippingCountry!= null)&&(!leftObject.shippingCountry.isEmpty()))?leftObject.getShippingCountry():null);
                    List<ShippingCountryDTO> rhsShippingCountry;
                    rhsShippingCountry = (((rightObject.shippingCountry!= null)&&(!rightObject.shippingCountry.isEmpty()))?rightObject.getShippingCountry():null);
                    List<ShippingCountryDTO> mergedShippingCountry = ((List<ShippingCountryDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "shippingCountry", lhsShippingCountry), LocatorUtils.property(rightLocator, "shippingCountry", rhsShippingCountry), lhsShippingCountry, rhsShippingCountry));
                    target.shippingCountry = null;
                    if (mergedShippingCountry!= null) {
                        List<ShippingCountryDTO> uniqueShippingCountryl = target.getShippingCountry();
                        uniqueShippingCountryl.addAll(mergedShippingCountry);
                    }
                }
            }
        }

        public ShippingTypeDTO.ShippingCountries withShippingCountry(ShippingCountryDTO... values) {
            if (values!= null) {
                for (ShippingCountryDTO value: values) {
                    getShippingCountry().add(value);
                }
            }
            return this;
        }

        public ShippingTypeDTO.ShippingCountries withShippingCountry(Collection<ShippingCountryDTO> values) {
            if (values!= null) {
                getShippingCountry().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}shippingRegion" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "shippingRegion"
    })
    public static class ShippingRegions
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        @XmlElement(required = true)
        protected List<ShippingRegionDTO> shippingRegion;

        /**
         * Gets the value of the shippingRegion property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the shippingRegion property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getShippingRegion().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ShippingRegionDTO }
         * 
         * 
         */
        public List<ShippingRegionDTO> getShippingRegion() {
            if (shippingRegion == null) {
                shippingRegion = new ArrayList<ShippingRegionDTO>();
            }
            return this.shippingRegion;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ShippingRegionDTO> theShippingRegion;
                theShippingRegion = (((this.shippingRegion!= null)&&(!this.shippingRegion.isEmpty()))?this.getShippingRegion():null);
                strategy.appendField(locator, this, "shippingRegion", buffer, theShippingRegion);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ShippingTypeDTO.ShippingRegions)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ShippingTypeDTO.ShippingRegions that = ((ShippingTypeDTO.ShippingRegions) object);
            {
                List<ShippingRegionDTO> lhsShippingRegion;
                lhsShippingRegion = (((this.shippingRegion!= null)&&(!this.shippingRegion.isEmpty()))?this.getShippingRegion():null);
                List<ShippingRegionDTO> rhsShippingRegion;
                rhsShippingRegion = (((that.shippingRegion!= null)&&(!that.shippingRegion.isEmpty()))?that.getShippingRegion():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingRegion", lhsShippingRegion), LocatorUtils.property(thatLocator, "shippingRegion", rhsShippingRegion), lhsShippingRegion, rhsShippingRegion)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ShippingRegionDTO> theShippingRegion;
                theShippingRegion = (((this.shippingRegion!= null)&&(!this.shippingRegion.isEmpty()))?this.getShippingRegion():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingRegion", theShippingRegion), currentHashCode, theShippingRegion);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ShippingTypeDTO.ShippingRegions) {
                final ShippingTypeDTO.ShippingRegions copy = ((ShippingTypeDTO.ShippingRegions) draftCopy);
                if ((this.shippingRegion!= null)&&(!this.shippingRegion.isEmpty())) {
                    List<ShippingRegionDTO> sourceShippingRegion;
                    sourceShippingRegion = (((this.shippingRegion!= null)&&(!this.shippingRegion.isEmpty()))?this.getShippingRegion():null);
                    @SuppressWarnings("unchecked")
                    List<ShippingRegionDTO> copyShippingRegion = ((List<ShippingRegionDTO> ) strategy.copy(LocatorUtils.property(locator, "shippingRegion", sourceShippingRegion), sourceShippingRegion));
                    copy.shippingRegion = null;
                    if (copyShippingRegion!= null) {
                        List<ShippingRegionDTO> uniqueShippingRegionl = copy.getShippingRegion();
                        uniqueShippingRegionl.addAll(copyShippingRegion);
                    }
                } else {
                    copy.shippingRegion = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ShippingTypeDTO.ShippingRegions();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ShippingTypeDTO.ShippingRegions) {
                final ShippingTypeDTO.ShippingRegions target = this;
                final ShippingTypeDTO.ShippingRegions leftObject = ((ShippingTypeDTO.ShippingRegions) left);
                final ShippingTypeDTO.ShippingRegions rightObject = ((ShippingTypeDTO.ShippingRegions) right);
                {
                    List<ShippingRegionDTO> lhsShippingRegion;
                    lhsShippingRegion = (((leftObject.shippingRegion!= null)&&(!leftObject.shippingRegion.isEmpty()))?leftObject.getShippingRegion():null);
                    List<ShippingRegionDTO> rhsShippingRegion;
                    rhsShippingRegion = (((rightObject.shippingRegion!= null)&&(!rightObject.shippingRegion.isEmpty()))?rightObject.getShippingRegion():null);
                    List<ShippingRegionDTO> mergedShippingRegion = ((List<ShippingRegionDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "shippingRegion", lhsShippingRegion), LocatorUtils.property(rightLocator, "shippingRegion", rhsShippingRegion), lhsShippingRegion, rhsShippingRegion));
                    target.shippingRegion = null;
                    if (mergedShippingRegion!= null) {
                        List<ShippingRegionDTO> uniqueShippingRegionl = target.getShippingRegion();
                        uniqueShippingRegionl.addAll(mergedShippingRegion);
                    }
                }
            }
        }

        public ShippingTypeDTO.ShippingRegions withShippingRegion(ShippingRegionDTO... values) {
            if (values!= null) {
                for (ShippingRegionDTO value: values) {
                    getShippingRegion().add(value);
                }
            }
            return this;
        }

        public ShippingTypeDTO.ShippingRegions withShippingRegion(Collection<ShippingRegionDTO> values) {
            if (values!= null) {
                getShippingRegion().addAll(values);
            }
            return this;
        }

    }

}
