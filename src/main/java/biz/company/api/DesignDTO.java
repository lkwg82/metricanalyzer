//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for designDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="designDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="tags" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="user" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="creator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="restrictions" type="{http://api.company.biz}designRestrictionsDTO" minOccurs="0"/>
 *         &lt;element name="size" type="{http://api.company.biz}dimension" minOccurs="0"/>
 *         &lt;element name="colors" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="color" type="{http://api.company.biz}designColorDTO" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="backgroundColor" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="printTypes" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="printType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="designCategories" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="designCategory" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element ref="{http://api.company.biz}price" minOccurs="0"/>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="created" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="modified" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="weight" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "designDTO", propOrder = {
    "name",
    "description",
    "tags",
    "user",
    "creator",
    "restrictions",
    "size",
    "colors",
    "backgroundColor",
    "printTypes",
    "designCategories",
    "price",
    "resources",
    "created",
    "modified"
})
public class DesignDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    protected String description;
    protected String tags;
    protected Reference user;
    protected String creator;
    protected DesignRestrictionsDTO restrictions;
    protected Dimension size;
    protected DesignDTO.Colors colors;
    protected String backgroundColor;
    protected DesignDTO.PrintTypes printTypes;
    protected DesignDTO.DesignCategories designCategories;
    protected ElementPrice price;
    protected DesignDTO.Resources resources;
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar created;
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar modified;
    @XmlAttribute(name = "weight")
    protected Double weight;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the tags property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTags() {
        return tags;
    }

    /**
     * Sets the value of the tags property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTags(String value) {
        this.tags = value;
    }

    /**
     * Gets the value of the user property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getUser() {
        return user;
    }

    /**
     * Sets the value of the user property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setUser(Reference value) {
        this.user = value;
    }

    /**
     * Gets the value of the creator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreator() {
        return creator;
    }

    /**
     * Sets the value of the creator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreator(String value) {
        this.creator = value;
    }

    /**
     * Gets the value of the restrictions property.
     * 
     * @return
     *     possible object is
     *     {@link DesignRestrictionsDTO }
     *     
     */
    public DesignRestrictionsDTO getRestrictions() {
        return restrictions;
    }

    /**
     * Sets the value of the restrictions property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignRestrictionsDTO }
     *     
     */
    public void setRestrictions(DesignRestrictionsDTO value) {
        this.restrictions = value;
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link Dimension }
     *     
     */
    public Dimension getSize() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link Dimension }
     *     
     */
    public void setSize(Dimension value) {
        this.size = value;
    }

    /**
     * Gets the value of the colors property.
     * 
     * @return
     *     possible object is
     *     {@link DesignDTO.Colors }
     *     
     */
    public DesignDTO.Colors getColors() {
        return colors;
    }

    /**
     * Sets the value of the colors property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignDTO.Colors }
     *     
     */
    public void setColors(DesignDTO.Colors value) {
        this.colors = value;
    }

    /**
     * Gets the value of the backgroundColor property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBackgroundColor() {
        return backgroundColor;
    }

    /**
     * Sets the value of the backgroundColor property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBackgroundColor(String value) {
        this.backgroundColor = value;
    }

    /**
     * Gets the value of the printTypes property.
     * 
     * @return
     *     possible object is
     *     {@link DesignDTO.PrintTypes }
     *     
     */
    public DesignDTO.PrintTypes getPrintTypes() {
        return printTypes;
    }

    /**
     * Sets the value of the printTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignDTO.PrintTypes }
     *     
     */
    public void setPrintTypes(DesignDTO.PrintTypes value) {
        this.printTypes = value;
    }

    /**
     * Gets the value of the designCategories property.
     * 
     * @return
     *     possible object is
     *     {@link DesignDTO.DesignCategories }
     *     
     */
    public DesignDTO.DesignCategories getDesignCategories() {
        return designCategories;
    }

    /**
     * Sets the value of the designCategories property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignDTO.DesignCategories }
     *     
     */
    public void setDesignCategories(DesignDTO.DesignCategories value) {
        this.designCategories = value;
    }

    /**
     * Gets the value of the price property.
     * 
     * @return
     *     possible object is
     *     {@link ElementPrice }
     *     
     */
    public ElementPrice getPrice() {
        return price;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementPrice }
     *     
     */
    public void setPrice(ElementPrice value) {
        this.price = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link DesignDTO.Resources }
     *     
     */
    public DesignDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link DesignDTO.Resources }
     *     
     */
    public void setResources(DesignDTO.Resources value) {
        this.resources = value;
    }

    /**
     * Gets the value of the created property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getCreated() {
        return created;
    }

    /**
     * Sets the value of the created property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setCreated(XMLGregorianCalendar value) {
        this.created = value;
    }

    /**
     * Gets the value of the modified property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getModified() {
        return modified;
    }

    /**
     * Sets the value of the modified property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setModified(XMLGregorianCalendar value) {
        this.modified = value;
    }

    /**
     * Gets the value of the weight property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setWeight(Double value) {
        this.weight = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            String theTags;
            theTags = this.getTags();
            strategy.appendField(locator, this, "tags", buffer, theTags);
        }
        {
            Reference theUser;
            theUser = this.getUser();
            strategy.appendField(locator, this, "user", buffer, theUser);
        }
        {
            String theCreator;
            theCreator = this.getCreator();
            strategy.appendField(locator, this, "creator", buffer, theCreator);
        }
        {
            DesignRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            strategy.appendField(locator, this, "restrictions", buffer, theRestrictions);
        }
        {
            Dimension theSize;
            theSize = this.getSize();
            strategy.appendField(locator, this, "size", buffer, theSize);
        }
        {
            DesignDTO.Colors theColors;
            theColors = this.getColors();
            strategy.appendField(locator, this, "colors", buffer, theColors);
        }
        {
            String theBackgroundColor;
            theBackgroundColor = this.getBackgroundColor();
            strategy.appendField(locator, this, "backgroundColor", buffer, theBackgroundColor);
        }
        {
            DesignDTO.PrintTypes thePrintTypes;
            thePrintTypes = this.getPrintTypes();
            strategy.appendField(locator, this, "printTypes", buffer, thePrintTypes);
        }
        {
            DesignDTO.DesignCategories theDesignCategories;
            theDesignCategories = this.getDesignCategories();
            strategy.appendField(locator, this, "designCategories", buffer, theDesignCategories);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            DesignDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            XMLGregorianCalendar theCreated;
            theCreated = this.getCreated();
            strategy.appendField(locator, this, "created", buffer, theCreated);
        }
        {
            XMLGregorianCalendar theModified;
            theModified = this.getModified();
            strategy.appendField(locator, this, "modified", buffer, theModified);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DesignDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DesignDTO that = ((DesignDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            String lhsTags;
            lhsTags = this.getTags();
            String rhsTags;
            rhsTags = that.getTags();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tags", lhsTags), LocatorUtils.property(thatLocator, "tags", rhsTags), lhsTags, rhsTags)) {
                return false;
            }
        }
        {
            Reference lhsUser;
            lhsUser = this.getUser();
            Reference rhsUser;
            rhsUser = that.getUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "user", lhsUser), LocatorUtils.property(thatLocator, "user", rhsUser), lhsUser, rhsUser)) {
                return false;
            }
        }
        {
            String lhsCreator;
            lhsCreator = this.getCreator();
            String rhsCreator;
            rhsCreator = that.getCreator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creator", lhsCreator), LocatorUtils.property(thatLocator, "creator", rhsCreator), lhsCreator, rhsCreator)) {
                return false;
            }
        }
        {
            DesignRestrictionsDTO lhsRestrictions;
            lhsRestrictions = this.getRestrictions();
            DesignRestrictionsDTO rhsRestrictions;
            rhsRestrictions = that.getRestrictions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restrictions", lhsRestrictions), LocatorUtils.property(thatLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions)) {
                return false;
            }
        }
        {
            Dimension lhsSize;
            lhsSize = this.getSize();
            Dimension rhsSize;
            rhsSize = that.getSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "size", lhsSize), LocatorUtils.property(thatLocator, "size", rhsSize), lhsSize, rhsSize)) {
                return false;
            }
        }
        {
            DesignDTO.Colors lhsColors;
            lhsColors = this.getColors();
            DesignDTO.Colors rhsColors;
            rhsColors = that.getColors();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "colors", lhsColors), LocatorUtils.property(thatLocator, "colors", rhsColors), lhsColors, rhsColors)) {
                return false;
            }
        }
        {
            String lhsBackgroundColor;
            lhsBackgroundColor = this.getBackgroundColor();
            String rhsBackgroundColor;
            rhsBackgroundColor = that.getBackgroundColor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "backgroundColor", lhsBackgroundColor), LocatorUtils.property(thatLocator, "backgroundColor", rhsBackgroundColor), lhsBackgroundColor, rhsBackgroundColor)) {
                return false;
            }
        }
        {
            DesignDTO.PrintTypes lhsPrintTypes;
            lhsPrintTypes = this.getPrintTypes();
            DesignDTO.PrintTypes rhsPrintTypes;
            rhsPrintTypes = that.getPrintTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printTypes", lhsPrintTypes), LocatorUtils.property(thatLocator, "printTypes", rhsPrintTypes), lhsPrintTypes, rhsPrintTypes)) {
                return false;
            }
        }
        {
            DesignDTO.DesignCategories lhsDesignCategories;
            lhsDesignCategories = this.getDesignCategories();
            DesignDTO.DesignCategories rhsDesignCategories;
            rhsDesignCategories = that.getDesignCategories();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "designCategories", lhsDesignCategories), LocatorUtils.property(thatLocator, "designCategories", rhsDesignCategories), lhsDesignCategories, rhsDesignCategories)) {
                return false;
            }
        }
        {
            ElementPrice lhsPrice;
            lhsPrice = this.getPrice();
            ElementPrice rhsPrice;
            rhsPrice = that.getPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            DesignDTO.Resources lhsResources;
            lhsResources = this.getResources();
            DesignDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsCreated;
            lhsCreated = this.getCreated();
            XMLGregorianCalendar rhsCreated;
            rhsCreated = that.getCreated();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsModified;
            lhsModified = this.getModified();
            XMLGregorianCalendar rhsModified;
            rhsModified = that.getModified();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modified", lhsModified), LocatorUtils.property(thatLocator, "modified", rhsModified), lhsModified, rhsModified)) {
                return false;
            }
        }
        {
            Double lhsWeight;
            lhsWeight = this.getWeight();
            Double rhsWeight;
            rhsWeight = that.getWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            String theTags;
            theTags = this.getTags();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tags", theTags), currentHashCode, theTags);
        }
        {
            Reference theUser;
            theUser = this.getUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "user", theUser), currentHashCode, theUser);
        }
        {
            String theCreator;
            theCreator = this.getCreator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creator", theCreator), currentHashCode, theCreator);
        }
        {
            DesignRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restrictions", theRestrictions), currentHashCode, theRestrictions);
        }
        {
            Dimension theSize;
            theSize = this.getSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "size", theSize), currentHashCode, theSize);
        }
        {
            DesignDTO.Colors theColors;
            theColors = this.getColors();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "colors", theColors), currentHashCode, theColors);
        }
        {
            String theBackgroundColor;
            theBackgroundColor = this.getBackgroundColor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "backgroundColor", theBackgroundColor), currentHashCode, theBackgroundColor);
        }
        {
            DesignDTO.PrintTypes thePrintTypes;
            thePrintTypes = this.getPrintTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printTypes", thePrintTypes), currentHashCode, thePrintTypes);
        }
        {
            DesignDTO.DesignCategories theDesignCategories;
            theDesignCategories = this.getDesignCategories();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designCategories", theDesignCategories), currentHashCode, theDesignCategories);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            DesignDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            XMLGregorianCalendar theCreated;
            theCreated = this.getCreated();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
        }
        {
            XMLGregorianCalendar theModified;
            theModified = this.getModified();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modified", theModified), currentHashCode, theModified);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof DesignDTO) {
            final DesignDTO copy = ((DesignDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.tags!= null) {
                String sourceTags;
                sourceTags = this.getTags();
                String copyTags = ((String) strategy.copy(LocatorUtils.property(locator, "tags", sourceTags), sourceTags));
                copy.setTags(copyTags);
            } else {
                copy.tags = null;
            }
            if (this.user!= null) {
                Reference sourceUser;
                sourceUser = this.getUser();
                Reference copyUser = ((Reference) strategy.copy(LocatorUtils.property(locator, "user", sourceUser), sourceUser));
                copy.setUser(copyUser);
            } else {
                copy.user = null;
            }
            if (this.creator!= null) {
                String sourceCreator;
                sourceCreator = this.getCreator();
                String copyCreator = ((String) strategy.copy(LocatorUtils.property(locator, "creator", sourceCreator), sourceCreator));
                copy.setCreator(copyCreator);
            } else {
                copy.creator = null;
            }
            if (this.restrictions!= null) {
                DesignRestrictionsDTO sourceRestrictions;
                sourceRestrictions = this.getRestrictions();
                DesignRestrictionsDTO copyRestrictions = ((DesignRestrictionsDTO) strategy.copy(LocatorUtils.property(locator, "restrictions", sourceRestrictions), sourceRestrictions));
                copy.setRestrictions(copyRestrictions);
            } else {
                copy.restrictions = null;
            }
            if (this.size!= null) {
                Dimension sourceSize;
                sourceSize = this.getSize();
                Dimension copySize = ((Dimension) strategy.copy(LocatorUtils.property(locator, "size", sourceSize), sourceSize));
                copy.setSize(copySize);
            } else {
                copy.size = null;
            }
            if (this.colors!= null) {
                DesignDTO.Colors sourceColors;
                sourceColors = this.getColors();
                DesignDTO.Colors copyColors = ((DesignDTO.Colors) strategy.copy(LocatorUtils.property(locator, "colors", sourceColors), sourceColors));
                copy.setColors(copyColors);
            } else {
                copy.colors = null;
            }
            if (this.backgroundColor!= null) {
                String sourceBackgroundColor;
                sourceBackgroundColor = this.getBackgroundColor();
                String copyBackgroundColor = ((String) strategy.copy(LocatorUtils.property(locator, "backgroundColor", sourceBackgroundColor), sourceBackgroundColor));
                copy.setBackgroundColor(copyBackgroundColor);
            } else {
                copy.backgroundColor = null;
            }
            if (this.printTypes!= null) {
                DesignDTO.PrintTypes sourcePrintTypes;
                sourcePrintTypes = this.getPrintTypes();
                DesignDTO.PrintTypes copyPrintTypes = ((DesignDTO.PrintTypes) strategy.copy(LocatorUtils.property(locator, "printTypes", sourcePrintTypes), sourcePrintTypes));
                copy.setPrintTypes(copyPrintTypes);
            } else {
                copy.printTypes = null;
            }
            if (this.designCategories!= null) {
                DesignDTO.DesignCategories sourceDesignCategories;
                sourceDesignCategories = this.getDesignCategories();
                DesignDTO.DesignCategories copyDesignCategories = ((DesignDTO.DesignCategories) strategy.copy(LocatorUtils.property(locator, "designCategories", sourceDesignCategories), sourceDesignCategories));
                copy.setDesignCategories(copyDesignCategories);
            } else {
                copy.designCategories = null;
            }
            if (this.price!= null) {
                ElementPrice sourcePrice;
                sourcePrice = this.getPrice();
                ElementPrice copyPrice = ((ElementPrice) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
                copy.setPrice(copyPrice);
            } else {
                copy.price = null;
            }
            if (this.resources!= null) {
                DesignDTO.Resources sourceResources;
                sourceResources = this.getResources();
                DesignDTO.Resources copyResources = ((DesignDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
            if (this.created!= null) {
                XMLGregorianCalendar sourceCreated;
                sourceCreated = this.getCreated();
                XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                copy.setCreated(copyCreated);
            } else {
                copy.created = null;
            }
            if (this.modified!= null) {
                XMLGregorianCalendar sourceModified;
                sourceModified = this.getModified();
                XMLGregorianCalendar copyModified = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "modified", sourceModified), sourceModified));
                copy.setModified(copyModified);
            } else {
                copy.modified = null;
            }
            if (this.weight!= null) {
                Double sourceWeight;
                sourceWeight = this.getWeight();
                Double copyWeight = ((Double) strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight));
                copy.setWeight(copyWeight);
            } else {
                copy.weight = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DesignDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof DesignDTO) {
            final DesignDTO target = this;
            final DesignDTO leftObject = ((DesignDTO) left);
            final DesignDTO rightObject = ((DesignDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                String lhsDescription;
                lhsDescription = leftObject.getDescription();
                String rhsDescription;
                rhsDescription = rightObject.getDescription();
                String mergedDescription = ((String) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription));
                target.setDescription(mergedDescription);
            }
            {
                String lhsTags;
                lhsTags = leftObject.getTags();
                String rhsTags;
                rhsTags = rightObject.getTags();
                String mergedTags = ((String) strategy.merge(LocatorUtils.property(leftLocator, "tags", lhsTags), LocatorUtils.property(rightLocator, "tags", rhsTags), lhsTags, rhsTags));
                target.setTags(mergedTags);
            }
            {
                Reference lhsUser;
                lhsUser = leftObject.getUser();
                Reference rhsUser;
                rhsUser = rightObject.getUser();
                Reference mergedUser = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "user", lhsUser), LocatorUtils.property(rightLocator, "user", rhsUser), lhsUser, rhsUser));
                target.setUser(mergedUser);
            }
            {
                String lhsCreator;
                lhsCreator = leftObject.getCreator();
                String rhsCreator;
                rhsCreator = rightObject.getCreator();
                String mergedCreator = ((String) strategy.merge(LocatorUtils.property(leftLocator, "creator", lhsCreator), LocatorUtils.property(rightLocator, "creator", rhsCreator), lhsCreator, rhsCreator));
                target.setCreator(mergedCreator);
            }
            {
                DesignRestrictionsDTO lhsRestrictions;
                lhsRestrictions = leftObject.getRestrictions();
                DesignRestrictionsDTO rhsRestrictions;
                rhsRestrictions = rightObject.getRestrictions();
                DesignRestrictionsDTO mergedRestrictions = ((DesignRestrictionsDTO) strategy.merge(LocatorUtils.property(leftLocator, "restrictions", lhsRestrictions), LocatorUtils.property(rightLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions));
                target.setRestrictions(mergedRestrictions);
            }
            {
                Dimension lhsSize;
                lhsSize = leftObject.getSize();
                Dimension rhsSize;
                rhsSize = rightObject.getSize();
                Dimension mergedSize = ((Dimension) strategy.merge(LocatorUtils.property(leftLocator, "size", lhsSize), LocatorUtils.property(rightLocator, "size", rhsSize), lhsSize, rhsSize));
                target.setSize(mergedSize);
            }
            {
                DesignDTO.Colors lhsColors;
                lhsColors = leftObject.getColors();
                DesignDTO.Colors rhsColors;
                rhsColors = rightObject.getColors();
                DesignDTO.Colors mergedColors = ((DesignDTO.Colors) strategy.merge(LocatorUtils.property(leftLocator, "colors", lhsColors), LocatorUtils.property(rightLocator, "colors", rhsColors), lhsColors, rhsColors));
                target.setColors(mergedColors);
            }
            {
                String lhsBackgroundColor;
                lhsBackgroundColor = leftObject.getBackgroundColor();
                String rhsBackgroundColor;
                rhsBackgroundColor = rightObject.getBackgroundColor();
                String mergedBackgroundColor = ((String) strategy.merge(LocatorUtils.property(leftLocator, "backgroundColor", lhsBackgroundColor), LocatorUtils.property(rightLocator, "backgroundColor", rhsBackgroundColor), lhsBackgroundColor, rhsBackgroundColor));
                target.setBackgroundColor(mergedBackgroundColor);
            }
            {
                DesignDTO.PrintTypes lhsPrintTypes;
                lhsPrintTypes = leftObject.getPrintTypes();
                DesignDTO.PrintTypes rhsPrintTypes;
                rhsPrintTypes = rightObject.getPrintTypes();
                DesignDTO.PrintTypes mergedPrintTypes = ((DesignDTO.PrintTypes) strategy.merge(LocatorUtils.property(leftLocator, "printTypes", lhsPrintTypes), LocatorUtils.property(rightLocator, "printTypes", rhsPrintTypes), lhsPrintTypes, rhsPrintTypes));
                target.setPrintTypes(mergedPrintTypes);
            }
            {
                DesignDTO.DesignCategories lhsDesignCategories;
                lhsDesignCategories = leftObject.getDesignCategories();
                DesignDTO.DesignCategories rhsDesignCategories;
                rhsDesignCategories = rightObject.getDesignCategories();
                DesignDTO.DesignCategories mergedDesignCategories = ((DesignDTO.DesignCategories) strategy.merge(LocatorUtils.property(leftLocator, "designCategories", lhsDesignCategories), LocatorUtils.property(rightLocator, "designCategories", rhsDesignCategories), lhsDesignCategories, rhsDesignCategories));
                target.setDesignCategories(mergedDesignCategories);
            }
            {
                ElementPrice lhsPrice;
                lhsPrice = leftObject.getPrice();
                ElementPrice rhsPrice;
                rhsPrice = rightObject.getPrice();
                ElementPrice mergedPrice = ((ElementPrice) strategy.merge(LocatorUtils.property(leftLocator, "price", lhsPrice), LocatorUtils.property(rightLocator, "price", rhsPrice), lhsPrice, rhsPrice));
                target.setPrice(mergedPrice);
            }
            {
                DesignDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                DesignDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                DesignDTO.Resources mergedResources = ((DesignDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
            {
                XMLGregorianCalendar lhsCreated;
                lhsCreated = leftObject.getCreated();
                XMLGregorianCalendar rhsCreated;
                rhsCreated = rightObject.getCreated();
                XMLGregorianCalendar mergedCreated = ((XMLGregorianCalendar) strategy.merge(LocatorUtils.property(leftLocator, "created", lhsCreated), LocatorUtils.property(rightLocator, "created", rhsCreated), lhsCreated, rhsCreated));
                target.setCreated(mergedCreated);
            }
            {
                XMLGregorianCalendar lhsModified;
                lhsModified = leftObject.getModified();
                XMLGregorianCalendar rhsModified;
                rhsModified = rightObject.getModified();
                XMLGregorianCalendar mergedModified = ((XMLGregorianCalendar) strategy.merge(LocatorUtils.property(leftLocator, "modified", lhsModified), LocatorUtils.property(rightLocator, "modified", rhsModified), lhsModified, rhsModified));
                target.setModified(mergedModified);
            }
            {
                Double lhsWeight;
                lhsWeight = leftObject.getWeight();
                Double rhsWeight;
                rhsWeight = rightObject.getWeight();
                Double mergedWeight = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "weight", lhsWeight), LocatorUtils.property(rightLocator, "weight", rhsWeight), lhsWeight, rhsWeight));
                target.setWeight(mergedWeight);
            }
        }
    }

    public DesignDTO withName(String value) {
        setName(value);
        return this;
    }

    public DesignDTO withDescription(String value) {
        setDescription(value);
        return this;
    }

    public DesignDTO withTags(String value) {
        setTags(value);
        return this;
    }

    public DesignDTO withUser(Reference value) {
        setUser(value);
        return this;
    }

    public DesignDTO withCreator(String value) {
        setCreator(value);
        return this;
    }

    public DesignDTO withRestrictions(DesignRestrictionsDTO value) {
        setRestrictions(value);
        return this;
    }

    public DesignDTO withSize(Dimension value) {
        setSize(value);
        return this;
    }

    public DesignDTO withColors(DesignDTO.Colors value) {
        setColors(value);
        return this;
    }

    public DesignDTO withBackgroundColor(String value) {
        setBackgroundColor(value);
        return this;
    }

    public DesignDTO withPrintTypes(DesignDTO.PrintTypes value) {
        setPrintTypes(value);
        return this;
    }

    public DesignDTO withDesignCategories(DesignDTO.DesignCategories value) {
        setDesignCategories(value);
        return this;
    }

    public DesignDTO withPrice(ElementPrice value) {
        setPrice(value);
        return this;
    }

    public DesignDTO withResources(DesignDTO.Resources value) {
        setResources(value);
        return this;
    }

    public DesignDTO withCreated(XMLGregorianCalendar value) {
        setCreated(value);
        return this;
    }

    public DesignDTO withModified(XMLGregorianCalendar value) {
        setModified(value);
        return this;
    }

    public DesignDTO withWeight(Double value) {
        setWeight(value);
        return this;
    }

    @Override
    public DesignDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public DesignDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public DesignDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="color" type="{http://api.company.biz}designColorDTO" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "color"
    })
    public static class Colors
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<DesignColorDTO> color;

        /**
         * Gets the value of the color property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the color property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getColor().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link DesignColorDTO }
         * 
         * 
         */
        public List<DesignColorDTO> getColor() {
            if (color == null) {
                color = new ArrayList<DesignColorDTO>();
            }
            return this.color;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<DesignColorDTO> theColor;
                theColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                strategy.appendField(locator, this, "color", buffer, theColor);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DesignDTO.Colors)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DesignDTO.Colors that = ((DesignDTO.Colors) object);
            {
                List<DesignColorDTO> lhsColor;
                lhsColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                List<DesignColorDTO> rhsColor;
                rhsColor = (((that.color!= null)&&(!that.color.isEmpty()))?that.getColor():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "color", lhsColor), LocatorUtils.property(thatLocator, "color", rhsColor), lhsColor, rhsColor)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<DesignColorDTO> theColor;
                theColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "color", theColor), currentHashCode, theColor);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DesignDTO.Colors) {
                final DesignDTO.Colors copy = ((DesignDTO.Colors) draftCopy);
                if ((this.color!= null)&&(!this.color.isEmpty())) {
                    List<DesignColorDTO> sourceColor;
                    sourceColor = (((this.color!= null)&&(!this.color.isEmpty()))?this.getColor():null);
                    @SuppressWarnings("unchecked")
                    List<DesignColorDTO> copyColor = ((List<DesignColorDTO> ) strategy.copy(LocatorUtils.property(locator, "color", sourceColor), sourceColor));
                    copy.color = null;
                    if (copyColor!= null) {
                        List<DesignColorDTO> uniqueColorl = copy.getColor();
                        uniqueColorl.addAll(copyColor);
                    }
                } else {
                    copy.color = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DesignDTO.Colors();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof DesignDTO.Colors) {
                final DesignDTO.Colors target = this;
                final DesignDTO.Colors leftObject = ((DesignDTO.Colors) left);
                final DesignDTO.Colors rightObject = ((DesignDTO.Colors) right);
                {
                    List<DesignColorDTO> lhsColor;
                    lhsColor = (((leftObject.color!= null)&&(!leftObject.color.isEmpty()))?leftObject.getColor():null);
                    List<DesignColorDTO> rhsColor;
                    rhsColor = (((rightObject.color!= null)&&(!rightObject.color.isEmpty()))?rightObject.getColor():null);
                    List<DesignColorDTO> mergedColor = ((List<DesignColorDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "color", lhsColor), LocatorUtils.property(rightLocator, "color", rhsColor), lhsColor, rhsColor));
                    target.color = null;
                    if (mergedColor!= null) {
                        List<DesignColorDTO> uniqueColorl = target.getColor();
                        uniqueColorl.addAll(mergedColor);
                    }
                }
            }
        }

        public DesignDTO.Colors withColor(DesignColorDTO... values) {
            if (values!= null) {
                for (DesignColorDTO value: values) {
                    getColor().add(value);
                }
            }
            return this;
        }

        public DesignDTO.Colors withColor(Collection<DesignColorDTO> values) {
            if (values!= null) {
                getColor().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="designCategory" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "designCategory"
    })
    public static class DesignCategories
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> designCategory;

        /**
         * Gets the value of the designCategory property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the designCategory property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getDesignCategory().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getDesignCategory() {
            if (designCategory == null) {
                designCategory = new ArrayList<Reference>();
            }
            return this.designCategory;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theDesignCategory;
                theDesignCategory = (((this.designCategory!= null)&&(!this.designCategory.isEmpty()))?this.getDesignCategory():null);
                strategy.appendField(locator, this, "designCategory", buffer, theDesignCategory);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DesignDTO.DesignCategories)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DesignDTO.DesignCategories that = ((DesignDTO.DesignCategories) object);
            {
                List<Reference> lhsDesignCategory;
                lhsDesignCategory = (((this.designCategory!= null)&&(!this.designCategory.isEmpty()))?this.getDesignCategory():null);
                List<Reference> rhsDesignCategory;
                rhsDesignCategory = (((that.designCategory!= null)&&(!that.designCategory.isEmpty()))?that.getDesignCategory():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "designCategory", lhsDesignCategory), LocatorUtils.property(thatLocator, "designCategory", rhsDesignCategory), lhsDesignCategory, rhsDesignCategory)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theDesignCategory;
                theDesignCategory = (((this.designCategory!= null)&&(!this.designCategory.isEmpty()))?this.getDesignCategory():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designCategory", theDesignCategory), currentHashCode, theDesignCategory);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DesignDTO.DesignCategories) {
                final DesignDTO.DesignCategories copy = ((DesignDTO.DesignCategories) draftCopy);
                if ((this.designCategory!= null)&&(!this.designCategory.isEmpty())) {
                    List<Reference> sourceDesignCategory;
                    sourceDesignCategory = (((this.designCategory!= null)&&(!this.designCategory.isEmpty()))?this.getDesignCategory():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyDesignCategory = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "designCategory", sourceDesignCategory), sourceDesignCategory));
                    copy.designCategory = null;
                    if (copyDesignCategory!= null) {
                        List<Reference> uniqueDesignCategoryl = copy.getDesignCategory();
                        uniqueDesignCategoryl.addAll(copyDesignCategory);
                    }
                } else {
                    copy.designCategory = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DesignDTO.DesignCategories();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof DesignDTO.DesignCategories) {
                final DesignDTO.DesignCategories target = this;
                final DesignDTO.DesignCategories leftObject = ((DesignDTO.DesignCategories) left);
                final DesignDTO.DesignCategories rightObject = ((DesignDTO.DesignCategories) right);
                {
                    List<Reference> lhsDesignCategory;
                    lhsDesignCategory = (((leftObject.designCategory!= null)&&(!leftObject.designCategory.isEmpty()))?leftObject.getDesignCategory():null);
                    List<Reference> rhsDesignCategory;
                    rhsDesignCategory = (((rightObject.designCategory!= null)&&(!rightObject.designCategory.isEmpty()))?rightObject.getDesignCategory():null);
                    List<Reference> mergedDesignCategory = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "designCategory", lhsDesignCategory), LocatorUtils.property(rightLocator, "designCategory", rhsDesignCategory), lhsDesignCategory, rhsDesignCategory));
                    target.designCategory = null;
                    if (mergedDesignCategory!= null) {
                        List<Reference> uniqueDesignCategoryl = target.getDesignCategory();
                        uniqueDesignCategoryl.addAll(mergedDesignCategory);
                    }
                }
            }
        }

        public DesignDTO.DesignCategories withDesignCategory(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getDesignCategory().add(value);
                }
            }
            return this;
        }

        public DesignDTO.DesignCategories withDesignCategory(Collection<Reference> values) {
            if (values!= null) {
                getDesignCategory().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="printType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "printType"
    })
    public static class PrintTypes
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> printType;

        /**
         * Gets the value of the printType property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the printType property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPrintType().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getPrintType() {
            if (printType == null) {
                printType = new ArrayList<Reference>();
            }
            return this.printType;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> thePrintType;
                thePrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                strategy.appendField(locator, this, "printType", buffer, thePrintType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DesignDTO.PrintTypes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DesignDTO.PrintTypes that = ((DesignDTO.PrintTypes) object);
            {
                List<Reference> lhsPrintType;
                lhsPrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                List<Reference> rhsPrintType;
                rhsPrintType = (((that.printType!= null)&&(!that.printType.isEmpty()))?that.getPrintType():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "printType", lhsPrintType), LocatorUtils.property(thatLocator, "printType", rhsPrintType), lhsPrintType, rhsPrintType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> thePrintType;
                thePrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printType", thePrintType), currentHashCode, thePrintType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DesignDTO.PrintTypes) {
                final DesignDTO.PrintTypes copy = ((DesignDTO.PrintTypes) draftCopy);
                if ((this.printType!= null)&&(!this.printType.isEmpty())) {
                    List<Reference> sourcePrintType;
                    sourcePrintType = (((this.printType!= null)&&(!this.printType.isEmpty()))?this.getPrintType():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyPrintType = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "printType", sourcePrintType), sourcePrintType));
                    copy.printType = null;
                    if (copyPrintType!= null) {
                        List<Reference> uniquePrintTypel = copy.getPrintType();
                        uniquePrintTypel.addAll(copyPrintType);
                    }
                } else {
                    copy.printType = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DesignDTO.PrintTypes();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof DesignDTO.PrintTypes) {
                final DesignDTO.PrintTypes target = this;
                final DesignDTO.PrintTypes leftObject = ((DesignDTO.PrintTypes) left);
                final DesignDTO.PrintTypes rightObject = ((DesignDTO.PrintTypes) right);
                {
                    List<Reference> lhsPrintType;
                    lhsPrintType = (((leftObject.printType!= null)&&(!leftObject.printType.isEmpty()))?leftObject.getPrintType():null);
                    List<Reference> rhsPrintType;
                    rhsPrintType = (((rightObject.printType!= null)&&(!rightObject.printType.isEmpty()))?rightObject.getPrintType():null);
                    List<Reference> mergedPrintType = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "printType", lhsPrintType), LocatorUtils.property(rightLocator, "printType", rhsPrintType), lhsPrintType, rhsPrintType));
                    target.printType = null;
                    if (mergedPrintType!= null) {
                        List<Reference> uniquePrintTypel = target.getPrintType();
                        uniquePrintTypel.addAll(mergedPrintType);
                    }
                }
            }
        }

        public DesignDTO.PrintTypes withPrintType(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getPrintType().add(value);
                }
            }
            return this;
        }

        public DesignDTO.PrintTypes withPrintType(Collection<Reference> values) {
            if (values!= null) {
                getPrintType().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DesignDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DesignDTO.Resources that = ((DesignDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DesignDTO.Resources) {
                final DesignDTO.Resources copy = ((DesignDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DesignDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof DesignDTO.Resources) {
                final DesignDTO.Resources target = this;
                final DesignDTO.Resources leftObject = ((DesignDTO.Resources) left);
                final DesignDTO.Resources rightObject = ((DesignDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public DesignDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public DesignDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }

}
