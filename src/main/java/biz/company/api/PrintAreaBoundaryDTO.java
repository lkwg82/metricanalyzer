//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for printAreaBoundaryDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="printAreaBoundaryDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="size" type="{http://api.company.biz}dimension"/>
 *         &lt;element name="hard" type="{http://api.company.biz}shapeDTO" minOccurs="0"/>
 *         &lt;element name="soft" type="{http://api.company.biz}shapeDTO" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "printAreaBoundaryDTO", propOrder = {
    "size",
    "hard",
    "soft"
})
public class PrintAreaBoundaryDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected Dimension size;
    protected ShapeDTO hard;
    protected ShapeDTO soft;

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link Dimension }
     *     
     */
    public Dimension getSize() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link Dimension }
     *     
     */
    public void setSize(Dimension value) {
        this.size = value;
    }

    /**
     * Gets the value of the hard property.
     * 
     * @return
     *     possible object is
     *     {@link ShapeDTO }
     *     
     */
    public ShapeDTO getHard() {
        return hard;
    }

    /**
     * Sets the value of the hard property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShapeDTO }
     *     
     */
    public void setHard(ShapeDTO value) {
        this.hard = value;
    }

    /**
     * Gets the value of the soft property.
     * 
     * @return
     *     possible object is
     *     {@link ShapeDTO }
     *     
     */
    public ShapeDTO getSoft() {
        return soft;
    }

    /**
     * Sets the value of the soft property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShapeDTO }
     *     
     */
    public void setSoft(ShapeDTO value) {
        this.soft = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Dimension theSize;
            theSize = this.getSize();
            strategy.appendField(locator, this, "size", buffer, theSize);
        }
        {
            ShapeDTO theHard;
            theHard = this.getHard();
            strategy.appendField(locator, this, "hard", buffer, theHard);
        }
        {
            ShapeDTO theSoft;
            theSoft = this.getSoft();
            strategy.appendField(locator, this, "soft", buffer, theSoft);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PrintAreaBoundaryDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PrintAreaBoundaryDTO that = ((PrintAreaBoundaryDTO) object);
        {
            Dimension lhsSize;
            lhsSize = this.getSize();
            Dimension rhsSize;
            rhsSize = that.getSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "size", lhsSize), LocatorUtils.property(thatLocator, "size", rhsSize), lhsSize, rhsSize)) {
                return false;
            }
        }
        {
            ShapeDTO lhsHard;
            lhsHard = this.getHard();
            ShapeDTO rhsHard;
            rhsHard = that.getHard();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hard", lhsHard), LocatorUtils.property(thatLocator, "hard", rhsHard), lhsHard, rhsHard)) {
                return false;
            }
        }
        {
            ShapeDTO lhsSoft;
            lhsSoft = this.getSoft();
            ShapeDTO rhsSoft;
            rhsSoft = that.getSoft();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "soft", lhsSoft), LocatorUtils.property(thatLocator, "soft", rhsSoft), lhsSoft, rhsSoft)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Dimension theSize;
            theSize = this.getSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "size", theSize), currentHashCode, theSize);
        }
        {
            ShapeDTO theHard;
            theHard = this.getHard();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hard", theHard), currentHashCode, theHard);
        }
        {
            ShapeDTO theSoft;
            theSoft = this.getSoft();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "soft", theSoft), currentHashCode, theSoft);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PrintAreaBoundaryDTO) {
            final PrintAreaBoundaryDTO copy = ((PrintAreaBoundaryDTO) draftCopy);
            if (this.size!= null) {
                Dimension sourceSize;
                sourceSize = this.getSize();
                Dimension copySize = ((Dimension) strategy.copy(LocatorUtils.property(locator, "size", sourceSize), sourceSize));
                copy.setSize(copySize);
            } else {
                copy.size = null;
            }
            if (this.hard!= null) {
                ShapeDTO sourceHard;
                sourceHard = this.getHard();
                ShapeDTO copyHard = ((ShapeDTO) strategy.copy(LocatorUtils.property(locator, "hard", sourceHard), sourceHard));
                copy.setHard(copyHard);
            } else {
                copy.hard = null;
            }
            if (this.soft!= null) {
                ShapeDTO sourceSoft;
                sourceSoft = this.getSoft();
                ShapeDTO copySoft = ((ShapeDTO) strategy.copy(LocatorUtils.property(locator, "soft", sourceSoft), sourceSoft));
                copy.setSoft(copySoft);
            } else {
                copy.soft = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PrintAreaBoundaryDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof PrintAreaBoundaryDTO) {
            final PrintAreaBoundaryDTO target = this;
            final PrintAreaBoundaryDTO leftObject = ((PrintAreaBoundaryDTO) left);
            final PrintAreaBoundaryDTO rightObject = ((PrintAreaBoundaryDTO) right);
            {
                Dimension lhsSize;
                lhsSize = leftObject.getSize();
                Dimension rhsSize;
                rhsSize = rightObject.getSize();
                Dimension mergedSize = ((Dimension) strategy.merge(LocatorUtils.property(leftLocator, "size", lhsSize), LocatorUtils.property(rightLocator, "size", rhsSize), lhsSize, rhsSize));
                target.setSize(mergedSize);
            }
            {
                ShapeDTO lhsHard;
                lhsHard = leftObject.getHard();
                ShapeDTO rhsHard;
                rhsHard = rightObject.getHard();
                ShapeDTO mergedHard = ((ShapeDTO) strategy.merge(LocatorUtils.property(leftLocator, "hard", lhsHard), LocatorUtils.property(rightLocator, "hard", rhsHard), lhsHard, rhsHard));
                target.setHard(mergedHard);
            }
            {
                ShapeDTO lhsSoft;
                lhsSoft = leftObject.getSoft();
                ShapeDTO rhsSoft;
                rhsSoft = rightObject.getSoft();
                ShapeDTO mergedSoft = ((ShapeDTO) strategy.merge(LocatorUtils.property(leftLocator, "soft", lhsSoft), LocatorUtils.property(rightLocator, "soft", rhsSoft), lhsSoft, rhsSoft));
                target.setSoft(mergedSoft);
            }
        }
    }

    public PrintAreaBoundaryDTO withSize(Dimension value) {
        setSize(value);
        return this;
    }

    public PrintAreaBoundaryDTO withHard(ShapeDTO value) {
        setHard(value);
        return this;
    }

    public PrintAreaBoundaryDTO withSoft(ShapeDTO value) {
        setSoft(value);
        return this;
    }

}
