//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productTypeSizeDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productTypeSizeDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="measures" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}measure" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productTypeSizeDTO", propOrder = {
    "name",
    "measures"
})
public class ProductTypeSizeDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected String name;
    protected ProductTypeSizeDTO.Measures measures;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the measures property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeSizeDTO.Measures }
     *     
     */
    public ProductTypeSizeDTO.Measures getMeasures() {
        return measures;
    }

    /**
     * Sets the value of the measures property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeSizeDTO.Measures }
     *     
     */
    public void setMeasures(ProductTypeSizeDTO.Measures value) {
        this.measures = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            ProductTypeSizeDTO.Measures theMeasures;
            theMeasures = this.getMeasures();
            strategy.appendField(locator, this, "measures", buffer, theMeasures);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductTypeSizeDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductTypeSizeDTO that = ((ProductTypeSizeDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            ProductTypeSizeDTO.Measures lhsMeasures;
            lhsMeasures = this.getMeasures();
            ProductTypeSizeDTO.Measures rhsMeasures;
            rhsMeasures = that.getMeasures();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measures", lhsMeasures), LocatorUtils.property(thatLocator, "measures", rhsMeasures), lhsMeasures, rhsMeasures)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            ProductTypeSizeDTO.Measures theMeasures;
            theMeasures = this.getMeasures();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measures", theMeasures), currentHashCode, theMeasures);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductTypeSizeDTO) {
            final ProductTypeSizeDTO copy = ((ProductTypeSizeDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.measures!= null) {
                ProductTypeSizeDTO.Measures sourceMeasures;
                sourceMeasures = this.getMeasures();
                ProductTypeSizeDTO.Measures copyMeasures = ((ProductTypeSizeDTO.Measures) strategy.copy(LocatorUtils.property(locator, "measures", sourceMeasures), sourceMeasures));
                copy.setMeasures(copyMeasures);
            } else {
                copy.measures = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductTypeSizeDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductTypeSizeDTO) {
            final ProductTypeSizeDTO target = this;
            final ProductTypeSizeDTO leftObject = ((ProductTypeSizeDTO) left);
            final ProductTypeSizeDTO rightObject = ((ProductTypeSizeDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                ProductTypeSizeDTO.Measures lhsMeasures;
                lhsMeasures = leftObject.getMeasures();
                ProductTypeSizeDTO.Measures rhsMeasures;
                rhsMeasures = rightObject.getMeasures();
                ProductTypeSizeDTO.Measures mergedMeasures = ((ProductTypeSizeDTO.Measures) strategy.merge(LocatorUtils.property(leftLocator, "measures", lhsMeasures), LocatorUtils.property(rightLocator, "measures", rhsMeasures), lhsMeasures, rhsMeasures));
                target.setMeasures(mergedMeasures);
            }
        }
    }

    public ProductTypeSizeDTO withName(String value) {
        setName(value);
        return this;
    }

    public ProductTypeSizeDTO withMeasures(ProductTypeSizeDTO.Measures value) {
        setMeasures(value);
        return this;
    }

    @Override
    public ProductTypeSizeDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProductTypeSizeDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductTypeSizeDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}measure" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "measure"
    })
    public static class Measures
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeSizeMeasureDTO> measure;

        /**
         * Gets the value of the measure property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the measure property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getMeasure().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeSizeMeasureDTO }
         * 
         * 
         */
        public List<ProductTypeSizeMeasureDTO> getMeasure() {
            if (measure == null) {
                measure = new ArrayList<ProductTypeSizeMeasureDTO>();
            }
            return this.measure;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeSizeMeasureDTO> theMeasure;
                theMeasure = (((this.measure!= null)&&(!this.measure.isEmpty()))?this.getMeasure():null);
                strategy.appendField(locator, this, "measure", buffer, theMeasure);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeSizeDTO.Measures)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeSizeDTO.Measures that = ((ProductTypeSizeDTO.Measures) object);
            {
                List<ProductTypeSizeMeasureDTO> lhsMeasure;
                lhsMeasure = (((this.measure!= null)&&(!this.measure.isEmpty()))?this.getMeasure():null);
                List<ProductTypeSizeMeasureDTO> rhsMeasure;
                rhsMeasure = (((that.measure!= null)&&(!that.measure.isEmpty()))?that.getMeasure():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "measure", lhsMeasure), LocatorUtils.property(thatLocator, "measure", rhsMeasure), lhsMeasure, rhsMeasure)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeSizeMeasureDTO> theMeasure;
                theMeasure = (((this.measure!= null)&&(!this.measure.isEmpty()))?this.getMeasure():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measure", theMeasure), currentHashCode, theMeasure);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeSizeDTO.Measures) {
                final ProductTypeSizeDTO.Measures copy = ((ProductTypeSizeDTO.Measures) draftCopy);
                if ((this.measure!= null)&&(!this.measure.isEmpty())) {
                    List<ProductTypeSizeMeasureDTO> sourceMeasure;
                    sourceMeasure = (((this.measure!= null)&&(!this.measure.isEmpty()))?this.getMeasure():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeSizeMeasureDTO> copyMeasure = ((List<ProductTypeSizeMeasureDTO> ) strategy.copy(LocatorUtils.property(locator, "measure", sourceMeasure), sourceMeasure));
                    copy.measure = null;
                    if (copyMeasure!= null) {
                        List<ProductTypeSizeMeasureDTO> uniqueMeasurel = copy.getMeasure();
                        uniqueMeasurel.addAll(copyMeasure);
                    }
                } else {
                    copy.measure = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeSizeDTO.Measures();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeSizeDTO.Measures) {
                final ProductTypeSizeDTO.Measures target = this;
                final ProductTypeSizeDTO.Measures leftObject = ((ProductTypeSizeDTO.Measures) left);
                final ProductTypeSizeDTO.Measures rightObject = ((ProductTypeSizeDTO.Measures) right);
                {
                    List<ProductTypeSizeMeasureDTO> lhsMeasure;
                    lhsMeasure = (((leftObject.measure!= null)&&(!leftObject.measure.isEmpty()))?leftObject.getMeasure():null);
                    List<ProductTypeSizeMeasureDTO> rhsMeasure;
                    rhsMeasure = (((rightObject.measure!= null)&&(!rightObject.measure.isEmpty()))?rightObject.getMeasure():null);
                    List<ProductTypeSizeMeasureDTO> mergedMeasure = ((List<ProductTypeSizeMeasureDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "measure", lhsMeasure), LocatorUtils.property(rightLocator, "measure", rhsMeasure), lhsMeasure, rhsMeasure));
                    target.measure = null;
                    if (mergedMeasure!= null) {
                        List<ProductTypeSizeMeasureDTO> uniqueMeasurel = target.getMeasure();
                        uniqueMeasurel.addAll(mergedMeasure);
                    }
                }
            }
        }

        public ProductTypeSizeDTO.Measures withMeasure(ProductTypeSizeMeasureDTO... values) {
            if (values!= null) {
                for (ProductTypeSizeMeasureDTO value: values) {
                    getMeasure().add(value);
                }
            }
            return this;
        }

        public ProductTypeSizeDTO.Measures withMeasure(Collection<ProductTypeSizeMeasureDTO> values) {
            if (values!= null) {
                getMeasure().addAll(values);
            }
            return this;
        }

    }

}
