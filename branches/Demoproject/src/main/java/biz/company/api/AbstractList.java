//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for abstractList complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="abstractList">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="facets" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}facet" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute ref="{http://www.w3.org/1999/xlink}href"/>
 *       &lt;attribute name="offset" use="required" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="limit" use="required" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="count" use="required" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="sortField" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="sortOrder" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="query" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="suggestedQuery" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="executedQuery" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="ungroupedCount" type="{http://www.w3.org/2001/XMLSchema}long" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "abstractList", propOrder = {
    "facets"
})
@XmlSeeAlso({
    ProductTypeSizeDTOList.class,
    CountryDTOList.class,
    LanguageDTOList.class,
    ShopDTOList.class,
    BasketItemDTOList.class,
    ApplicationDTOList.class,
    PrintTypeDTOList.class,
    ProductTypeCategoryDTOList.class,
    ArticleCategoryDTOList.class,
    ShippingTypeDTOList.class,
    PrintColorDTOList.class,
    FontFamilyDTOList.class,
    CurrencyDTOList.class,
    DesignDTOList.class,
    ProductTypeDepartmentDTOList.class,
    ProductDTOList.class,
    ArticleDTOList.class,
    DesignCategoryDTOList.class,
    ProductTypeAppearanceDTOList.class,
    ProductTypeDTOList.class
})
public abstract class AbstractList
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected AbstractList.Facets facets;
    @XmlAttribute(name = "href", namespace = "http://www.w3.org/1999/xlink")
    protected String href;
    @XmlAttribute(name = "offset", required = true)
    protected long offset;
    @XmlAttribute(name = "limit", required = true)
    protected long limit;
    @XmlAttribute(name = "count", required = true)
    protected long count;
    @XmlAttribute(name = "sortField")
    protected String sortField;
    @XmlAttribute(name = "sortOrder")
    protected String sortOrder;
    @XmlAttribute(name = "query")
    protected String query;
    @XmlAttribute(name = "suggestedQuery")
    protected String suggestedQuery;
    @XmlAttribute(name = "executedQuery")
    protected String executedQuery;
    @XmlAttribute(name = "ungroupedCount")
    protected Long ungroupedCount;

    /**
     * Gets the value of the facets property.
     * 
     * @return
     *     possible object is
     *     {@link AbstractList.Facets }
     *     
     */
    public AbstractList.Facets getFacets() {
        return facets;
    }

    /**
     * Sets the value of the facets property.
     * 
     * @param value
     *     allowed object is
     *     {@link AbstractList.Facets }
     *     
     */
    public void setFacets(AbstractList.Facets value) {
        this.facets = value;
    }

    /**
     * Gets the value of the href property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHref() {
        return href;
    }

    /**
     * Sets the value of the href property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHref(String value) {
        this.href = value;
    }

    /**
     * Gets the value of the offset property.
     * 
     */
    public long getOffset() {
        return offset;
    }

    /**
     * Sets the value of the offset property.
     * 
     */
    public void setOffset(long value) {
        this.offset = value;
    }

    /**
     * Gets the value of the limit property.
     * 
     */
    public long getLimit() {
        return limit;
    }

    /**
     * Sets the value of the limit property.
     * 
     */
    public void setLimit(long value) {
        this.limit = value;
    }

    /**
     * Gets the value of the count property.
     * 
     */
    public long getCount() {
        return count;
    }

    /**
     * Sets the value of the count property.
     * 
     */
    public void setCount(long value) {
        this.count = value;
    }

    /**
     * Gets the value of the sortField property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSortField() {
        return sortField;
    }

    /**
     * Sets the value of the sortField property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSortField(String value) {
        this.sortField = value;
    }

    /**
     * Gets the value of the sortOrder property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSortOrder() {
        return sortOrder;
    }

    /**
     * Sets the value of the sortOrder property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSortOrder(String value) {
        this.sortOrder = value;
    }

    /**
     * Gets the value of the query property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuery() {
        return query;
    }

    /**
     * Sets the value of the query property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setQuery(String value) {
        this.query = value;
    }

    /**
     * Gets the value of the suggestedQuery property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSuggestedQuery() {
        return suggestedQuery;
    }

    /**
     * Sets the value of the suggestedQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSuggestedQuery(String value) {
        this.suggestedQuery = value;
    }

    /**
     * Gets the value of the executedQuery property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getExecutedQuery() {
        return executedQuery;
    }

    /**
     * Sets the value of the executedQuery property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setExecutedQuery(String value) {
        this.executedQuery = value;
    }

    /**
     * Gets the value of the ungroupedCount property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getUngroupedCount() {
        return ungroupedCount;
    }

    /**
     * Sets the value of the ungroupedCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setUngroupedCount(Long value) {
        this.ungroupedCount = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            AbstractList.Facets theFacets;
            theFacets = this.getFacets();
            strategy.appendField(locator, this, "facets", buffer, theFacets);
        }
        {
            String theHref;
            theHref = this.getHref();
            strategy.appendField(locator, this, "href", buffer, theHref);
        }
        {
            long theOffset;
            theOffset = (true?this.getOffset(): 0L);
            strategy.appendField(locator, this, "offset", buffer, theOffset);
        }
        {
            long theLimit;
            theLimit = (true?this.getLimit(): 0L);
            strategy.appendField(locator, this, "limit", buffer, theLimit);
        }
        {
            long theCount;
            theCount = (true?this.getCount(): 0L);
            strategy.appendField(locator, this, "count", buffer, theCount);
        }
        {
            String theSortField;
            theSortField = this.getSortField();
            strategy.appendField(locator, this, "sortField", buffer, theSortField);
        }
        {
            String theSortOrder;
            theSortOrder = this.getSortOrder();
            strategy.appendField(locator, this, "sortOrder", buffer, theSortOrder);
        }
        {
            String theQuery;
            theQuery = this.getQuery();
            strategy.appendField(locator, this, "query", buffer, theQuery);
        }
        {
            String theSuggestedQuery;
            theSuggestedQuery = this.getSuggestedQuery();
            strategy.appendField(locator, this, "suggestedQuery", buffer, theSuggestedQuery);
        }
        {
            String theExecutedQuery;
            theExecutedQuery = this.getExecutedQuery();
            strategy.appendField(locator, this, "executedQuery", buffer, theExecutedQuery);
        }
        {
            Long theUngroupedCount;
            theUngroupedCount = this.getUngroupedCount();
            strategy.appendField(locator, this, "ungroupedCount", buffer, theUngroupedCount);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractList)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AbstractList that = ((AbstractList) object);
        {
            AbstractList.Facets lhsFacets;
            lhsFacets = this.getFacets();
            AbstractList.Facets rhsFacets;
            rhsFacets = that.getFacets();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "facets", lhsFacets), LocatorUtils.property(thatLocator, "facets", rhsFacets), lhsFacets, rhsFacets)) {
                return false;
            }
        }
        {
            String lhsHref;
            lhsHref = this.getHref();
            String rhsHref;
            rhsHref = that.getHref();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "href", lhsHref), LocatorUtils.property(thatLocator, "href", rhsHref), lhsHref, rhsHref)) {
                return false;
            }
        }
        {
            long lhsOffset;
            lhsOffset = (true?this.getOffset(): 0L);
            long rhsOffset;
            rhsOffset = (true?that.getOffset(): 0L);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offset", lhsOffset), LocatorUtils.property(thatLocator, "offset", rhsOffset), lhsOffset, rhsOffset)) {
                return false;
            }
        }
        {
            long lhsLimit;
            lhsLimit = (true?this.getLimit(): 0L);
            long rhsLimit;
            rhsLimit = (true?that.getLimit(): 0L);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "limit", lhsLimit), LocatorUtils.property(thatLocator, "limit", rhsLimit), lhsLimit, rhsLimit)) {
                return false;
            }
        }
        {
            long lhsCount;
            lhsCount = (true?this.getCount(): 0L);
            long rhsCount;
            rhsCount = (true?that.getCount(): 0L);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "count", lhsCount), LocatorUtils.property(thatLocator, "count", rhsCount), lhsCount, rhsCount)) {
                return false;
            }
        }
        {
            String lhsSortField;
            lhsSortField = this.getSortField();
            String rhsSortField;
            rhsSortField = that.getSortField();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sortField", lhsSortField), LocatorUtils.property(thatLocator, "sortField", rhsSortField), lhsSortField, rhsSortField)) {
                return false;
            }
        }
        {
            String lhsSortOrder;
            lhsSortOrder = this.getSortOrder();
            String rhsSortOrder;
            rhsSortOrder = that.getSortOrder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sortOrder", lhsSortOrder), LocatorUtils.property(thatLocator, "sortOrder", rhsSortOrder), lhsSortOrder, rhsSortOrder)) {
                return false;
            }
        }
        {
            String lhsQuery;
            lhsQuery = this.getQuery();
            String rhsQuery;
            rhsQuery = that.getQuery();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "query", lhsQuery), LocatorUtils.property(thatLocator, "query", rhsQuery), lhsQuery, rhsQuery)) {
                return false;
            }
        }
        {
            String lhsSuggestedQuery;
            lhsSuggestedQuery = this.getSuggestedQuery();
            String rhsSuggestedQuery;
            rhsSuggestedQuery = that.getSuggestedQuery();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "suggestedQuery", lhsSuggestedQuery), LocatorUtils.property(thatLocator, "suggestedQuery", rhsSuggestedQuery), lhsSuggestedQuery, rhsSuggestedQuery)) {
                return false;
            }
        }
        {
            String lhsExecutedQuery;
            lhsExecutedQuery = this.getExecutedQuery();
            String rhsExecutedQuery;
            rhsExecutedQuery = that.getExecutedQuery();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "executedQuery", lhsExecutedQuery), LocatorUtils.property(thatLocator, "executedQuery", rhsExecutedQuery), lhsExecutedQuery, rhsExecutedQuery)) {
                return false;
            }
        }
        {
            Long lhsUngroupedCount;
            lhsUngroupedCount = this.getUngroupedCount();
            Long rhsUngroupedCount;
            rhsUngroupedCount = that.getUngroupedCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ungroupedCount", lhsUngroupedCount), LocatorUtils.property(thatLocator, "ungroupedCount", rhsUngroupedCount), lhsUngroupedCount, rhsUngroupedCount)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            AbstractList.Facets theFacets;
            theFacets = this.getFacets();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "facets", theFacets), currentHashCode, theFacets);
        }
        {
            String theHref;
            theHref = this.getHref();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "href", theHref), currentHashCode, theHref);
        }
        {
            long theOffset;
            theOffset = (true?this.getOffset(): 0L);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offset", theOffset), currentHashCode, theOffset);
        }
        {
            long theLimit;
            theLimit = (true?this.getLimit(): 0L);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "limit", theLimit), currentHashCode, theLimit);
        }
        {
            long theCount;
            theCount = (true?this.getCount(): 0L);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "count", theCount), currentHashCode, theCount);
        }
        {
            String theSortField;
            theSortField = this.getSortField();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sortField", theSortField), currentHashCode, theSortField);
        }
        {
            String theSortOrder;
            theSortOrder = this.getSortOrder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sortOrder", theSortOrder), currentHashCode, theSortOrder);
        }
        {
            String theQuery;
            theQuery = this.getQuery();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "query", theQuery), currentHashCode, theQuery);
        }
        {
            String theSuggestedQuery;
            theSuggestedQuery = this.getSuggestedQuery();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "suggestedQuery", theSuggestedQuery), currentHashCode, theSuggestedQuery);
        }
        {
            String theExecutedQuery;
            theExecutedQuery = this.getExecutedQuery();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "executedQuery", theExecutedQuery), currentHashCode, theExecutedQuery);
        }
        {
            Long theUngroupedCount;
            theUngroupedCount = this.getUngroupedCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ungroupedCount", theUngroupedCount), currentHashCode, theUngroupedCount);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        if (target instanceof AbstractList) {
            final AbstractList copy = ((AbstractList) target);
            if (this.facets!= null) {
                AbstractList.Facets sourceFacets;
                sourceFacets = this.getFacets();
                AbstractList.Facets copyFacets = ((AbstractList.Facets) strategy.copy(LocatorUtils.property(locator, "facets", sourceFacets), sourceFacets));
                copy.setFacets(copyFacets);
            } else {
                copy.facets = null;
            }
            if (this.href!= null) {
                String sourceHref;
                sourceHref = this.getHref();
                String copyHref = ((String) strategy.copy(LocatorUtils.property(locator, "href", sourceHref), sourceHref));
                copy.setHref(copyHref);
            } else {
                copy.href = null;
            }
            long sourceOffset;
            sourceOffset = (true?this.getOffset(): 0L);
            long copyOffset = strategy.copy(LocatorUtils.property(locator, "offset", sourceOffset), sourceOffset);
            copy.setOffset(copyOffset);
            long sourceLimit;
            sourceLimit = (true?this.getLimit(): 0L);
            long copyLimit = strategy.copy(LocatorUtils.property(locator, "limit", sourceLimit), sourceLimit);
            copy.setLimit(copyLimit);
            long sourceCount;
            sourceCount = (true?this.getCount(): 0L);
            long copyCount = strategy.copy(LocatorUtils.property(locator, "count", sourceCount), sourceCount);
            copy.setCount(copyCount);
            if (this.sortField!= null) {
                String sourceSortField;
                sourceSortField = this.getSortField();
                String copySortField = ((String) strategy.copy(LocatorUtils.property(locator, "sortField", sourceSortField), sourceSortField));
                copy.setSortField(copySortField);
            } else {
                copy.sortField = null;
            }
            if (this.sortOrder!= null) {
                String sourceSortOrder;
                sourceSortOrder = this.getSortOrder();
                String copySortOrder = ((String) strategy.copy(LocatorUtils.property(locator, "sortOrder", sourceSortOrder), sourceSortOrder));
                copy.setSortOrder(copySortOrder);
            } else {
                copy.sortOrder = null;
            }
            if (this.query!= null) {
                String sourceQuery;
                sourceQuery = this.getQuery();
                String copyQuery = ((String) strategy.copy(LocatorUtils.property(locator, "query", sourceQuery), sourceQuery));
                copy.setQuery(copyQuery);
            } else {
                copy.query = null;
            }
            if (this.suggestedQuery!= null) {
                String sourceSuggestedQuery;
                sourceSuggestedQuery = this.getSuggestedQuery();
                String copySuggestedQuery = ((String) strategy.copy(LocatorUtils.property(locator, "suggestedQuery", sourceSuggestedQuery), sourceSuggestedQuery));
                copy.setSuggestedQuery(copySuggestedQuery);
            } else {
                copy.suggestedQuery = null;
            }
            if (this.executedQuery!= null) {
                String sourceExecutedQuery;
                sourceExecutedQuery = this.getExecutedQuery();
                String copyExecutedQuery = ((String) strategy.copy(LocatorUtils.property(locator, "executedQuery", sourceExecutedQuery), sourceExecutedQuery));
                copy.setExecutedQuery(copyExecutedQuery);
            } else {
                copy.executedQuery = null;
            }
            if (this.ungroupedCount!= null) {
                Long sourceUngroupedCount;
                sourceUngroupedCount = this.getUngroupedCount();
                Long copyUngroupedCount = ((Long) strategy.copy(LocatorUtils.property(locator, "ungroupedCount", sourceUngroupedCount), sourceUngroupedCount));
                copy.setUngroupedCount(copyUngroupedCount);
            } else {
                copy.ungroupedCount = null;
            }
        }
        return target;
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof AbstractList) {
            final AbstractList target = this;
            final AbstractList leftObject = ((AbstractList) left);
            final AbstractList rightObject = ((AbstractList) right);
            {
                AbstractList.Facets lhsFacets;
                lhsFacets = leftObject.getFacets();
                AbstractList.Facets rhsFacets;
                rhsFacets = rightObject.getFacets();
                AbstractList.Facets mergedFacets = ((AbstractList.Facets) strategy.merge(LocatorUtils.property(leftLocator, "facets", lhsFacets), LocatorUtils.property(rightLocator, "facets", rhsFacets), lhsFacets, rhsFacets));
                target.setFacets(mergedFacets);
            }
            {
                String lhsHref;
                lhsHref = leftObject.getHref();
                String rhsHref;
                rhsHref = rightObject.getHref();
                String mergedHref = ((String) strategy.merge(LocatorUtils.property(leftLocator, "href", lhsHref), LocatorUtils.property(rightLocator, "href", rhsHref), lhsHref, rhsHref));
                target.setHref(mergedHref);
            }
            {
                long lhsOffset;
                lhsOffset = (true?leftObject.getOffset(): 0L);
                long rhsOffset;
                rhsOffset = (true?rightObject.getOffset(): 0L);
                long mergedOffset = ((long) strategy.merge(LocatorUtils.property(leftLocator, "offset", lhsOffset), LocatorUtils.property(rightLocator, "offset", rhsOffset), lhsOffset, rhsOffset));
                target.setOffset(mergedOffset);
            }
            {
                long lhsLimit;
                lhsLimit = (true?leftObject.getLimit(): 0L);
                long rhsLimit;
                rhsLimit = (true?rightObject.getLimit(): 0L);
                long mergedLimit = ((long) strategy.merge(LocatorUtils.property(leftLocator, "limit", lhsLimit), LocatorUtils.property(rightLocator, "limit", rhsLimit), lhsLimit, rhsLimit));
                target.setLimit(mergedLimit);
            }
            {
                long lhsCount;
                lhsCount = (true?leftObject.getCount(): 0L);
                long rhsCount;
                rhsCount = (true?rightObject.getCount(): 0L);
                long mergedCount = ((long) strategy.merge(LocatorUtils.property(leftLocator, "count", lhsCount), LocatorUtils.property(rightLocator, "count", rhsCount), lhsCount, rhsCount));
                target.setCount(mergedCount);
            }
            {
                String lhsSortField;
                lhsSortField = leftObject.getSortField();
                String rhsSortField;
                rhsSortField = rightObject.getSortField();
                String mergedSortField = ((String) strategy.merge(LocatorUtils.property(leftLocator, "sortField", lhsSortField), LocatorUtils.property(rightLocator, "sortField", rhsSortField), lhsSortField, rhsSortField));
                target.setSortField(mergedSortField);
            }
            {
                String lhsSortOrder;
                lhsSortOrder = leftObject.getSortOrder();
                String rhsSortOrder;
                rhsSortOrder = rightObject.getSortOrder();
                String mergedSortOrder = ((String) strategy.merge(LocatorUtils.property(leftLocator, "sortOrder", lhsSortOrder), LocatorUtils.property(rightLocator, "sortOrder", rhsSortOrder), lhsSortOrder, rhsSortOrder));
                target.setSortOrder(mergedSortOrder);
            }
            {
                String lhsQuery;
                lhsQuery = leftObject.getQuery();
                String rhsQuery;
                rhsQuery = rightObject.getQuery();
                String mergedQuery = ((String) strategy.merge(LocatorUtils.property(leftLocator, "query", lhsQuery), LocatorUtils.property(rightLocator, "query", rhsQuery), lhsQuery, rhsQuery));
                target.setQuery(mergedQuery);
            }
            {
                String lhsSuggestedQuery;
                lhsSuggestedQuery = leftObject.getSuggestedQuery();
                String rhsSuggestedQuery;
                rhsSuggestedQuery = rightObject.getSuggestedQuery();
                String mergedSuggestedQuery = ((String) strategy.merge(LocatorUtils.property(leftLocator, "suggestedQuery", lhsSuggestedQuery), LocatorUtils.property(rightLocator, "suggestedQuery", rhsSuggestedQuery), lhsSuggestedQuery, rhsSuggestedQuery));
                target.setSuggestedQuery(mergedSuggestedQuery);
            }
            {
                String lhsExecutedQuery;
                lhsExecutedQuery = leftObject.getExecutedQuery();
                String rhsExecutedQuery;
                rhsExecutedQuery = rightObject.getExecutedQuery();
                String mergedExecutedQuery = ((String) strategy.merge(LocatorUtils.property(leftLocator, "executedQuery", lhsExecutedQuery), LocatorUtils.property(rightLocator, "executedQuery", rhsExecutedQuery), lhsExecutedQuery, rhsExecutedQuery));
                target.setExecutedQuery(mergedExecutedQuery);
            }
            {
                Long lhsUngroupedCount;
                lhsUngroupedCount = leftObject.getUngroupedCount();
                Long rhsUngroupedCount;
                rhsUngroupedCount = rightObject.getUngroupedCount();
                Long mergedUngroupedCount = ((Long) strategy.merge(LocatorUtils.property(leftLocator, "ungroupedCount", lhsUngroupedCount), LocatorUtils.property(rightLocator, "ungroupedCount", rhsUngroupedCount), lhsUngroupedCount, rhsUngroupedCount));
                target.setUngroupedCount(mergedUngroupedCount);
            }
        }
    }

    public AbstractList withFacets(AbstractList.Facets value) {
        setFacets(value);
        return this;
    }

    public AbstractList withHref(String value) {
        setHref(value);
        return this;
    }

    public AbstractList withOffset(long value) {
        setOffset(value);
        return this;
    }

    public AbstractList withLimit(long value) {
        setLimit(value);
        return this;
    }

    public AbstractList withCount(long value) {
        setCount(value);
        return this;
    }

    public AbstractList withSortField(String value) {
        setSortField(value);
        return this;
    }

    public AbstractList withSortOrder(String value) {
        setSortOrder(value);
        return this;
    }

    public AbstractList withQuery(String value) {
        setQuery(value);
        return this;
    }

    public AbstractList withSuggestedQuery(String value) {
        setSuggestedQuery(value);
        return this;
    }

    public AbstractList withExecutedQuery(String value) {
        setExecutedQuery(value);
        return this;
    }

    public AbstractList withUngroupedCount(Long value) {
        setUngroupedCount(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}facet" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "facet"
    })
    public static class Facets
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<FacetDTO> facet;

        /**
         * Gets the value of the facet property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the facet property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFacet().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FacetDTO }
         * 
         * 
         */
        public List<FacetDTO> getFacet() {
            if (facet == null) {
                facet = new ArrayList<FacetDTO>();
            }
            return this.facet;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<FacetDTO> theFacet;
                theFacet = (((this.facet!= null)&&(!this.facet.isEmpty()))?this.getFacet():null);
                strategy.appendField(locator, this, "facet", buffer, theFacet);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AbstractList.Facets)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AbstractList.Facets that = ((AbstractList.Facets) object);
            {
                List<FacetDTO> lhsFacet;
                lhsFacet = (((this.facet!= null)&&(!this.facet.isEmpty()))?this.getFacet():null);
                List<FacetDTO> rhsFacet;
                rhsFacet = (((that.facet!= null)&&(!that.facet.isEmpty()))?that.getFacet():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "facet", lhsFacet), LocatorUtils.property(thatLocator, "facet", rhsFacet), lhsFacet, rhsFacet)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<FacetDTO> theFacet;
                theFacet = (((this.facet!= null)&&(!this.facet.isEmpty()))?this.getFacet():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "facet", theFacet), currentHashCode, theFacet);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AbstractList.Facets) {
                final AbstractList.Facets copy = ((AbstractList.Facets) draftCopy);
                if ((this.facet!= null)&&(!this.facet.isEmpty())) {
                    List<FacetDTO> sourceFacet;
                    sourceFacet = (((this.facet!= null)&&(!this.facet.isEmpty()))?this.getFacet():null);
                    @SuppressWarnings("unchecked")
                    List<FacetDTO> copyFacet = ((List<FacetDTO> ) strategy.copy(LocatorUtils.property(locator, "facet", sourceFacet), sourceFacet));
                    copy.facet = null;
                    if (copyFacet!= null) {
                        List<FacetDTO> uniqueFacetl = copy.getFacet();
                        uniqueFacetl.addAll(copyFacet);
                    }
                } else {
                    copy.facet = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AbstractList.Facets();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof AbstractList.Facets) {
                final AbstractList.Facets target = this;
                final AbstractList.Facets leftObject = ((AbstractList.Facets) left);
                final AbstractList.Facets rightObject = ((AbstractList.Facets) right);
                {
                    List<FacetDTO> lhsFacet;
                    lhsFacet = (((leftObject.facet!= null)&&(!leftObject.facet.isEmpty()))?leftObject.getFacet():null);
                    List<FacetDTO> rhsFacet;
                    rhsFacet = (((rightObject.facet!= null)&&(!rightObject.facet.isEmpty()))?rightObject.getFacet():null);
                    List<FacetDTO> mergedFacet = ((List<FacetDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "facet", lhsFacet), LocatorUtils.property(rightLocator, "facet", rhsFacet), lhsFacet, rhsFacet));
                    target.facet = null;
                    if (mergedFacet!= null) {
                        List<FacetDTO> uniqueFacetl = target.getFacet();
                        uniqueFacetl.addAll(mergedFacet);
                    }
                }
            }
        }

        public AbstractList.Facets withFacet(FacetDTO... values) {
            if (values!= null) {
                for (FacetDTO value: values) {
                    getFacet().add(value);
                }
            }
            return this;
        }

        public AbstractList.Facets withFacet(Collection<FacetDTO> values) {
            if (values!= null) {
                getFacet().addAll(values);
            }
            return this;
        }

    }

}
