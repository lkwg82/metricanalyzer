//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productTypeViewMapDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productTypeViewMapDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="transformations" type="{http://api.company.biz}transformationDTO" minOccurs="0"/>
 *         &lt;element name="printAreaClippingShape" type="{http://api.company.biz}shapeDTO" minOccurs="0"/>
 *         &lt;element name="printArea" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="offset" type="{http://api.company.biz}point" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productTypeViewMapDTO", propOrder = {
    "transformations",
    "printAreaClippingShape",
    "printArea",
    "offset"
})
public class ProductTypeViewMapDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String transformations;
    protected ShapeDTO printAreaClippingShape;
    protected Reference printArea;
    protected Point offset;

    /**
     * Gets the value of the transformations property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransformations() {
        return transformations;
    }

    /**
     * Sets the value of the transformations property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransformations(String value) {
        this.transformations = value;
    }

    /**
     * Gets the value of the printAreaClippingShape property.
     * 
     * @return
     *     possible object is
     *     {@link ShapeDTO }
     *     
     */
    public ShapeDTO getPrintAreaClippingShape() {
        return printAreaClippingShape;
    }

    /**
     * Sets the value of the printAreaClippingShape property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShapeDTO }
     *     
     */
    public void setPrintAreaClippingShape(ShapeDTO value) {
        this.printAreaClippingShape = value;
    }

    /**
     * Gets the value of the printArea property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getPrintArea() {
        return printArea;
    }

    /**
     * Sets the value of the printArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setPrintArea(Reference value) {
        this.printArea = value;
    }

    /**
     * Gets the value of the offset property.
     * 
     * @return
     *     possible object is
     *     {@link Point }
     *     
     */
    public Point getOffset() {
        return offset;
    }

    /**
     * Sets the value of the offset property.
     * 
     * @param value
     *     allowed object is
     *     {@link Point }
     *     
     */
    public void setOffset(Point value) {
        this.offset = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theTransformations;
            theTransformations = this.getTransformations();
            strategy.appendField(locator, this, "transformations", buffer, theTransformations);
        }
        {
            ShapeDTO thePrintAreaClippingShape;
            thePrintAreaClippingShape = this.getPrintAreaClippingShape();
            strategy.appendField(locator, this, "printAreaClippingShape", buffer, thePrintAreaClippingShape);
        }
        {
            Reference thePrintArea;
            thePrintArea = this.getPrintArea();
            strategy.appendField(locator, this, "printArea", buffer, thePrintArea);
        }
        {
            Point theOffset;
            theOffset = this.getOffset();
            strategy.appendField(locator, this, "offset", buffer, theOffset);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductTypeViewMapDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ProductTypeViewMapDTO that = ((ProductTypeViewMapDTO) object);
        {
            String lhsTransformations;
            lhsTransformations = this.getTransformations();
            String rhsTransformations;
            rhsTransformations = that.getTransformations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transformations", lhsTransformations), LocatorUtils.property(thatLocator, "transformations", rhsTransformations), lhsTransformations, rhsTransformations)) {
                return false;
            }
        }
        {
            ShapeDTO lhsPrintAreaClippingShape;
            lhsPrintAreaClippingShape = this.getPrintAreaClippingShape();
            ShapeDTO rhsPrintAreaClippingShape;
            rhsPrintAreaClippingShape = that.getPrintAreaClippingShape();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printAreaClippingShape", lhsPrintAreaClippingShape), LocatorUtils.property(thatLocator, "printAreaClippingShape", rhsPrintAreaClippingShape), lhsPrintAreaClippingShape, rhsPrintAreaClippingShape)) {
                return false;
            }
        }
        {
            Reference lhsPrintArea;
            lhsPrintArea = this.getPrintArea();
            Reference rhsPrintArea;
            rhsPrintArea = that.getPrintArea();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printArea", lhsPrintArea), LocatorUtils.property(thatLocator, "printArea", rhsPrintArea), lhsPrintArea, rhsPrintArea)) {
                return false;
            }
        }
        {
            Point lhsOffset;
            lhsOffset = this.getOffset();
            Point rhsOffset;
            rhsOffset = that.getOffset();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offset", lhsOffset), LocatorUtils.property(thatLocator, "offset", rhsOffset), lhsOffset, rhsOffset)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theTransformations;
            theTransformations = this.getTransformations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transformations", theTransformations), currentHashCode, theTransformations);
        }
        {
            ShapeDTO thePrintAreaClippingShape;
            thePrintAreaClippingShape = this.getPrintAreaClippingShape();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printAreaClippingShape", thePrintAreaClippingShape), currentHashCode, thePrintAreaClippingShape);
        }
        {
            Reference thePrintArea;
            thePrintArea = this.getPrintArea();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printArea", thePrintArea), currentHashCode, thePrintArea);
        }
        {
            Point theOffset;
            theOffset = this.getOffset();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offset", theOffset), currentHashCode, theOffset);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ProductTypeViewMapDTO) {
            final ProductTypeViewMapDTO copy = ((ProductTypeViewMapDTO) draftCopy);
            if (this.transformations!= null) {
                String sourceTransformations;
                sourceTransformations = this.getTransformations();
                String copyTransformations = ((String) strategy.copy(LocatorUtils.property(locator, "transformations", sourceTransformations), sourceTransformations));
                copy.setTransformations(copyTransformations);
            } else {
                copy.transformations = null;
            }
            if (this.printAreaClippingShape!= null) {
                ShapeDTO sourcePrintAreaClippingShape;
                sourcePrintAreaClippingShape = this.getPrintAreaClippingShape();
                ShapeDTO copyPrintAreaClippingShape = ((ShapeDTO) strategy.copy(LocatorUtils.property(locator, "printAreaClippingShape", sourcePrintAreaClippingShape), sourcePrintAreaClippingShape));
                copy.setPrintAreaClippingShape(copyPrintAreaClippingShape);
            } else {
                copy.printAreaClippingShape = null;
            }
            if (this.printArea!= null) {
                Reference sourcePrintArea;
                sourcePrintArea = this.getPrintArea();
                Reference copyPrintArea = ((Reference) strategy.copy(LocatorUtils.property(locator, "printArea", sourcePrintArea), sourcePrintArea));
                copy.setPrintArea(copyPrintArea);
            } else {
                copy.printArea = null;
            }
            if (this.offset!= null) {
                Point sourceOffset;
                sourceOffset = this.getOffset();
                Point copyOffset = ((Point) strategy.copy(LocatorUtils.property(locator, "offset", sourceOffset), sourceOffset));
                copy.setOffset(copyOffset);
            } else {
                copy.offset = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductTypeViewMapDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof ProductTypeViewMapDTO) {
            final ProductTypeViewMapDTO target = this;
            final ProductTypeViewMapDTO leftObject = ((ProductTypeViewMapDTO) left);
            final ProductTypeViewMapDTO rightObject = ((ProductTypeViewMapDTO) right);
            {
                String lhsTransformations;
                lhsTransformations = leftObject.getTransformations();
                String rhsTransformations;
                rhsTransformations = rightObject.getTransformations();
                String mergedTransformations = ((String) strategy.merge(LocatorUtils.property(leftLocator, "transformations", lhsTransformations), LocatorUtils.property(rightLocator, "transformations", rhsTransformations), lhsTransformations, rhsTransformations));
                target.setTransformations(mergedTransformations);
            }
            {
                ShapeDTO lhsPrintAreaClippingShape;
                lhsPrintAreaClippingShape = leftObject.getPrintAreaClippingShape();
                ShapeDTO rhsPrintAreaClippingShape;
                rhsPrintAreaClippingShape = rightObject.getPrintAreaClippingShape();
                ShapeDTO mergedPrintAreaClippingShape = ((ShapeDTO) strategy.merge(LocatorUtils.property(leftLocator, "printAreaClippingShape", lhsPrintAreaClippingShape), LocatorUtils.property(rightLocator, "printAreaClippingShape", rhsPrintAreaClippingShape), lhsPrintAreaClippingShape, rhsPrintAreaClippingShape));
                target.setPrintAreaClippingShape(mergedPrintAreaClippingShape);
            }
            {
                Reference lhsPrintArea;
                lhsPrintArea = leftObject.getPrintArea();
                Reference rhsPrintArea;
                rhsPrintArea = rightObject.getPrintArea();
                Reference mergedPrintArea = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "printArea", lhsPrintArea), LocatorUtils.property(rightLocator, "printArea", rhsPrintArea), lhsPrintArea, rhsPrintArea));
                target.setPrintArea(mergedPrintArea);
            }
            {
                Point lhsOffset;
                lhsOffset = leftObject.getOffset();
                Point rhsOffset;
                rhsOffset = rightObject.getOffset();
                Point mergedOffset = ((Point) strategy.merge(LocatorUtils.property(leftLocator, "offset", lhsOffset), LocatorUtils.property(rightLocator, "offset", rhsOffset), lhsOffset, rhsOffset));
                target.setOffset(mergedOffset);
            }
        }
    }

    public ProductTypeViewMapDTO withTransformations(String value) {
        setTransformations(value);
        return this;
    }

    public ProductTypeViewMapDTO withPrintAreaClippingShape(ShapeDTO value) {
        setPrintAreaClippingShape(value);
        return this;
    }

    public ProductTypeViewMapDTO withPrintArea(Reference value) {
        setPrintArea(value);
        return this;
    }

    public ProductTypeViewMapDTO withOffset(Point value) {
        setOffset(value);
        return this;
    }

}
