//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for configurationDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="configurationDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="printArea" type="{http://api.company.biz}reference"/>
 *         &lt;element name="printType" type="{http://api.company.biz}reference"/>
 *         &lt;element name="offset" type="{http://api.company.biz}point"/>
 *         &lt;element name="content" type="{http://api.company.biz}configurationContentDTO"/>
 *         &lt;element name="fontFamilies" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="fontFamily" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="designs" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="design" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="restrictions" type="{http://api.company.biz}configurationRestrictionsDTO" minOccurs="0"/>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="type" use="required" type="{http://api.company.biz}configurationType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "configurationDTO", propOrder = {
    "printArea",
    "printType",
    "offset",
    "content",
    "fontFamilies",
    "designs",
    "restrictions",
    "resources"
})
public class ConfigurationDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected Reference printArea;
    @XmlElement(required = true)
    protected Reference printType;
    @XmlElement(required = true)
    protected Point offset;
    @XmlElement(required = true)
    protected ConfigurationContentDTO content;
    protected ConfigurationDTO.FontFamilies fontFamilies;
    protected ConfigurationDTO.Designs designs;
    protected ConfigurationRestrictionsDTO restrictions;
    protected ConfigurationDTO.Resources resources;
    @XmlAttribute(name = "type", required = true)
    protected ConfigurationType type;

    /**
     * Gets the value of the printArea property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getPrintArea() {
        return printArea;
    }

    /**
     * Sets the value of the printArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setPrintArea(Reference value) {
        this.printArea = value;
    }

    /**
     * Gets the value of the printType property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getPrintType() {
        return printType;
    }

    /**
     * Sets the value of the printType property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setPrintType(Reference value) {
        this.printType = value;
    }

    /**
     * Gets the value of the offset property.
     * 
     * @return
     *     possible object is
     *     {@link Point }
     *     
     */
    public Point getOffset() {
        return offset;
    }

    /**
     * Sets the value of the offset property.
     * 
     * @param value
     *     allowed object is
     *     {@link Point }
     *     
     */
    public void setOffset(Point value) {
        this.offset = value;
    }

    /**
     * Gets the value of the content property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurationContentDTO }
     *     
     */
    public ConfigurationContentDTO getContent() {
        return content;
    }

    /**
     * Sets the value of the content property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurationContentDTO }
     *     
     */
    public void setContent(ConfigurationContentDTO value) {
        this.content = value;
    }

    /**
     * Gets the value of the fontFamilies property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurationDTO.FontFamilies }
     *     
     */
    public ConfigurationDTO.FontFamilies getFontFamilies() {
        return fontFamilies;
    }

    /**
     * Sets the value of the fontFamilies property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurationDTO.FontFamilies }
     *     
     */
    public void setFontFamilies(ConfigurationDTO.FontFamilies value) {
        this.fontFamilies = value;
    }

    /**
     * Gets the value of the designs property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurationDTO.Designs }
     *     
     */
    public ConfigurationDTO.Designs getDesigns() {
        return designs;
    }

    /**
     * Sets the value of the designs property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurationDTO.Designs }
     *     
     */
    public void setDesigns(ConfigurationDTO.Designs value) {
        this.designs = value;
    }

    /**
     * Gets the value of the restrictions property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurationRestrictionsDTO }
     *     
     */
    public ConfigurationRestrictionsDTO getRestrictions() {
        return restrictions;
    }

    /**
     * Sets the value of the restrictions property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurationRestrictionsDTO }
     *     
     */
    public void setRestrictions(ConfigurationRestrictionsDTO value) {
        this.restrictions = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurationDTO.Resources }
     *     
     */
    public ConfigurationDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurationDTO.Resources }
     *     
     */
    public void setResources(ConfigurationDTO.Resources value) {
        this.resources = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link ConfigurationType }
     *     
     */
    public ConfigurationType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConfigurationType }
     *     
     */
    public void setType(ConfigurationType value) {
        this.type = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Reference thePrintArea;
            thePrintArea = this.getPrintArea();
            strategy.appendField(locator, this, "printArea", buffer, thePrintArea);
        }
        {
            Reference thePrintType;
            thePrintType = this.getPrintType();
            strategy.appendField(locator, this, "printType", buffer, thePrintType);
        }
        {
            Point theOffset;
            theOffset = this.getOffset();
            strategy.appendField(locator, this, "offset", buffer, theOffset);
        }
        {
            ConfigurationContentDTO theContent;
            theContent = this.getContent();
            strategy.appendField(locator, this, "content", buffer, theContent);
        }
        {
            ConfigurationDTO.FontFamilies theFontFamilies;
            theFontFamilies = this.getFontFamilies();
            strategy.appendField(locator, this, "fontFamilies", buffer, theFontFamilies);
        }
        {
            ConfigurationDTO.Designs theDesigns;
            theDesigns = this.getDesigns();
            strategy.appendField(locator, this, "designs", buffer, theDesigns);
        }
        {
            ConfigurationRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            strategy.appendField(locator, this, "restrictions", buffer, theRestrictions);
        }
        {
            ConfigurationDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            ConfigurationType theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConfigurationDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConfigurationDTO that = ((ConfigurationDTO) object);
        {
            Reference lhsPrintArea;
            lhsPrintArea = this.getPrintArea();
            Reference rhsPrintArea;
            rhsPrintArea = that.getPrintArea();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printArea", lhsPrintArea), LocatorUtils.property(thatLocator, "printArea", rhsPrintArea), lhsPrintArea, rhsPrintArea)) {
                return false;
            }
        }
        {
            Reference lhsPrintType;
            lhsPrintType = this.getPrintType();
            Reference rhsPrintType;
            rhsPrintType = that.getPrintType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printType", lhsPrintType), LocatorUtils.property(thatLocator, "printType", rhsPrintType), lhsPrintType, rhsPrintType)) {
                return false;
            }
        }
        {
            Point lhsOffset;
            lhsOffset = this.getOffset();
            Point rhsOffset;
            rhsOffset = that.getOffset();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "offset", lhsOffset), LocatorUtils.property(thatLocator, "offset", rhsOffset), lhsOffset, rhsOffset)) {
                return false;
            }
        }
        {
            ConfigurationContentDTO lhsContent;
            lhsContent = this.getContent();
            ConfigurationContentDTO rhsContent;
            rhsContent = that.getContent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                return false;
            }
        }
        {
            ConfigurationDTO.FontFamilies lhsFontFamilies;
            lhsFontFamilies = this.getFontFamilies();
            ConfigurationDTO.FontFamilies rhsFontFamilies;
            rhsFontFamilies = that.getFontFamilies();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fontFamilies", lhsFontFamilies), LocatorUtils.property(thatLocator, "fontFamilies", rhsFontFamilies), lhsFontFamilies, rhsFontFamilies)) {
                return false;
            }
        }
        {
            ConfigurationDTO.Designs lhsDesigns;
            lhsDesigns = this.getDesigns();
            ConfigurationDTO.Designs rhsDesigns;
            rhsDesigns = that.getDesigns();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "designs", lhsDesigns), LocatorUtils.property(thatLocator, "designs", rhsDesigns), lhsDesigns, rhsDesigns)) {
                return false;
            }
        }
        {
            ConfigurationRestrictionsDTO lhsRestrictions;
            lhsRestrictions = this.getRestrictions();
            ConfigurationRestrictionsDTO rhsRestrictions;
            rhsRestrictions = that.getRestrictions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restrictions", lhsRestrictions), LocatorUtils.property(thatLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions)) {
                return false;
            }
        }
        {
            ConfigurationDTO.Resources lhsResources;
            lhsResources = this.getResources();
            ConfigurationDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            ConfigurationType lhsType;
            lhsType = this.getType();
            ConfigurationType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Reference thePrintArea;
            thePrintArea = this.getPrintArea();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printArea", thePrintArea), currentHashCode, thePrintArea);
        }
        {
            Reference thePrintType;
            thePrintType = this.getPrintType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printType", thePrintType), currentHashCode, thePrintType);
        }
        {
            Point theOffset;
            theOffset = this.getOffset();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "offset", theOffset), currentHashCode, theOffset);
        }
        {
            ConfigurationContentDTO theContent;
            theContent = this.getContent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
        }
        {
            ConfigurationDTO.FontFamilies theFontFamilies;
            theFontFamilies = this.getFontFamilies();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontFamilies", theFontFamilies), currentHashCode, theFontFamilies);
        }
        {
            ConfigurationDTO.Designs theDesigns;
            theDesigns = this.getDesigns();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designs", theDesigns), currentHashCode, theDesigns);
        }
        {
            ConfigurationRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restrictions", theRestrictions), currentHashCode, theRestrictions);
        }
        {
            ConfigurationDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            ConfigurationType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ConfigurationDTO) {
            final ConfigurationDTO copy = ((ConfigurationDTO) draftCopy);
            if (this.printArea!= null) {
                Reference sourcePrintArea;
                sourcePrintArea = this.getPrintArea();
                Reference copyPrintArea = ((Reference) strategy.copy(LocatorUtils.property(locator, "printArea", sourcePrintArea), sourcePrintArea));
                copy.setPrintArea(copyPrintArea);
            } else {
                copy.printArea = null;
            }
            if (this.printType!= null) {
                Reference sourcePrintType;
                sourcePrintType = this.getPrintType();
                Reference copyPrintType = ((Reference) strategy.copy(LocatorUtils.property(locator, "printType", sourcePrintType), sourcePrintType));
                copy.setPrintType(copyPrintType);
            } else {
                copy.printType = null;
            }
            if (this.offset!= null) {
                Point sourceOffset;
                sourceOffset = this.getOffset();
                Point copyOffset = ((Point) strategy.copy(LocatorUtils.property(locator, "offset", sourceOffset), sourceOffset));
                copy.setOffset(copyOffset);
            } else {
                copy.offset = null;
            }
            if (this.content!= null) {
                ConfigurationContentDTO sourceContent;
                sourceContent = this.getContent();
                ConfigurationContentDTO copyContent = ((ConfigurationContentDTO) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                copy.setContent(copyContent);
            } else {
                copy.content = null;
            }
            if (this.fontFamilies!= null) {
                ConfigurationDTO.FontFamilies sourceFontFamilies;
                sourceFontFamilies = this.getFontFamilies();
                ConfigurationDTO.FontFamilies copyFontFamilies = ((ConfigurationDTO.FontFamilies) strategy.copy(LocatorUtils.property(locator, "fontFamilies", sourceFontFamilies), sourceFontFamilies));
                copy.setFontFamilies(copyFontFamilies);
            } else {
                copy.fontFamilies = null;
            }
            if (this.designs!= null) {
                ConfigurationDTO.Designs sourceDesigns;
                sourceDesigns = this.getDesigns();
                ConfigurationDTO.Designs copyDesigns = ((ConfigurationDTO.Designs) strategy.copy(LocatorUtils.property(locator, "designs", sourceDesigns), sourceDesigns));
                copy.setDesigns(copyDesigns);
            } else {
                copy.designs = null;
            }
            if (this.restrictions!= null) {
                ConfigurationRestrictionsDTO sourceRestrictions;
                sourceRestrictions = this.getRestrictions();
                ConfigurationRestrictionsDTO copyRestrictions = ((ConfigurationRestrictionsDTO) strategy.copy(LocatorUtils.property(locator, "restrictions", sourceRestrictions), sourceRestrictions));
                copy.setRestrictions(copyRestrictions);
            } else {
                copy.restrictions = null;
            }
            if (this.resources!= null) {
                ConfigurationDTO.Resources sourceResources;
                sourceResources = this.getResources();
                ConfigurationDTO.Resources copyResources = ((ConfigurationDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
            if (this.type!= null) {
                ConfigurationType sourceType;
                sourceType = this.getType();
                ConfigurationType copyType = ((ConfigurationType) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ConfigurationDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ConfigurationDTO) {
            final ConfigurationDTO target = this;
            final ConfigurationDTO leftObject = ((ConfigurationDTO) left);
            final ConfigurationDTO rightObject = ((ConfigurationDTO) right);
            {
                Reference lhsPrintArea;
                lhsPrintArea = leftObject.getPrintArea();
                Reference rhsPrintArea;
                rhsPrintArea = rightObject.getPrintArea();
                Reference mergedPrintArea = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "printArea", lhsPrintArea), LocatorUtils.property(rightLocator, "printArea", rhsPrintArea), lhsPrintArea, rhsPrintArea));
                target.setPrintArea(mergedPrintArea);
            }
            {
                Reference lhsPrintType;
                lhsPrintType = leftObject.getPrintType();
                Reference rhsPrintType;
                rhsPrintType = rightObject.getPrintType();
                Reference mergedPrintType = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "printType", lhsPrintType), LocatorUtils.property(rightLocator, "printType", rhsPrintType), lhsPrintType, rhsPrintType));
                target.setPrintType(mergedPrintType);
            }
            {
                Point lhsOffset;
                lhsOffset = leftObject.getOffset();
                Point rhsOffset;
                rhsOffset = rightObject.getOffset();
                Point mergedOffset = ((Point) strategy.merge(LocatorUtils.property(leftLocator, "offset", lhsOffset), LocatorUtils.property(rightLocator, "offset", rhsOffset), lhsOffset, rhsOffset));
                target.setOffset(mergedOffset);
            }
            {
                ConfigurationContentDTO lhsContent;
                lhsContent = leftObject.getContent();
                ConfigurationContentDTO rhsContent;
                rhsContent = rightObject.getContent();
                ConfigurationContentDTO mergedContent = ((ConfigurationContentDTO) strategy.merge(LocatorUtils.property(leftLocator, "content", lhsContent), LocatorUtils.property(rightLocator, "content", rhsContent), lhsContent, rhsContent));
                target.setContent(mergedContent);
            }
            {
                ConfigurationDTO.FontFamilies lhsFontFamilies;
                lhsFontFamilies = leftObject.getFontFamilies();
                ConfigurationDTO.FontFamilies rhsFontFamilies;
                rhsFontFamilies = rightObject.getFontFamilies();
                ConfigurationDTO.FontFamilies mergedFontFamilies = ((ConfigurationDTO.FontFamilies) strategy.merge(LocatorUtils.property(leftLocator, "fontFamilies", lhsFontFamilies), LocatorUtils.property(rightLocator, "fontFamilies", rhsFontFamilies), lhsFontFamilies, rhsFontFamilies));
                target.setFontFamilies(mergedFontFamilies);
            }
            {
                ConfigurationDTO.Designs lhsDesigns;
                lhsDesigns = leftObject.getDesigns();
                ConfigurationDTO.Designs rhsDesigns;
                rhsDesigns = rightObject.getDesigns();
                ConfigurationDTO.Designs mergedDesigns = ((ConfigurationDTO.Designs) strategy.merge(LocatorUtils.property(leftLocator, "designs", lhsDesigns), LocatorUtils.property(rightLocator, "designs", rhsDesigns), lhsDesigns, rhsDesigns));
                target.setDesigns(mergedDesigns);
            }
            {
                ConfigurationRestrictionsDTO lhsRestrictions;
                lhsRestrictions = leftObject.getRestrictions();
                ConfigurationRestrictionsDTO rhsRestrictions;
                rhsRestrictions = rightObject.getRestrictions();
                ConfigurationRestrictionsDTO mergedRestrictions = ((ConfigurationRestrictionsDTO) strategy.merge(LocatorUtils.property(leftLocator, "restrictions", lhsRestrictions), LocatorUtils.property(rightLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions));
                target.setRestrictions(mergedRestrictions);
            }
            {
                ConfigurationDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                ConfigurationDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                ConfigurationDTO.Resources mergedResources = ((ConfigurationDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
            {
                ConfigurationType lhsType;
                lhsType = leftObject.getType();
                ConfigurationType rhsType;
                rhsType = rightObject.getType();
                ConfigurationType mergedType = ((ConfigurationType) strategy.merge(LocatorUtils.property(leftLocator, "type", lhsType), LocatorUtils.property(rightLocator, "type", rhsType), lhsType, rhsType));
                target.setType(mergedType);
            }
        }
    }

    public ConfigurationDTO withPrintArea(Reference value) {
        setPrintArea(value);
        return this;
    }

    public ConfigurationDTO withPrintType(Reference value) {
        setPrintType(value);
        return this;
    }

    public ConfigurationDTO withOffset(Point value) {
        setOffset(value);
        return this;
    }

    public ConfigurationDTO withContent(ConfigurationContentDTO value) {
        setContent(value);
        return this;
    }

    public ConfigurationDTO withFontFamilies(ConfigurationDTO.FontFamilies value) {
        setFontFamilies(value);
        return this;
    }

    public ConfigurationDTO withDesigns(ConfigurationDTO.Designs value) {
        setDesigns(value);
        return this;
    }

    public ConfigurationDTO withRestrictions(ConfigurationRestrictionsDTO value) {
        setRestrictions(value);
        return this;
    }

    public ConfigurationDTO withResources(ConfigurationDTO.Resources value) {
        setResources(value);
        return this;
    }

    public ConfigurationDTO withType(ConfigurationType value) {
        setType(value);
        return this;
    }

    @Override
    public ConfigurationDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ConfigurationDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ConfigurationDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="design" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "design"
    })
    public static class Designs
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> design;

        /**
         * Gets the value of the design property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the design property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getDesign().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getDesign() {
            if (design == null) {
                design = new ArrayList<Reference>();
            }
            return this.design;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theDesign;
                theDesign = (((this.design!= null)&&(!this.design.isEmpty()))?this.getDesign():null);
                strategy.appendField(locator, this, "design", buffer, theDesign);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ConfigurationDTO.Designs)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ConfigurationDTO.Designs that = ((ConfigurationDTO.Designs) object);
            {
                List<Reference> lhsDesign;
                lhsDesign = (((this.design!= null)&&(!this.design.isEmpty()))?this.getDesign():null);
                List<Reference> rhsDesign;
                rhsDesign = (((that.design!= null)&&(!that.design.isEmpty()))?that.getDesign():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "design", lhsDesign), LocatorUtils.property(thatLocator, "design", rhsDesign), lhsDesign, rhsDesign)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theDesign;
                theDesign = (((this.design!= null)&&(!this.design.isEmpty()))?this.getDesign():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "design", theDesign), currentHashCode, theDesign);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ConfigurationDTO.Designs) {
                final ConfigurationDTO.Designs copy = ((ConfigurationDTO.Designs) draftCopy);
                if ((this.design!= null)&&(!this.design.isEmpty())) {
                    List<Reference> sourceDesign;
                    sourceDesign = (((this.design!= null)&&(!this.design.isEmpty()))?this.getDesign():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyDesign = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "design", sourceDesign), sourceDesign));
                    copy.design = null;
                    if (copyDesign!= null) {
                        List<Reference> uniqueDesignl = copy.getDesign();
                        uniqueDesignl.addAll(copyDesign);
                    }
                } else {
                    copy.design = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ConfigurationDTO.Designs();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ConfigurationDTO.Designs) {
                final ConfigurationDTO.Designs target = this;
                final ConfigurationDTO.Designs leftObject = ((ConfigurationDTO.Designs) left);
                final ConfigurationDTO.Designs rightObject = ((ConfigurationDTO.Designs) right);
                {
                    List<Reference> lhsDesign;
                    lhsDesign = (((leftObject.design!= null)&&(!leftObject.design.isEmpty()))?leftObject.getDesign():null);
                    List<Reference> rhsDesign;
                    rhsDesign = (((rightObject.design!= null)&&(!rightObject.design.isEmpty()))?rightObject.getDesign():null);
                    List<Reference> mergedDesign = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "design", lhsDesign), LocatorUtils.property(rightLocator, "design", rhsDesign), lhsDesign, rhsDesign));
                    target.design = null;
                    if (mergedDesign!= null) {
                        List<Reference> uniqueDesignl = target.getDesign();
                        uniqueDesignl.addAll(mergedDesign);
                    }
                }
            }
        }

        public ConfigurationDTO.Designs withDesign(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getDesign().add(value);
                }
            }
            return this;
        }

        public ConfigurationDTO.Designs withDesign(Collection<Reference> values) {
            if (values!= null) {
                getDesign().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="fontFamily" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fontFamily"
    })
    public static class FontFamilies
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> fontFamily;

        /**
         * Gets the value of the fontFamily property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fontFamily property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFontFamily().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getFontFamily() {
            if (fontFamily == null) {
                fontFamily = new ArrayList<Reference>();
            }
            return this.fontFamily;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theFontFamily;
                theFontFamily = (((this.fontFamily!= null)&&(!this.fontFamily.isEmpty()))?this.getFontFamily():null);
                strategy.appendField(locator, this, "fontFamily", buffer, theFontFamily);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ConfigurationDTO.FontFamilies)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ConfigurationDTO.FontFamilies that = ((ConfigurationDTO.FontFamilies) object);
            {
                List<Reference> lhsFontFamily;
                lhsFontFamily = (((this.fontFamily!= null)&&(!this.fontFamily.isEmpty()))?this.getFontFamily():null);
                List<Reference> rhsFontFamily;
                rhsFontFamily = (((that.fontFamily!= null)&&(!that.fontFamily.isEmpty()))?that.getFontFamily():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fontFamily", lhsFontFamily), LocatorUtils.property(thatLocator, "fontFamily", rhsFontFamily), lhsFontFamily, rhsFontFamily)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theFontFamily;
                theFontFamily = (((this.fontFamily!= null)&&(!this.fontFamily.isEmpty()))?this.getFontFamily():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fontFamily", theFontFamily), currentHashCode, theFontFamily);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ConfigurationDTO.FontFamilies) {
                final ConfigurationDTO.FontFamilies copy = ((ConfigurationDTO.FontFamilies) draftCopy);
                if ((this.fontFamily!= null)&&(!this.fontFamily.isEmpty())) {
                    List<Reference> sourceFontFamily;
                    sourceFontFamily = (((this.fontFamily!= null)&&(!this.fontFamily.isEmpty()))?this.getFontFamily():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyFontFamily = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "fontFamily", sourceFontFamily), sourceFontFamily));
                    copy.fontFamily = null;
                    if (copyFontFamily!= null) {
                        List<Reference> uniqueFontFamilyl = copy.getFontFamily();
                        uniqueFontFamilyl.addAll(copyFontFamily);
                    }
                } else {
                    copy.fontFamily = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ConfigurationDTO.FontFamilies();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ConfigurationDTO.FontFamilies) {
                final ConfigurationDTO.FontFamilies target = this;
                final ConfigurationDTO.FontFamilies leftObject = ((ConfigurationDTO.FontFamilies) left);
                final ConfigurationDTO.FontFamilies rightObject = ((ConfigurationDTO.FontFamilies) right);
                {
                    List<Reference> lhsFontFamily;
                    lhsFontFamily = (((leftObject.fontFamily!= null)&&(!leftObject.fontFamily.isEmpty()))?leftObject.getFontFamily():null);
                    List<Reference> rhsFontFamily;
                    rhsFontFamily = (((rightObject.fontFamily!= null)&&(!rightObject.fontFamily.isEmpty()))?rightObject.getFontFamily():null);
                    List<Reference> mergedFontFamily = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "fontFamily", lhsFontFamily), LocatorUtils.property(rightLocator, "fontFamily", rhsFontFamily), lhsFontFamily, rhsFontFamily));
                    target.fontFamily = null;
                    if (mergedFontFamily!= null) {
                        List<Reference> uniqueFontFamilyl = target.getFontFamily();
                        uniqueFontFamilyl.addAll(mergedFontFamily);
                    }
                }
            }
        }

        public ConfigurationDTO.FontFamilies withFontFamily(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getFontFamily().add(value);
                }
            }
            return this;
        }

        public ConfigurationDTO.FontFamilies withFontFamily(Collection<Reference> values) {
            if (values!= null) {
                getFontFamily().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ConfigurationDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ConfigurationDTO.Resources that = ((ConfigurationDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ConfigurationDTO.Resources) {
                final ConfigurationDTO.Resources copy = ((ConfigurationDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ConfigurationDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ConfigurationDTO.Resources) {
                final ConfigurationDTO.Resources target = this;
                final ConfigurationDTO.Resources leftObject = ((ConfigurationDTO.Resources) left);
                final ConfigurationDTO.Resources rightObject = ((ConfigurationDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public ConfigurationDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public ConfigurationDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }

}
