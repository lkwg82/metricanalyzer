//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for printAreaRestrictionsDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="printAreaRestrictionsDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="textAllowed" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="designAllowed" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="excludedPrintTypes" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="excludedPrintType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "printAreaRestrictionsDTO", propOrder = {
    "textAllowed",
    "designAllowed",
    "excludedPrintTypes"
})
public class PrintAreaRestrictionsDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected boolean textAllowed;
    protected boolean designAllowed;
    protected PrintAreaRestrictionsDTO.ExcludedPrintTypes excludedPrintTypes;

    /**
     * Gets the value of the textAllowed property.
     * 
     */
    public boolean isTextAllowed() {
        return textAllowed;
    }

    /**
     * Sets the value of the textAllowed property.
     * 
     */
    public void setTextAllowed(boolean value) {
        this.textAllowed = value;
    }

    /**
     * Gets the value of the designAllowed property.
     * 
     */
    public boolean isDesignAllowed() {
        return designAllowed;
    }

    /**
     * Sets the value of the designAllowed property.
     * 
     */
    public void setDesignAllowed(boolean value) {
        this.designAllowed = value;
    }

    /**
     * Gets the value of the excludedPrintTypes property.
     * 
     * @return
     *     possible object is
     *     {@link PrintAreaRestrictionsDTO.ExcludedPrintTypes }
     *     
     */
    public PrintAreaRestrictionsDTO.ExcludedPrintTypes getExcludedPrintTypes() {
        return excludedPrintTypes;
    }

    /**
     * Sets the value of the excludedPrintTypes property.
     * 
     * @param value
     *     allowed object is
     *     {@link PrintAreaRestrictionsDTO.ExcludedPrintTypes }
     *     
     */
    public void setExcludedPrintTypes(PrintAreaRestrictionsDTO.ExcludedPrintTypes value) {
        this.excludedPrintTypes = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            boolean theTextAllowed;
            theTextAllowed = (true?this.isTextAllowed():false);
            strategy.appendField(locator, this, "textAllowed", buffer, theTextAllowed);
        }
        {
            boolean theDesignAllowed;
            theDesignAllowed = (true?this.isDesignAllowed():false);
            strategy.appendField(locator, this, "designAllowed", buffer, theDesignAllowed);
        }
        {
            PrintAreaRestrictionsDTO.ExcludedPrintTypes theExcludedPrintTypes;
            theExcludedPrintTypes = this.getExcludedPrintTypes();
            strategy.appendField(locator, this, "excludedPrintTypes", buffer, theExcludedPrintTypes);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PrintAreaRestrictionsDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PrintAreaRestrictionsDTO that = ((PrintAreaRestrictionsDTO) object);
        {
            boolean lhsTextAllowed;
            lhsTextAllowed = (true?this.isTextAllowed():false);
            boolean rhsTextAllowed;
            rhsTextAllowed = (true?that.isTextAllowed():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textAllowed", lhsTextAllowed), LocatorUtils.property(thatLocator, "textAllowed", rhsTextAllowed), lhsTextAllowed, rhsTextAllowed)) {
                return false;
            }
        }
        {
            boolean lhsDesignAllowed;
            lhsDesignAllowed = (true?this.isDesignAllowed():false);
            boolean rhsDesignAllowed;
            rhsDesignAllowed = (true?that.isDesignAllowed():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "designAllowed", lhsDesignAllowed), LocatorUtils.property(thatLocator, "designAllowed", rhsDesignAllowed), lhsDesignAllowed, rhsDesignAllowed)) {
                return false;
            }
        }
        {
            PrintAreaRestrictionsDTO.ExcludedPrintTypes lhsExcludedPrintTypes;
            lhsExcludedPrintTypes = this.getExcludedPrintTypes();
            PrintAreaRestrictionsDTO.ExcludedPrintTypes rhsExcludedPrintTypes;
            rhsExcludedPrintTypes = that.getExcludedPrintTypes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "excludedPrintTypes", lhsExcludedPrintTypes), LocatorUtils.property(thatLocator, "excludedPrintTypes", rhsExcludedPrintTypes), lhsExcludedPrintTypes, rhsExcludedPrintTypes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            boolean theTextAllowed;
            theTextAllowed = (true?this.isTextAllowed():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textAllowed", theTextAllowed), currentHashCode, theTextAllowed);
        }
        {
            boolean theDesignAllowed;
            theDesignAllowed = (true?this.isDesignAllowed():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "designAllowed", theDesignAllowed), currentHashCode, theDesignAllowed);
        }
        {
            PrintAreaRestrictionsDTO.ExcludedPrintTypes theExcludedPrintTypes;
            theExcludedPrintTypes = this.getExcludedPrintTypes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "excludedPrintTypes", theExcludedPrintTypes), currentHashCode, theExcludedPrintTypes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PrintAreaRestrictionsDTO) {
            final PrintAreaRestrictionsDTO copy = ((PrintAreaRestrictionsDTO) draftCopy);
            boolean sourceTextAllowed;
            sourceTextAllowed = (true?this.isTextAllowed():false);
            boolean copyTextAllowed = strategy.copy(LocatorUtils.property(locator, "textAllowed", sourceTextAllowed), sourceTextAllowed);
            copy.setTextAllowed(copyTextAllowed);
            boolean sourceDesignAllowed;
            sourceDesignAllowed = (true?this.isDesignAllowed():false);
            boolean copyDesignAllowed = strategy.copy(LocatorUtils.property(locator, "designAllowed", sourceDesignAllowed), sourceDesignAllowed);
            copy.setDesignAllowed(copyDesignAllowed);
            if (this.excludedPrintTypes!= null) {
                PrintAreaRestrictionsDTO.ExcludedPrintTypes sourceExcludedPrintTypes;
                sourceExcludedPrintTypes = this.getExcludedPrintTypes();
                PrintAreaRestrictionsDTO.ExcludedPrintTypes copyExcludedPrintTypes = ((PrintAreaRestrictionsDTO.ExcludedPrintTypes) strategy.copy(LocatorUtils.property(locator, "excludedPrintTypes", sourceExcludedPrintTypes), sourceExcludedPrintTypes));
                copy.setExcludedPrintTypes(copyExcludedPrintTypes);
            } else {
                copy.excludedPrintTypes = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PrintAreaRestrictionsDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof PrintAreaRestrictionsDTO) {
            final PrintAreaRestrictionsDTO target = this;
            final PrintAreaRestrictionsDTO leftObject = ((PrintAreaRestrictionsDTO) left);
            final PrintAreaRestrictionsDTO rightObject = ((PrintAreaRestrictionsDTO) right);
            {
                boolean lhsTextAllowed;
                lhsTextAllowed = (true?leftObject.isTextAllowed():false);
                boolean rhsTextAllowed;
                rhsTextAllowed = (true?rightObject.isTextAllowed():false);
                boolean mergedTextAllowed = ((boolean) strategy.merge(LocatorUtils.property(leftLocator, "textAllowed", lhsTextAllowed), LocatorUtils.property(rightLocator, "textAllowed", rhsTextAllowed), lhsTextAllowed, rhsTextAllowed));
                target.setTextAllowed(mergedTextAllowed);
            }
            {
                boolean lhsDesignAllowed;
                lhsDesignAllowed = (true?leftObject.isDesignAllowed():false);
                boolean rhsDesignAllowed;
                rhsDesignAllowed = (true?rightObject.isDesignAllowed():false);
                boolean mergedDesignAllowed = ((boolean) strategy.merge(LocatorUtils.property(leftLocator, "designAllowed", lhsDesignAllowed), LocatorUtils.property(rightLocator, "designAllowed", rhsDesignAllowed), lhsDesignAllowed, rhsDesignAllowed));
                target.setDesignAllowed(mergedDesignAllowed);
            }
            {
                PrintAreaRestrictionsDTO.ExcludedPrintTypes lhsExcludedPrintTypes;
                lhsExcludedPrintTypes = leftObject.getExcludedPrintTypes();
                PrintAreaRestrictionsDTO.ExcludedPrintTypes rhsExcludedPrintTypes;
                rhsExcludedPrintTypes = rightObject.getExcludedPrintTypes();
                PrintAreaRestrictionsDTO.ExcludedPrintTypes mergedExcludedPrintTypes = ((PrintAreaRestrictionsDTO.ExcludedPrintTypes) strategy.merge(LocatorUtils.property(leftLocator, "excludedPrintTypes", lhsExcludedPrintTypes), LocatorUtils.property(rightLocator, "excludedPrintTypes", rhsExcludedPrintTypes), lhsExcludedPrintTypes, rhsExcludedPrintTypes));
                target.setExcludedPrintTypes(mergedExcludedPrintTypes);
            }
        }
    }

    public PrintAreaRestrictionsDTO withTextAllowed(boolean value) {
        setTextAllowed(value);
        return this;
    }

    public PrintAreaRestrictionsDTO withDesignAllowed(boolean value) {
        setDesignAllowed(value);
        return this;
    }

    public PrintAreaRestrictionsDTO withExcludedPrintTypes(PrintAreaRestrictionsDTO.ExcludedPrintTypes value) {
        setExcludedPrintTypes(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="excludedPrintType" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "excludedPrintType"
    })
    public static class ExcludedPrintTypes
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> excludedPrintType;

        /**
         * Gets the value of the excludedPrintType property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the excludedPrintType property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getExcludedPrintType().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getExcludedPrintType() {
            if (excludedPrintType == null) {
                excludedPrintType = new ArrayList<Reference>();
            }
            return this.excludedPrintType;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theExcludedPrintType;
                theExcludedPrintType = (((this.excludedPrintType!= null)&&(!this.excludedPrintType.isEmpty()))?this.getExcludedPrintType():null);
                strategy.appendField(locator, this, "excludedPrintType", buffer, theExcludedPrintType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof PrintAreaRestrictionsDTO.ExcludedPrintTypes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final PrintAreaRestrictionsDTO.ExcludedPrintTypes that = ((PrintAreaRestrictionsDTO.ExcludedPrintTypes) object);
            {
                List<Reference> lhsExcludedPrintType;
                lhsExcludedPrintType = (((this.excludedPrintType!= null)&&(!this.excludedPrintType.isEmpty()))?this.getExcludedPrintType():null);
                List<Reference> rhsExcludedPrintType;
                rhsExcludedPrintType = (((that.excludedPrintType!= null)&&(!that.excludedPrintType.isEmpty()))?that.getExcludedPrintType():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "excludedPrintType", lhsExcludedPrintType), LocatorUtils.property(thatLocator, "excludedPrintType", rhsExcludedPrintType), lhsExcludedPrintType, rhsExcludedPrintType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theExcludedPrintType;
                theExcludedPrintType = (((this.excludedPrintType!= null)&&(!this.excludedPrintType.isEmpty()))?this.getExcludedPrintType():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "excludedPrintType", theExcludedPrintType), currentHashCode, theExcludedPrintType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PrintAreaRestrictionsDTO.ExcludedPrintTypes) {
                final PrintAreaRestrictionsDTO.ExcludedPrintTypes copy = ((PrintAreaRestrictionsDTO.ExcludedPrintTypes) draftCopy);
                if ((this.excludedPrintType!= null)&&(!this.excludedPrintType.isEmpty())) {
                    List<Reference> sourceExcludedPrintType;
                    sourceExcludedPrintType = (((this.excludedPrintType!= null)&&(!this.excludedPrintType.isEmpty()))?this.getExcludedPrintType():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyExcludedPrintType = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "excludedPrintType", sourceExcludedPrintType), sourceExcludedPrintType));
                    copy.excludedPrintType = null;
                    if (copyExcludedPrintType!= null) {
                        List<Reference> uniqueExcludedPrintTypel = copy.getExcludedPrintType();
                        uniqueExcludedPrintTypel.addAll(copyExcludedPrintType);
                    }
                } else {
                    copy.excludedPrintType = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PrintAreaRestrictionsDTO.ExcludedPrintTypes();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof PrintAreaRestrictionsDTO.ExcludedPrintTypes) {
                final PrintAreaRestrictionsDTO.ExcludedPrintTypes target = this;
                final PrintAreaRestrictionsDTO.ExcludedPrintTypes leftObject = ((PrintAreaRestrictionsDTO.ExcludedPrintTypes) left);
                final PrintAreaRestrictionsDTO.ExcludedPrintTypes rightObject = ((PrintAreaRestrictionsDTO.ExcludedPrintTypes) right);
                {
                    List<Reference> lhsExcludedPrintType;
                    lhsExcludedPrintType = (((leftObject.excludedPrintType!= null)&&(!leftObject.excludedPrintType.isEmpty()))?leftObject.getExcludedPrintType():null);
                    List<Reference> rhsExcludedPrintType;
                    rhsExcludedPrintType = (((rightObject.excludedPrintType!= null)&&(!rightObject.excludedPrintType.isEmpty()))?rightObject.getExcludedPrintType():null);
                    List<Reference> mergedExcludedPrintType = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "excludedPrintType", lhsExcludedPrintType), LocatorUtils.property(rightLocator, "excludedPrintType", rhsExcludedPrintType), lhsExcludedPrintType, rhsExcludedPrintType));
                    target.excludedPrintType = null;
                    if (mergedExcludedPrintType!= null) {
                        List<Reference> uniqueExcludedPrintTypel = target.getExcludedPrintType();
                        uniqueExcludedPrintTypel.addAll(mergedExcludedPrintType);
                    }
                }
            }
        }

        public PrintAreaRestrictionsDTO.ExcludedPrintTypes withExcludedPrintType(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getExcludedPrintType().add(value);
                }
            }
            return this;
        }

        public PrintAreaRestrictionsDTO.ExcludedPrintTypes withExcludedPrintType(Collection<Reference> values) {
            if (values!= null) {
                getExcludedPrintType().addAll(values);
            }
            return this;
        }

    }

}
