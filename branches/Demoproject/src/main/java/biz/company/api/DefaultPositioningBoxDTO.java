//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for defaultPositioningBoxDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="defaultPositioningBoxDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="content" type="{http://api.company.biz}shapeContentDTO"/>
 *         &lt;element name="horizontalAlignment" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="verticalAlignment" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="canRotate" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "defaultPositioningBoxDTO", propOrder = {
    "content",
    "horizontalAlignment",
    "verticalAlignment",
    "canRotate"
})
public class DefaultPositioningBoxDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    @XmlElement(required = true)
    protected ShapeContentDTO content;
    @XmlElement(required = true)
    protected String horizontalAlignment;
    @XmlElement(required = true)
    protected String verticalAlignment;
    protected int canRotate;

    /**
     * Gets the value of the content property.
     * 
     * @return
     *     possible object is
     *     {@link ShapeContentDTO }
     *     
     */
    public ShapeContentDTO getContent() {
        return content;
    }

    /**
     * Sets the value of the content property.
     * 
     * @param value
     *     allowed object is
     *     {@link ShapeContentDTO }
     *     
     */
    public void setContent(ShapeContentDTO value) {
        this.content = value;
    }

    /**
     * Gets the value of the horizontalAlignment property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHorizontalAlignment() {
        return horizontalAlignment;
    }

    /**
     * Sets the value of the horizontalAlignment property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHorizontalAlignment(String value) {
        this.horizontalAlignment = value;
    }

    /**
     * Gets the value of the verticalAlignment property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVerticalAlignment() {
        return verticalAlignment;
    }

    /**
     * Sets the value of the verticalAlignment property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVerticalAlignment(String value) {
        this.verticalAlignment = value;
    }

    /**
     * Gets the value of the canRotate property.
     * 
     */
    public int getCanRotate() {
        return canRotate;
    }

    /**
     * Sets the value of the canRotate property.
     * 
     */
    public void setCanRotate(int value) {
        this.canRotate = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            ShapeContentDTO theContent;
            theContent = this.getContent();
            strategy.appendField(locator, this, "content", buffer, theContent);
        }
        {
            String theHorizontalAlignment;
            theHorizontalAlignment = this.getHorizontalAlignment();
            strategy.appendField(locator, this, "horizontalAlignment", buffer, theHorizontalAlignment);
        }
        {
            String theVerticalAlignment;
            theVerticalAlignment = this.getVerticalAlignment();
            strategy.appendField(locator, this, "verticalAlignment", buffer, theVerticalAlignment);
        }
        {
            int theCanRotate;
            theCanRotate = (true?this.getCanRotate(): 0);
            strategy.appendField(locator, this, "canRotate", buffer, theCanRotate);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DefaultPositioningBoxDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DefaultPositioningBoxDTO that = ((DefaultPositioningBoxDTO) object);
        {
            ShapeContentDTO lhsContent;
            lhsContent = this.getContent();
            ShapeContentDTO rhsContent;
            rhsContent = that.getContent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                return false;
            }
        }
        {
            String lhsHorizontalAlignment;
            lhsHorizontalAlignment = this.getHorizontalAlignment();
            String rhsHorizontalAlignment;
            rhsHorizontalAlignment = that.getHorizontalAlignment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "horizontalAlignment", lhsHorizontalAlignment), LocatorUtils.property(thatLocator, "horizontalAlignment", rhsHorizontalAlignment), lhsHorizontalAlignment, rhsHorizontalAlignment)) {
                return false;
            }
        }
        {
            String lhsVerticalAlignment;
            lhsVerticalAlignment = this.getVerticalAlignment();
            String rhsVerticalAlignment;
            rhsVerticalAlignment = that.getVerticalAlignment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "verticalAlignment", lhsVerticalAlignment), LocatorUtils.property(thatLocator, "verticalAlignment", rhsVerticalAlignment), lhsVerticalAlignment, rhsVerticalAlignment)) {
                return false;
            }
        }
        {
            int lhsCanRotate;
            lhsCanRotate = (true?this.getCanRotate(): 0);
            int rhsCanRotate;
            rhsCanRotate = (true?that.getCanRotate(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "canRotate", lhsCanRotate), LocatorUtils.property(thatLocator, "canRotate", rhsCanRotate), lhsCanRotate, rhsCanRotate)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            ShapeContentDTO theContent;
            theContent = this.getContent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
        }
        {
            String theHorizontalAlignment;
            theHorizontalAlignment = this.getHorizontalAlignment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "horizontalAlignment", theHorizontalAlignment), currentHashCode, theHorizontalAlignment);
        }
        {
            String theVerticalAlignment;
            theVerticalAlignment = this.getVerticalAlignment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "verticalAlignment", theVerticalAlignment), currentHashCode, theVerticalAlignment);
        }
        {
            int theCanRotate;
            theCanRotate = (true?this.getCanRotate(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "canRotate", theCanRotate), currentHashCode, theCanRotate);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof DefaultPositioningBoxDTO) {
            final DefaultPositioningBoxDTO copy = ((DefaultPositioningBoxDTO) draftCopy);
            if (this.content!= null) {
                ShapeContentDTO sourceContent;
                sourceContent = this.getContent();
                ShapeContentDTO copyContent = ((ShapeContentDTO) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                copy.setContent(copyContent);
            } else {
                copy.content = null;
            }
            if (this.horizontalAlignment!= null) {
                String sourceHorizontalAlignment;
                sourceHorizontalAlignment = this.getHorizontalAlignment();
                String copyHorizontalAlignment = ((String) strategy.copy(LocatorUtils.property(locator, "horizontalAlignment", sourceHorizontalAlignment), sourceHorizontalAlignment));
                copy.setHorizontalAlignment(copyHorizontalAlignment);
            } else {
                copy.horizontalAlignment = null;
            }
            if (this.verticalAlignment!= null) {
                String sourceVerticalAlignment;
                sourceVerticalAlignment = this.getVerticalAlignment();
                String copyVerticalAlignment = ((String) strategy.copy(LocatorUtils.property(locator, "verticalAlignment", sourceVerticalAlignment), sourceVerticalAlignment));
                copy.setVerticalAlignment(copyVerticalAlignment);
            } else {
                copy.verticalAlignment = null;
            }
            int sourceCanRotate;
            sourceCanRotate = (true?this.getCanRotate(): 0);
            int copyCanRotate = strategy.copy(LocatorUtils.property(locator, "canRotate", sourceCanRotate), sourceCanRotate);
            copy.setCanRotate(copyCanRotate);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DefaultPositioningBoxDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof DefaultPositioningBoxDTO) {
            final DefaultPositioningBoxDTO target = this;
            final DefaultPositioningBoxDTO leftObject = ((DefaultPositioningBoxDTO) left);
            final DefaultPositioningBoxDTO rightObject = ((DefaultPositioningBoxDTO) right);
            {
                ShapeContentDTO lhsContent;
                lhsContent = leftObject.getContent();
                ShapeContentDTO rhsContent;
                rhsContent = rightObject.getContent();
                ShapeContentDTO mergedContent = ((ShapeContentDTO) strategy.merge(LocatorUtils.property(leftLocator, "content", lhsContent), LocatorUtils.property(rightLocator, "content", rhsContent), lhsContent, rhsContent));
                target.setContent(mergedContent);
            }
            {
                String lhsHorizontalAlignment;
                lhsHorizontalAlignment = leftObject.getHorizontalAlignment();
                String rhsHorizontalAlignment;
                rhsHorizontalAlignment = rightObject.getHorizontalAlignment();
                String mergedHorizontalAlignment = ((String) strategy.merge(LocatorUtils.property(leftLocator, "horizontalAlignment", lhsHorizontalAlignment), LocatorUtils.property(rightLocator, "horizontalAlignment", rhsHorizontalAlignment), lhsHorizontalAlignment, rhsHorizontalAlignment));
                target.setHorizontalAlignment(mergedHorizontalAlignment);
            }
            {
                String lhsVerticalAlignment;
                lhsVerticalAlignment = leftObject.getVerticalAlignment();
                String rhsVerticalAlignment;
                rhsVerticalAlignment = rightObject.getVerticalAlignment();
                String mergedVerticalAlignment = ((String) strategy.merge(LocatorUtils.property(leftLocator, "verticalAlignment", lhsVerticalAlignment), LocatorUtils.property(rightLocator, "verticalAlignment", rhsVerticalAlignment), lhsVerticalAlignment, rhsVerticalAlignment));
                target.setVerticalAlignment(mergedVerticalAlignment);
            }
            {
                int lhsCanRotate;
                lhsCanRotate = (true?leftObject.getCanRotate(): 0);
                int rhsCanRotate;
                rhsCanRotate = (true?rightObject.getCanRotate(): 0);
                int mergedCanRotate = ((int) strategy.merge(LocatorUtils.property(leftLocator, "canRotate", lhsCanRotate), LocatorUtils.property(rightLocator, "canRotate", rhsCanRotate), lhsCanRotate, rhsCanRotate));
                target.setCanRotate(mergedCanRotate);
            }
        }
    }

    public DefaultPositioningBoxDTO withContent(ShapeContentDTO value) {
        setContent(value);
        return this;
    }

    public DefaultPositioningBoxDTO withHorizontalAlignment(String value) {
        setHorizontalAlignment(value);
        return this;
    }

    public DefaultPositioningBoxDTO withVerticalAlignment(String value) {
        setVerticalAlignment(value);
        return this;
    }

    public DefaultPositioningBoxDTO withCanRotate(int value) {
        setCanRotate(value);
        return this;
    }

}
