//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for configurationRestrictionsDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="configurationRestrictionsDTO">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="changeable" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "configurationRestrictionsDTO", propOrder = {
    "changeable"
})
public class ConfigurationRestrictionsDTO
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected boolean changeable;

    /**
     * Gets the value of the changeable property.
     * 
     */
    public boolean isChangeable() {
        return changeable;
    }

    /**
     * Sets the value of the changeable property.
     * 
     */
    public void setChangeable(boolean value) {
        this.changeable = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            boolean theChangeable;
            theChangeable = (true?this.isChangeable():false);
            strategy.appendField(locator, this, "changeable", buffer, theChangeable);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConfigurationRestrictionsDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ConfigurationRestrictionsDTO that = ((ConfigurationRestrictionsDTO) object);
        {
            boolean lhsChangeable;
            lhsChangeable = (true?this.isChangeable():false);
            boolean rhsChangeable;
            rhsChangeable = (true?that.isChangeable():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "changeable", lhsChangeable), LocatorUtils.property(thatLocator, "changeable", rhsChangeable), lhsChangeable, rhsChangeable)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            boolean theChangeable;
            theChangeable = (true?this.isChangeable():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "changeable", theChangeable), currentHashCode, theChangeable);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ConfigurationRestrictionsDTO) {
            final ConfigurationRestrictionsDTO copy = ((ConfigurationRestrictionsDTO) draftCopy);
            boolean sourceChangeable;
            sourceChangeable = (true?this.isChangeable():false);
            boolean copyChangeable = strategy.copy(LocatorUtils.property(locator, "changeable", sourceChangeable), sourceChangeable);
            copy.setChangeable(copyChangeable);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ConfigurationRestrictionsDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        if (right instanceof ConfigurationRestrictionsDTO) {
            final ConfigurationRestrictionsDTO target = this;
            final ConfigurationRestrictionsDTO leftObject = ((ConfigurationRestrictionsDTO) left);
            final ConfigurationRestrictionsDTO rightObject = ((ConfigurationRestrictionsDTO) right);
            {
                boolean lhsChangeable;
                lhsChangeable = (true?leftObject.isChangeable():false);
                boolean rhsChangeable;
                rhsChangeable = (true?rightObject.isChangeable():false);
                boolean mergedChangeable = ((boolean) strategy.merge(LocatorUtils.property(leftLocator, "changeable", lhsChangeable), LocatorUtils.property(rightLocator, "changeable", rhsChangeable), lhsChangeable, rhsChangeable));
                target.setChangeable(mergedChangeable);
            }
        }
    }

    public ConfigurationRestrictionsDTO withChangeable(boolean value) {
        setChangeable(value);
        return this;
    }

}
