//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for basketDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="basketDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="token" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="shop" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="user" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="basketItems" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}basketItem" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "basketDTO", propOrder = {
    "token",
    "shop",
    "user",
    "basketItems"
})
public class BasketDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String token;
    protected Reference shop;
    protected Reference user;
    protected BasketDTO.BasketItems basketItems;

    /**
     * Gets the value of the token property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getToken() {
        return token;
    }

    /**
     * Sets the value of the token property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setToken(String value) {
        this.token = value;
    }

    /**
     * Gets the value of the shop property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getShop() {
        return shop;
    }

    /**
     * Sets the value of the shop property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setShop(Reference value) {
        this.shop = value;
    }

    /**
     * Gets the value of the user property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getUser() {
        return user;
    }

    /**
     * Sets the value of the user property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setUser(Reference value) {
        this.user = value;
    }

    /**
     * Gets the value of the basketItems property.
     * 
     * @return
     *     possible object is
     *     {@link BasketDTO.BasketItems }
     *     
     */
    public BasketDTO.BasketItems getBasketItems() {
        return basketItems;
    }

    /**
     * Sets the value of the basketItems property.
     * 
     * @param value
     *     allowed object is
     *     {@link BasketDTO.BasketItems }
     *     
     */
    public void setBasketItems(BasketDTO.BasketItems value) {
        this.basketItems = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theToken;
            theToken = this.getToken();
            strategy.appendField(locator, this, "token", buffer, theToken);
        }
        {
            Reference theShop;
            theShop = this.getShop();
            strategy.appendField(locator, this, "shop", buffer, theShop);
        }
        {
            Reference theUser;
            theUser = this.getUser();
            strategy.appendField(locator, this, "user", buffer, theUser);
        }
        {
            BasketDTO.BasketItems theBasketItems;
            theBasketItems = this.getBasketItems();
            strategy.appendField(locator, this, "basketItems", buffer, theBasketItems);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BasketDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final BasketDTO that = ((BasketDTO) object);
        {
            String lhsToken;
            lhsToken = this.getToken();
            String rhsToken;
            rhsToken = that.getToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "token", lhsToken), LocatorUtils.property(thatLocator, "token", rhsToken), lhsToken, rhsToken)) {
                return false;
            }
        }
        {
            Reference lhsShop;
            lhsShop = this.getShop();
            Reference rhsShop;
            rhsShop = that.getShop();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shop", lhsShop), LocatorUtils.property(thatLocator, "shop", rhsShop), lhsShop, rhsShop)) {
                return false;
            }
        }
        {
            Reference lhsUser;
            lhsUser = this.getUser();
            Reference rhsUser;
            rhsUser = that.getUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "user", lhsUser), LocatorUtils.property(thatLocator, "user", rhsUser), lhsUser, rhsUser)) {
                return false;
            }
        }
        {
            BasketDTO.BasketItems lhsBasketItems;
            lhsBasketItems = this.getBasketItems();
            BasketDTO.BasketItems rhsBasketItems;
            rhsBasketItems = that.getBasketItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "basketItems", lhsBasketItems), LocatorUtils.property(thatLocator, "basketItems", rhsBasketItems), lhsBasketItems, rhsBasketItems)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theToken;
            theToken = this.getToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "token", theToken), currentHashCode, theToken);
        }
        {
            Reference theShop;
            theShop = this.getShop();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shop", theShop), currentHashCode, theShop);
        }
        {
            Reference theUser;
            theUser = this.getUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "user", theUser), currentHashCode, theUser);
        }
        {
            BasketDTO.BasketItems theBasketItems;
            theBasketItems = this.getBasketItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "basketItems", theBasketItems), currentHashCode, theBasketItems);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof BasketDTO) {
            final BasketDTO copy = ((BasketDTO) draftCopy);
            if (this.token!= null) {
                String sourceToken;
                sourceToken = this.getToken();
                String copyToken = ((String) strategy.copy(LocatorUtils.property(locator, "token", sourceToken), sourceToken));
                copy.setToken(copyToken);
            } else {
                copy.token = null;
            }
            if (this.shop!= null) {
                Reference sourceShop;
                sourceShop = this.getShop();
                Reference copyShop = ((Reference) strategy.copy(LocatorUtils.property(locator, "shop", sourceShop), sourceShop));
                copy.setShop(copyShop);
            } else {
                copy.shop = null;
            }
            if (this.user!= null) {
                Reference sourceUser;
                sourceUser = this.getUser();
                Reference copyUser = ((Reference) strategy.copy(LocatorUtils.property(locator, "user", sourceUser), sourceUser));
                copy.setUser(copyUser);
            } else {
                copy.user = null;
            }
            if (this.basketItems!= null) {
                BasketDTO.BasketItems sourceBasketItems;
                sourceBasketItems = this.getBasketItems();
                BasketDTO.BasketItems copyBasketItems = ((BasketDTO.BasketItems) strategy.copy(LocatorUtils.property(locator, "basketItems", sourceBasketItems), sourceBasketItems));
                copy.setBasketItems(copyBasketItems);
            } else {
                copy.basketItems = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new BasketDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof BasketDTO) {
            final BasketDTO target = this;
            final BasketDTO leftObject = ((BasketDTO) left);
            final BasketDTO rightObject = ((BasketDTO) right);
            {
                String lhsToken;
                lhsToken = leftObject.getToken();
                String rhsToken;
                rhsToken = rightObject.getToken();
                String mergedToken = ((String) strategy.merge(LocatorUtils.property(leftLocator, "token", lhsToken), LocatorUtils.property(rightLocator, "token", rhsToken), lhsToken, rhsToken));
                target.setToken(mergedToken);
            }
            {
                Reference lhsShop;
                lhsShop = leftObject.getShop();
                Reference rhsShop;
                rhsShop = rightObject.getShop();
                Reference mergedShop = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "shop", lhsShop), LocatorUtils.property(rightLocator, "shop", rhsShop), lhsShop, rhsShop));
                target.setShop(mergedShop);
            }
            {
                Reference lhsUser;
                lhsUser = leftObject.getUser();
                Reference rhsUser;
                rhsUser = rightObject.getUser();
                Reference mergedUser = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "user", lhsUser), LocatorUtils.property(rightLocator, "user", rhsUser), lhsUser, rhsUser));
                target.setUser(mergedUser);
            }
            {
                BasketDTO.BasketItems lhsBasketItems;
                lhsBasketItems = leftObject.getBasketItems();
                BasketDTO.BasketItems rhsBasketItems;
                rhsBasketItems = rightObject.getBasketItems();
                BasketDTO.BasketItems mergedBasketItems = ((BasketDTO.BasketItems) strategy.merge(LocatorUtils.property(leftLocator, "basketItems", lhsBasketItems), LocatorUtils.property(rightLocator, "basketItems", rhsBasketItems), lhsBasketItems, rhsBasketItems));
                target.setBasketItems(mergedBasketItems);
            }
        }
    }

    public BasketDTO withToken(String value) {
        setToken(value);
        return this;
    }

    public BasketDTO withShop(Reference value) {
        setShop(value);
        return this;
    }

    public BasketDTO withUser(Reference value) {
        setUser(value);
        return this;
    }

    public BasketDTO withBasketItems(BasketDTO.BasketItems value) {
        setBasketItems(value);
        return this;
    }

    @Override
    public BasketDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public BasketDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public BasketDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}basketItem" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "basketItem"
    })
    public static class BasketItems
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<BasketItemDTO> basketItem;

        /**
         * Gets the value of the basketItem property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the basketItem property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getBasketItem().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link BasketItemDTO }
         * 
         * 
         */
        public List<BasketItemDTO> getBasketItem() {
            if (basketItem == null) {
                basketItem = new ArrayList<BasketItemDTO>();
            }
            return this.basketItem;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<BasketItemDTO> theBasketItem;
                theBasketItem = (((this.basketItem!= null)&&(!this.basketItem.isEmpty()))?this.getBasketItem():null);
                strategy.appendField(locator, this, "basketItem", buffer, theBasketItem);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof BasketDTO.BasketItems)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final BasketDTO.BasketItems that = ((BasketDTO.BasketItems) object);
            {
                List<BasketItemDTO> lhsBasketItem;
                lhsBasketItem = (((this.basketItem!= null)&&(!this.basketItem.isEmpty()))?this.getBasketItem():null);
                List<BasketItemDTO> rhsBasketItem;
                rhsBasketItem = (((that.basketItem!= null)&&(!that.basketItem.isEmpty()))?that.getBasketItem():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "basketItem", lhsBasketItem), LocatorUtils.property(thatLocator, "basketItem", rhsBasketItem), lhsBasketItem, rhsBasketItem)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<BasketItemDTO> theBasketItem;
                theBasketItem = (((this.basketItem!= null)&&(!this.basketItem.isEmpty()))?this.getBasketItem():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "basketItem", theBasketItem), currentHashCode, theBasketItem);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof BasketDTO.BasketItems) {
                final BasketDTO.BasketItems copy = ((BasketDTO.BasketItems) draftCopy);
                if ((this.basketItem!= null)&&(!this.basketItem.isEmpty())) {
                    List<BasketItemDTO> sourceBasketItem;
                    sourceBasketItem = (((this.basketItem!= null)&&(!this.basketItem.isEmpty()))?this.getBasketItem():null);
                    @SuppressWarnings("unchecked")
                    List<BasketItemDTO> copyBasketItem = ((List<BasketItemDTO> ) strategy.copy(LocatorUtils.property(locator, "basketItem", sourceBasketItem), sourceBasketItem));
                    copy.basketItem = null;
                    if (copyBasketItem!= null) {
                        List<BasketItemDTO> uniqueBasketIteml = copy.getBasketItem();
                        uniqueBasketIteml.addAll(copyBasketItem);
                    }
                } else {
                    copy.basketItem = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new BasketDTO.BasketItems();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof BasketDTO.BasketItems) {
                final BasketDTO.BasketItems target = this;
                final BasketDTO.BasketItems leftObject = ((BasketDTO.BasketItems) left);
                final BasketDTO.BasketItems rightObject = ((BasketDTO.BasketItems) right);
                {
                    List<BasketItemDTO> lhsBasketItem;
                    lhsBasketItem = (((leftObject.basketItem!= null)&&(!leftObject.basketItem.isEmpty()))?leftObject.getBasketItem():null);
                    List<BasketItemDTO> rhsBasketItem;
                    rhsBasketItem = (((rightObject.basketItem!= null)&&(!rightObject.basketItem.isEmpty()))?rightObject.getBasketItem():null);
                    List<BasketItemDTO> mergedBasketItem = ((List<BasketItemDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "basketItem", lhsBasketItem), LocatorUtils.property(rightLocator, "basketItem", rhsBasketItem), lhsBasketItem, rhsBasketItem));
                    target.basketItem = null;
                    if (mergedBasketItem!= null) {
                        List<BasketItemDTO> uniqueBasketIteml = target.getBasketItem();
                        uniqueBasketIteml.addAll(mergedBasketItem);
                    }
                }
            }
        }

        public BasketDTO.BasketItems withBasketItem(BasketItemDTO... values) {
            if (values!= null) {
                for (BasketItemDTO value: values) {
                    getBasketItem().add(value);
                }
            }
            return this;
        }

        public BasketDTO.BasketItems withBasketItem(Collection<BasketItemDTO> values) {
            if (values!= null) {
                getBasketItem().addAll(values);
            }
            return this;
        }

    }

}
