//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="user" type="{http://api.company.biz}reference" minOccurs="0"/>
 *         &lt;element name="creator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element ref="{http://api.company.biz}productType"/>
 *         &lt;element name="appearance" type="{http://api.company.biz}reference"/>
 *         &lt;element name="restrictions" type="{http://api.company.biz}productRestrictionsDTO"/>
 *         &lt;element name="configurations" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}configuration" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="defaultValues" type="{http://api.company.biz}productDefaultValuesDTO" minOccurs="0"/>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="weight" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productDTO", propOrder = {
    "name",
    "user",
    "creator",
    "productType",
    "appearance",
    "restrictions",
    "configurations",
    "defaultValues",
    "resources"
})
public class ProductDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    protected Reference user;
    protected String creator;
    @XmlElement(required = true)
    protected ProductTypeDTO productType;
    @XmlElement(required = true)
    protected Reference appearance;
    @XmlElement(required = true)
    protected ProductRestrictionsDTO restrictions;
    protected ProductDTO.Configurations configurations;
    protected ProductDefaultValuesDTO defaultValues;
    protected ProductDTO.Resources resources;
    @XmlAttribute(name = "weight")
    protected Double weight;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the user property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getUser() {
        return user;
    }

    /**
     * Sets the value of the user property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setUser(Reference value) {
        this.user = value;
    }

    /**
     * Gets the value of the creator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreator() {
        return creator;
    }

    /**
     * Sets the value of the creator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreator(String value) {
        this.creator = value;
    }

    /**
     * Gets the value of the productType property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO }
     *     
     */
    public ProductTypeDTO getProductType() {
        return productType;
    }

    /**
     * Sets the value of the productType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO }
     *     
     */
    public void setProductType(ProductTypeDTO value) {
        this.productType = value;
    }

    /**
     * Gets the value of the appearance property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getAppearance() {
        return appearance;
    }

    /**
     * Sets the value of the appearance property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setAppearance(Reference value) {
        this.appearance = value;
    }

    /**
     * Gets the value of the restrictions property.
     * 
     * @return
     *     possible object is
     *     {@link ProductRestrictionsDTO }
     *     
     */
    public ProductRestrictionsDTO getRestrictions() {
        return restrictions;
    }

    /**
     * Sets the value of the restrictions property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductRestrictionsDTO }
     *     
     */
    public void setRestrictions(ProductRestrictionsDTO value) {
        this.restrictions = value;
    }

    /**
     * Gets the value of the configurations property.
     * 
     * @return
     *     possible object is
     *     {@link ProductDTO.Configurations }
     *     
     */
    public ProductDTO.Configurations getConfigurations() {
        return configurations;
    }

    /**
     * Sets the value of the configurations property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductDTO.Configurations }
     *     
     */
    public void setConfigurations(ProductDTO.Configurations value) {
        this.configurations = value;
    }

    /**
     * Gets the value of the defaultValues property.
     * 
     * @return
     *     possible object is
     *     {@link ProductDefaultValuesDTO }
     *     
     */
    public ProductDefaultValuesDTO getDefaultValues() {
        return defaultValues;
    }

    /**
     * Sets the value of the defaultValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductDefaultValuesDTO }
     *     
     */
    public void setDefaultValues(ProductDefaultValuesDTO value) {
        this.defaultValues = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link ProductDTO.Resources }
     *     
     */
    public ProductDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductDTO.Resources }
     *     
     */
    public void setResources(ProductDTO.Resources value) {
        this.resources = value;
    }

    /**
     * Gets the value of the weight property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setWeight(Double value) {
        this.weight = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            Reference theUser;
            theUser = this.getUser();
            strategy.appendField(locator, this, "user", buffer, theUser);
        }
        {
            String theCreator;
            theCreator = this.getCreator();
            strategy.appendField(locator, this, "creator", buffer, theCreator);
        }
        {
            ProductTypeDTO theProductType;
            theProductType = this.getProductType();
            strategy.appendField(locator, this, "productType", buffer, theProductType);
        }
        {
            Reference theAppearance;
            theAppearance = this.getAppearance();
            strategy.appendField(locator, this, "appearance", buffer, theAppearance);
        }
        {
            ProductRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            strategy.appendField(locator, this, "restrictions", buffer, theRestrictions);
        }
        {
            ProductDTO.Configurations theConfigurations;
            theConfigurations = this.getConfigurations();
            strategy.appendField(locator, this, "configurations", buffer, theConfigurations);
        }
        {
            ProductDefaultValuesDTO theDefaultValues;
            theDefaultValues = this.getDefaultValues();
            strategy.appendField(locator, this, "defaultValues", buffer, theDefaultValues);
        }
        {
            ProductDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductDTO that = ((ProductDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Reference lhsUser;
            lhsUser = this.getUser();
            Reference rhsUser;
            rhsUser = that.getUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "user", lhsUser), LocatorUtils.property(thatLocator, "user", rhsUser), lhsUser, rhsUser)) {
                return false;
            }
        }
        {
            String lhsCreator;
            lhsCreator = this.getCreator();
            String rhsCreator;
            rhsCreator = that.getCreator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creator", lhsCreator), LocatorUtils.property(thatLocator, "creator", rhsCreator), lhsCreator, rhsCreator)) {
                return false;
            }
        }
        {
            ProductTypeDTO lhsProductType;
            lhsProductType = this.getProductType();
            ProductTypeDTO rhsProductType;
            rhsProductType = that.getProductType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "productType", lhsProductType), LocatorUtils.property(thatLocator, "productType", rhsProductType), lhsProductType, rhsProductType)) {
                return false;
            }
        }
        {
            Reference lhsAppearance;
            lhsAppearance = this.getAppearance();
            Reference rhsAppearance;
            rhsAppearance = that.getAppearance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appearance", lhsAppearance), LocatorUtils.property(thatLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance)) {
                return false;
            }
        }
        {
            ProductRestrictionsDTO lhsRestrictions;
            lhsRestrictions = this.getRestrictions();
            ProductRestrictionsDTO rhsRestrictions;
            rhsRestrictions = that.getRestrictions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restrictions", lhsRestrictions), LocatorUtils.property(thatLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions)) {
                return false;
            }
        }
        {
            ProductDTO.Configurations lhsConfigurations;
            lhsConfigurations = this.getConfigurations();
            ProductDTO.Configurations rhsConfigurations;
            rhsConfigurations = that.getConfigurations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "configurations", lhsConfigurations), LocatorUtils.property(thatLocator, "configurations", rhsConfigurations), lhsConfigurations, rhsConfigurations)) {
                return false;
            }
        }
        {
            ProductDefaultValuesDTO lhsDefaultValues;
            lhsDefaultValues = this.getDefaultValues();
            ProductDefaultValuesDTO rhsDefaultValues;
            rhsDefaultValues = that.getDefaultValues();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultValues", lhsDefaultValues), LocatorUtils.property(thatLocator, "defaultValues", rhsDefaultValues), lhsDefaultValues, rhsDefaultValues)) {
                return false;
            }
        }
        {
            ProductDTO.Resources lhsResources;
            lhsResources = this.getResources();
            ProductDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            Double lhsWeight;
            lhsWeight = this.getWeight();
            Double rhsWeight;
            rhsWeight = that.getWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Reference theUser;
            theUser = this.getUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "user", theUser), currentHashCode, theUser);
        }
        {
            String theCreator;
            theCreator = this.getCreator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creator", theCreator), currentHashCode, theCreator);
        }
        {
            ProductTypeDTO theProductType;
            theProductType = this.getProductType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productType", theProductType), currentHashCode, theProductType);
        }
        {
            Reference theAppearance;
            theAppearance = this.getAppearance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appearance", theAppearance), currentHashCode, theAppearance);
        }
        {
            ProductRestrictionsDTO theRestrictions;
            theRestrictions = this.getRestrictions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restrictions", theRestrictions), currentHashCode, theRestrictions);
        }
        {
            ProductDTO.Configurations theConfigurations;
            theConfigurations = this.getConfigurations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "configurations", theConfigurations), currentHashCode, theConfigurations);
        }
        {
            ProductDefaultValuesDTO theDefaultValues;
            theDefaultValues = this.getDefaultValues();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultValues", theDefaultValues), currentHashCode, theDefaultValues);
        }
        {
            ProductDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductDTO) {
            final ProductDTO copy = ((ProductDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.user!= null) {
                Reference sourceUser;
                sourceUser = this.getUser();
                Reference copyUser = ((Reference) strategy.copy(LocatorUtils.property(locator, "user", sourceUser), sourceUser));
                copy.setUser(copyUser);
            } else {
                copy.user = null;
            }
            if (this.creator!= null) {
                String sourceCreator;
                sourceCreator = this.getCreator();
                String copyCreator = ((String) strategy.copy(LocatorUtils.property(locator, "creator", sourceCreator), sourceCreator));
                copy.setCreator(copyCreator);
            } else {
                copy.creator = null;
            }
            if (this.productType!= null) {
                ProductTypeDTO sourceProductType;
                sourceProductType = this.getProductType();
                ProductTypeDTO copyProductType = ((ProductTypeDTO) strategy.copy(LocatorUtils.property(locator, "productType", sourceProductType), sourceProductType));
                copy.setProductType(copyProductType);
            } else {
                copy.productType = null;
            }
            if (this.appearance!= null) {
                Reference sourceAppearance;
                sourceAppearance = this.getAppearance();
                Reference copyAppearance = ((Reference) strategy.copy(LocatorUtils.property(locator, "appearance", sourceAppearance), sourceAppearance));
                copy.setAppearance(copyAppearance);
            } else {
                copy.appearance = null;
            }
            if (this.restrictions!= null) {
                ProductRestrictionsDTO sourceRestrictions;
                sourceRestrictions = this.getRestrictions();
                ProductRestrictionsDTO copyRestrictions = ((ProductRestrictionsDTO) strategy.copy(LocatorUtils.property(locator, "restrictions", sourceRestrictions), sourceRestrictions));
                copy.setRestrictions(copyRestrictions);
            } else {
                copy.restrictions = null;
            }
            if (this.configurations!= null) {
                ProductDTO.Configurations sourceConfigurations;
                sourceConfigurations = this.getConfigurations();
                ProductDTO.Configurations copyConfigurations = ((ProductDTO.Configurations) strategy.copy(LocatorUtils.property(locator, "configurations", sourceConfigurations), sourceConfigurations));
                copy.setConfigurations(copyConfigurations);
            } else {
                copy.configurations = null;
            }
            if (this.defaultValues!= null) {
                ProductDefaultValuesDTO sourceDefaultValues;
                sourceDefaultValues = this.getDefaultValues();
                ProductDefaultValuesDTO copyDefaultValues = ((ProductDefaultValuesDTO) strategy.copy(LocatorUtils.property(locator, "defaultValues", sourceDefaultValues), sourceDefaultValues));
                copy.setDefaultValues(copyDefaultValues);
            } else {
                copy.defaultValues = null;
            }
            if (this.resources!= null) {
                ProductDTO.Resources sourceResources;
                sourceResources = this.getResources();
                ProductDTO.Resources copyResources = ((ProductDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
            if (this.weight!= null) {
                Double sourceWeight;
                sourceWeight = this.getWeight();
                Double copyWeight = ((Double) strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight));
                copy.setWeight(copyWeight);
            } else {
                copy.weight = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductDTO) {
            final ProductDTO target = this;
            final ProductDTO leftObject = ((ProductDTO) left);
            final ProductDTO rightObject = ((ProductDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                Reference lhsUser;
                lhsUser = leftObject.getUser();
                Reference rhsUser;
                rhsUser = rightObject.getUser();
                Reference mergedUser = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "user", lhsUser), LocatorUtils.property(rightLocator, "user", rhsUser), lhsUser, rhsUser));
                target.setUser(mergedUser);
            }
            {
                String lhsCreator;
                lhsCreator = leftObject.getCreator();
                String rhsCreator;
                rhsCreator = rightObject.getCreator();
                String mergedCreator = ((String) strategy.merge(LocatorUtils.property(leftLocator, "creator", lhsCreator), LocatorUtils.property(rightLocator, "creator", rhsCreator), lhsCreator, rhsCreator));
                target.setCreator(mergedCreator);
            }
            {
                ProductTypeDTO lhsProductType;
                lhsProductType = leftObject.getProductType();
                ProductTypeDTO rhsProductType;
                rhsProductType = rightObject.getProductType();
                ProductTypeDTO mergedProductType = ((ProductTypeDTO) strategy.merge(LocatorUtils.property(leftLocator, "productType", lhsProductType), LocatorUtils.property(rightLocator, "productType", rhsProductType), lhsProductType, rhsProductType));
                target.setProductType(mergedProductType);
            }
            {
                Reference lhsAppearance;
                lhsAppearance = leftObject.getAppearance();
                Reference rhsAppearance;
                rhsAppearance = rightObject.getAppearance();
                Reference mergedAppearance = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "appearance", lhsAppearance), LocatorUtils.property(rightLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance));
                target.setAppearance(mergedAppearance);
            }
            {
                ProductRestrictionsDTO lhsRestrictions;
                lhsRestrictions = leftObject.getRestrictions();
                ProductRestrictionsDTO rhsRestrictions;
                rhsRestrictions = rightObject.getRestrictions();
                ProductRestrictionsDTO mergedRestrictions = ((ProductRestrictionsDTO) strategy.merge(LocatorUtils.property(leftLocator, "restrictions", lhsRestrictions), LocatorUtils.property(rightLocator, "restrictions", rhsRestrictions), lhsRestrictions, rhsRestrictions));
                target.setRestrictions(mergedRestrictions);
            }
            {
                ProductDTO.Configurations lhsConfigurations;
                lhsConfigurations = leftObject.getConfigurations();
                ProductDTO.Configurations rhsConfigurations;
                rhsConfigurations = rightObject.getConfigurations();
                ProductDTO.Configurations mergedConfigurations = ((ProductDTO.Configurations) strategy.merge(LocatorUtils.property(leftLocator, "configurations", lhsConfigurations), LocatorUtils.property(rightLocator, "configurations", rhsConfigurations), lhsConfigurations, rhsConfigurations));
                target.setConfigurations(mergedConfigurations);
            }
            {
                ProductDefaultValuesDTO lhsDefaultValues;
                lhsDefaultValues = leftObject.getDefaultValues();
                ProductDefaultValuesDTO rhsDefaultValues;
                rhsDefaultValues = rightObject.getDefaultValues();
                ProductDefaultValuesDTO mergedDefaultValues = ((ProductDefaultValuesDTO) strategy.merge(LocatorUtils.property(leftLocator, "defaultValues", lhsDefaultValues), LocatorUtils.property(rightLocator, "defaultValues", rhsDefaultValues), lhsDefaultValues, rhsDefaultValues));
                target.setDefaultValues(mergedDefaultValues);
            }
            {
                ProductDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                ProductDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                ProductDTO.Resources mergedResources = ((ProductDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
            {
                Double lhsWeight;
                lhsWeight = leftObject.getWeight();
                Double rhsWeight;
                rhsWeight = rightObject.getWeight();
                Double mergedWeight = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "weight", lhsWeight), LocatorUtils.property(rightLocator, "weight", rhsWeight), lhsWeight, rhsWeight));
                target.setWeight(mergedWeight);
            }
        }
    }

    public ProductDTO withName(String value) {
        setName(value);
        return this;
    }

    public ProductDTO withUser(Reference value) {
        setUser(value);
        return this;
    }

    public ProductDTO withCreator(String value) {
        setCreator(value);
        return this;
    }

    public ProductDTO withProductType(ProductTypeDTO value) {
        setProductType(value);
        return this;
    }

    public ProductDTO withAppearance(Reference value) {
        setAppearance(value);
        return this;
    }

    public ProductDTO withRestrictions(ProductRestrictionsDTO value) {
        setRestrictions(value);
        return this;
    }

    public ProductDTO withConfigurations(ProductDTO.Configurations value) {
        setConfigurations(value);
        return this;
    }

    public ProductDTO withDefaultValues(ProductDefaultValuesDTO value) {
        setDefaultValues(value);
        return this;
    }

    public ProductDTO withResources(ProductDTO.Resources value) {
        setResources(value);
        return this;
    }

    public ProductDTO withWeight(Double value) {
        setWeight(value);
        return this;
    }

    @Override
    public ProductDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProductDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}configuration" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "configuration"
    })
    public static class Configurations
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ConfigurationDTO> configuration;

        /**
         * Gets the value of the configuration property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the configuration property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getConfiguration().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ConfigurationDTO }
         * 
         * 
         */
        public List<ConfigurationDTO> getConfiguration() {
            if (configuration == null) {
                configuration = new ArrayList<ConfigurationDTO>();
            }
            return this.configuration;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ConfigurationDTO> theConfiguration;
                theConfiguration = (((this.configuration!= null)&&(!this.configuration.isEmpty()))?this.getConfiguration():null);
                strategy.appendField(locator, this, "configuration", buffer, theConfiguration);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductDTO.Configurations)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductDTO.Configurations that = ((ProductDTO.Configurations) object);
            {
                List<ConfigurationDTO> lhsConfiguration;
                lhsConfiguration = (((this.configuration!= null)&&(!this.configuration.isEmpty()))?this.getConfiguration():null);
                List<ConfigurationDTO> rhsConfiguration;
                rhsConfiguration = (((that.configuration!= null)&&(!that.configuration.isEmpty()))?that.getConfiguration():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "configuration", lhsConfiguration), LocatorUtils.property(thatLocator, "configuration", rhsConfiguration), lhsConfiguration, rhsConfiguration)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ConfigurationDTO> theConfiguration;
                theConfiguration = (((this.configuration!= null)&&(!this.configuration.isEmpty()))?this.getConfiguration():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "configuration", theConfiguration), currentHashCode, theConfiguration);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductDTO.Configurations) {
                final ProductDTO.Configurations copy = ((ProductDTO.Configurations) draftCopy);
                if ((this.configuration!= null)&&(!this.configuration.isEmpty())) {
                    List<ConfigurationDTO> sourceConfiguration;
                    sourceConfiguration = (((this.configuration!= null)&&(!this.configuration.isEmpty()))?this.getConfiguration():null);
                    @SuppressWarnings("unchecked")
                    List<ConfigurationDTO> copyConfiguration = ((List<ConfigurationDTO> ) strategy.copy(LocatorUtils.property(locator, "configuration", sourceConfiguration), sourceConfiguration));
                    copy.configuration = null;
                    if (copyConfiguration!= null) {
                        List<ConfigurationDTO> uniqueConfigurationl = copy.getConfiguration();
                        uniqueConfigurationl.addAll(copyConfiguration);
                    }
                } else {
                    copy.configuration = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductDTO.Configurations();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductDTO.Configurations) {
                final ProductDTO.Configurations target = this;
                final ProductDTO.Configurations leftObject = ((ProductDTO.Configurations) left);
                final ProductDTO.Configurations rightObject = ((ProductDTO.Configurations) right);
                {
                    List<ConfigurationDTO> lhsConfiguration;
                    lhsConfiguration = (((leftObject.configuration!= null)&&(!leftObject.configuration.isEmpty()))?leftObject.getConfiguration():null);
                    List<ConfigurationDTO> rhsConfiguration;
                    rhsConfiguration = (((rightObject.configuration!= null)&&(!rightObject.configuration.isEmpty()))?rightObject.getConfiguration():null);
                    List<ConfigurationDTO> mergedConfiguration = ((List<ConfigurationDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "configuration", lhsConfiguration), LocatorUtils.property(rightLocator, "configuration", rhsConfiguration), lhsConfiguration, rhsConfiguration));
                    target.configuration = null;
                    if (mergedConfiguration!= null) {
                        List<ConfigurationDTO> uniqueConfigurationl = target.getConfiguration();
                        uniqueConfigurationl.addAll(mergedConfiguration);
                    }
                }
            }
        }

        public ProductDTO.Configurations withConfiguration(ConfigurationDTO... values) {
            if (values!= null) {
                for (ConfigurationDTO value: values) {
                    getConfiguration().add(value);
                }
            }
            return this;
        }

        public ProductDTO.Configurations withConfiguration(Collection<ConfigurationDTO> values) {
            if (values!= null) {
                getConfiguration().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductDTO.Resources that = ((ProductDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductDTO.Resources) {
                final ProductDTO.Resources copy = ((ProductDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductDTO.Resources) {
                final ProductDTO.Resources target = this;
                final ProductDTO.Resources leftObject = ((ProductDTO.Resources) left);
                final ProductDTO.Resources rightObject = ((ProductDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public ProductDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public ProductDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }

}
