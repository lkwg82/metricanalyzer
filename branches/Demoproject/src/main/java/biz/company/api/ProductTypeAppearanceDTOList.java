//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productTypeAppearanceDTOList complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productTypeAppearanceDTOList">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}abstractList">
 *       &lt;sequence>
 *         &lt;element ref="{http://api.company.biz}appearance" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productTypeAppearanceDTOList", propOrder = {
    "appearance"
})
public class ProductTypeAppearanceDTOList
    extends AbstractList
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected List<ProductTypeAppearanceDTO> appearance;

    /**
     * Gets the value of the appearance property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the appearance property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAppearance().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProductTypeAppearanceDTO }
     * 
     * 
     */
    public List<ProductTypeAppearanceDTO> getAppearance() {
        if (appearance == null) {
            appearance = new ArrayList<ProductTypeAppearanceDTO>();
        }
        return this.appearance;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<ProductTypeAppearanceDTO> theAppearance;
            theAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
            strategy.appendField(locator, this, "appearance", buffer, theAppearance);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductTypeAppearanceDTOList)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductTypeAppearanceDTOList that = ((ProductTypeAppearanceDTOList) object);
        {
            List<ProductTypeAppearanceDTO> lhsAppearance;
            lhsAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
            List<ProductTypeAppearanceDTO> rhsAppearance;
            rhsAppearance = (((that.appearance!= null)&&(!that.appearance.isEmpty()))?that.getAppearance():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appearance", lhsAppearance), LocatorUtils.property(thatLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<ProductTypeAppearanceDTO> theAppearance;
            theAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appearance", theAppearance), currentHashCode, theAppearance);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductTypeAppearanceDTOList) {
            final ProductTypeAppearanceDTOList copy = ((ProductTypeAppearanceDTOList) draftCopy);
            if ((this.appearance!= null)&&(!this.appearance.isEmpty())) {
                List<ProductTypeAppearanceDTO> sourceAppearance;
                sourceAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
                @SuppressWarnings("unchecked")
                List<ProductTypeAppearanceDTO> copyAppearance = ((List<ProductTypeAppearanceDTO> ) strategy.copy(LocatorUtils.property(locator, "appearance", sourceAppearance), sourceAppearance));
                copy.appearance = null;
                if (copyAppearance!= null) {
                    List<ProductTypeAppearanceDTO> uniqueAppearancel = copy.getAppearance();
                    uniqueAppearancel.addAll(copyAppearance);
                }
            } else {
                copy.appearance = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductTypeAppearanceDTOList();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductTypeAppearanceDTOList) {
            final ProductTypeAppearanceDTOList target = this;
            final ProductTypeAppearanceDTOList leftObject = ((ProductTypeAppearanceDTOList) left);
            final ProductTypeAppearanceDTOList rightObject = ((ProductTypeAppearanceDTOList) right);
            {
                List<ProductTypeAppearanceDTO> lhsAppearance;
                lhsAppearance = (((leftObject.appearance!= null)&&(!leftObject.appearance.isEmpty()))?leftObject.getAppearance():null);
                List<ProductTypeAppearanceDTO> rhsAppearance;
                rhsAppearance = (((rightObject.appearance!= null)&&(!rightObject.appearance.isEmpty()))?rightObject.getAppearance():null);
                List<ProductTypeAppearanceDTO> mergedAppearance = ((List<ProductTypeAppearanceDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "appearance", lhsAppearance), LocatorUtils.property(rightLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance));
                target.appearance = null;
                if (mergedAppearance!= null) {
                    List<ProductTypeAppearanceDTO> uniqueAppearancel = target.getAppearance();
                    uniqueAppearancel.addAll(mergedAppearance);
                }
            }
        }
    }

    public ProductTypeAppearanceDTOList withAppearance(ProductTypeAppearanceDTO... values) {
        if (values!= null) {
            for (ProductTypeAppearanceDTO value: values) {
                getAppearance().add(value);
            }
        }
        return this;
    }

    public ProductTypeAppearanceDTOList withAppearance(Collection<ProductTypeAppearanceDTO> values) {
        if (values!= null) {
            getAppearance().addAll(values);
        }
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withFacets(AbstractList.Facets value) {
        setFacets(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withOffset(long value) {
        setOffset(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withLimit(long value) {
        setLimit(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withCount(long value) {
        setCount(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withSortField(String value) {
        setSortField(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withSortOrder(String value) {
        setSortOrder(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withQuery(String value) {
        setQuery(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withSuggestedQuery(String value) {
        setSuggestedQuery(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withExecutedQuery(String value) {
        setExecutedQuery(value);
        return this;
    }

    @Override
    public ProductTypeAppearanceDTOList withUngroupedCount(Long value) {
        setUngroupedCount(value);
        return this;
    }

}
