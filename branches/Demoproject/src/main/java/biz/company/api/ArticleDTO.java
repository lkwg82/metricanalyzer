//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for articleDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="articleDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="tags" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element ref="{http://api.company.biz}price"/>
 *         &lt;element name="shop" type="{http://api.company.biz}reference"/>
 *         &lt;element ref="{http://api.company.biz}product"/>
 *         &lt;element name="articleCategories" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="articleCategory" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="relatedArticles" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="relatedArticle" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="created" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="modified" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="weight" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "articleDTO", propOrder = {
    "name",
    "description",
    "tags",
    "price",
    "shop",
    "product",
    "articleCategories",
    "relatedArticles",
    "resources",
    "created",
    "modified"
})
public class ArticleDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    protected String description;
    protected String tags;
    @XmlElement(required = true)
    protected ElementPrice price;
    @XmlElement(required = true)
    protected Reference shop;
    @XmlElement(required = true)
    protected ProductDTO product;
    protected ArticleDTO.ArticleCategories articleCategories;
    protected ArticleDTO.RelatedArticles relatedArticles;
    protected ArticleDTO.Resources resources;
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar created;
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar modified;
    @XmlAttribute(name = "weight")
    protected Double weight;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the tags property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTags() {
        return tags;
    }

    /**
     * Sets the value of the tags property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTags(String value) {
        this.tags = value;
    }

    /**
     * Gets the value of the price property.
     * 
     * @return
     *     possible object is
     *     {@link ElementPrice }
     *     
     */
    public ElementPrice getPrice() {
        return price;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementPrice }
     *     
     */
    public void setPrice(ElementPrice value) {
        this.price = value;
    }

    /**
     * Gets the value of the shop property.
     * 
     * @return
     *     possible object is
     *     {@link Reference }
     *     
     */
    public Reference getShop() {
        return shop;
    }

    /**
     * Sets the value of the shop property.
     * 
     * @param value
     *     allowed object is
     *     {@link Reference }
     *     
     */
    public void setShop(Reference value) {
        this.shop = value;
    }

    /**
     * Gets the value of the product property.
     * 
     * @return
     *     possible object is
     *     {@link ProductDTO }
     *     
     */
    public ProductDTO getProduct() {
        return product;
    }

    /**
     * Sets the value of the product property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductDTO }
     *     
     */
    public void setProduct(ProductDTO value) {
        this.product = value;
    }

    /**
     * Gets the value of the articleCategories property.
     * 
     * @return
     *     possible object is
     *     {@link ArticleDTO.ArticleCategories }
     *     
     */
    public ArticleDTO.ArticleCategories getArticleCategories() {
        return articleCategories;
    }

    /**
     * Sets the value of the articleCategories property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArticleDTO.ArticleCategories }
     *     
     */
    public void setArticleCategories(ArticleDTO.ArticleCategories value) {
        this.articleCategories = value;
    }

    /**
     * Gets the value of the relatedArticles property.
     * 
     * @return
     *     possible object is
     *     {@link ArticleDTO.RelatedArticles }
     *     
     */
    public ArticleDTO.RelatedArticles getRelatedArticles() {
        return relatedArticles;
    }

    /**
     * Sets the value of the relatedArticles property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArticleDTO.RelatedArticles }
     *     
     */
    public void setRelatedArticles(ArticleDTO.RelatedArticles value) {
        this.relatedArticles = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link ArticleDTO.Resources }
     *     
     */
    public ArticleDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArticleDTO.Resources }
     *     
     */
    public void setResources(ArticleDTO.Resources value) {
        this.resources = value;
    }

    /**
     * Gets the value of the created property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getCreated() {
        return created;
    }

    /**
     * Sets the value of the created property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setCreated(XMLGregorianCalendar value) {
        this.created = value;
    }

    /**
     * Gets the value of the modified property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getModified() {
        return modified;
    }

    /**
     * Sets the value of the modified property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setModified(XMLGregorianCalendar value) {
        this.modified = value;
    }

    /**
     * Gets the value of the weight property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setWeight(Double value) {
        this.weight = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            String theTags;
            theTags = this.getTags();
            strategy.appendField(locator, this, "tags", buffer, theTags);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            Reference theShop;
            theShop = this.getShop();
            strategy.appendField(locator, this, "shop", buffer, theShop);
        }
        {
            ProductDTO theProduct;
            theProduct = this.getProduct();
            strategy.appendField(locator, this, "product", buffer, theProduct);
        }
        {
            ArticleDTO.ArticleCategories theArticleCategories;
            theArticleCategories = this.getArticleCategories();
            strategy.appendField(locator, this, "articleCategories", buffer, theArticleCategories);
        }
        {
            ArticleDTO.RelatedArticles theRelatedArticles;
            theRelatedArticles = this.getRelatedArticles();
            strategy.appendField(locator, this, "relatedArticles", buffer, theRelatedArticles);
        }
        {
            ArticleDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            XMLGregorianCalendar theCreated;
            theCreated = this.getCreated();
            strategy.appendField(locator, this, "created", buffer, theCreated);
        }
        {
            XMLGregorianCalendar theModified;
            theModified = this.getModified();
            strategy.appendField(locator, this, "modified", buffer, theModified);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ArticleDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ArticleDTO that = ((ArticleDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            String lhsTags;
            lhsTags = this.getTags();
            String rhsTags;
            rhsTags = that.getTags();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tags", lhsTags), LocatorUtils.property(thatLocator, "tags", rhsTags), lhsTags, rhsTags)) {
                return false;
            }
        }
        {
            ElementPrice lhsPrice;
            lhsPrice = this.getPrice();
            ElementPrice rhsPrice;
            rhsPrice = that.getPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            Reference lhsShop;
            lhsShop = this.getShop();
            Reference rhsShop;
            rhsShop = that.getShop();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shop", lhsShop), LocatorUtils.property(thatLocator, "shop", rhsShop), lhsShop, rhsShop)) {
                return false;
            }
        }
        {
            ProductDTO lhsProduct;
            lhsProduct = this.getProduct();
            ProductDTO rhsProduct;
            rhsProduct = that.getProduct();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "product", lhsProduct), LocatorUtils.property(thatLocator, "product", rhsProduct), lhsProduct, rhsProduct)) {
                return false;
            }
        }
        {
            ArticleDTO.ArticleCategories lhsArticleCategories;
            lhsArticleCategories = this.getArticleCategories();
            ArticleDTO.ArticleCategories rhsArticleCategories;
            rhsArticleCategories = that.getArticleCategories();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "articleCategories", lhsArticleCategories), LocatorUtils.property(thatLocator, "articleCategories", rhsArticleCategories), lhsArticleCategories, rhsArticleCategories)) {
                return false;
            }
        }
        {
            ArticleDTO.RelatedArticles lhsRelatedArticles;
            lhsRelatedArticles = this.getRelatedArticles();
            ArticleDTO.RelatedArticles rhsRelatedArticles;
            rhsRelatedArticles = that.getRelatedArticles();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedArticles", lhsRelatedArticles), LocatorUtils.property(thatLocator, "relatedArticles", rhsRelatedArticles), lhsRelatedArticles, rhsRelatedArticles)) {
                return false;
            }
        }
        {
            ArticleDTO.Resources lhsResources;
            lhsResources = this.getResources();
            ArticleDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsCreated;
            lhsCreated = this.getCreated();
            XMLGregorianCalendar rhsCreated;
            rhsCreated = that.getCreated();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsModified;
            lhsModified = this.getModified();
            XMLGregorianCalendar rhsModified;
            rhsModified = that.getModified();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modified", lhsModified), LocatorUtils.property(thatLocator, "modified", rhsModified), lhsModified, rhsModified)) {
                return false;
            }
        }
        {
            Double lhsWeight;
            lhsWeight = this.getWeight();
            Double rhsWeight;
            rhsWeight = that.getWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            String theTags;
            theTags = this.getTags();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tags", theTags), currentHashCode, theTags);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            Reference theShop;
            theShop = this.getShop();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shop", theShop), currentHashCode, theShop);
        }
        {
            ProductDTO theProduct;
            theProduct = this.getProduct();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "product", theProduct), currentHashCode, theProduct);
        }
        {
            ArticleDTO.ArticleCategories theArticleCategories;
            theArticleCategories = this.getArticleCategories();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "articleCategories", theArticleCategories), currentHashCode, theArticleCategories);
        }
        {
            ArticleDTO.RelatedArticles theRelatedArticles;
            theRelatedArticles = this.getRelatedArticles();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedArticles", theRelatedArticles), currentHashCode, theRelatedArticles);
        }
        {
            ArticleDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            XMLGregorianCalendar theCreated;
            theCreated = this.getCreated();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
        }
        {
            XMLGregorianCalendar theModified;
            theModified = this.getModified();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modified", theModified), currentHashCode, theModified);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ArticleDTO) {
            final ArticleDTO copy = ((ArticleDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.tags!= null) {
                String sourceTags;
                sourceTags = this.getTags();
                String copyTags = ((String) strategy.copy(LocatorUtils.property(locator, "tags", sourceTags), sourceTags));
                copy.setTags(copyTags);
            } else {
                copy.tags = null;
            }
            if (this.price!= null) {
                ElementPrice sourcePrice;
                sourcePrice = this.getPrice();
                ElementPrice copyPrice = ((ElementPrice) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
                copy.setPrice(copyPrice);
            } else {
                copy.price = null;
            }
            if (this.shop!= null) {
                Reference sourceShop;
                sourceShop = this.getShop();
                Reference copyShop = ((Reference) strategy.copy(LocatorUtils.property(locator, "shop", sourceShop), sourceShop));
                copy.setShop(copyShop);
            } else {
                copy.shop = null;
            }
            if (this.product!= null) {
                ProductDTO sourceProduct;
                sourceProduct = this.getProduct();
                ProductDTO copyProduct = ((ProductDTO) strategy.copy(LocatorUtils.property(locator, "product", sourceProduct), sourceProduct));
                copy.setProduct(copyProduct);
            } else {
                copy.product = null;
            }
            if (this.articleCategories!= null) {
                ArticleDTO.ArticleCategories sourceArticleCategories;
                sourceArticleCategories = this.getArticleCategories();
                ArticleDTO.ArticleCategories copyArticleCategories = ((ArticleDTO.ArticleCategories) strategy.copy(LocatorUtils.property(locator, "articleCategories", sourceArticleCategories), sourceArticleCategories));
                copy.setArticleCategories(copyArticleCategories);
            } else {
                copy.articleCategories = null;
            }
            if (this.relatedArticles!= null) {
                ArticleDTO.RelatedArticles sourceRelatedArticles;
                sourceRelatedArticles = this.getRelatedArticles();
                ArticleDTO.RelatedArticles copyRelatedArticles = ((ArticleDTO.RelatedArticles) strategy.copy(LocatorUtils.property(locator, "relatedArticles", sourceRelatedArticles), sourceRelatedArticles));
                copy.setRelatedArticles(copyRelatedArticles);
            } else {
                copy.relatedArticles = null;
            }
            if (this.resources!= null) {
                ArticleDTO.Resources sourceResources;
                sourceResources = this.getResources();
                ArticleDTO.Resources copyResources = ((ArticleDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
            if (this.created!= null) {
                XMLGregorianCalendar sourceCreated;
                sourceCreated = this.getCreated();
                XMLGregorianCalendar copyCreated = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "created", sourceCreated), sourceCreated));
                copy.setCreated(copyCreated);
            } else {
                copy.created = null;
            }
            if (this.modified!= null) {
                XMLGregorianCalendar sourceModified;
                sourceModified = this.getModified();
                XMLGregorianCalendar copyModified = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "modified", sourceModified), sourceModified));
                copy.setModified(copyModified);
            } else {
                copy.modified = null;
            }
            if (this.weight!= null) {
                Double sourceWeight;
                sourceWeight = this.getWeight();
                Double copyWeight = ((Double) strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight));
                copy.setWeight(copyWeight);
            } else {
                copy.weight = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ArticleDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ArticleDTO) {
            final ArticleDTO target = this;
            final ArticleDTO leftObject = ((ArticleDTO) left);
            final ArticleDTO rightObject = ((ArticleDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                String lhsDescription;
                lhsDescription = leftObject.getDescription();
                String rhsDescription;
                rhsDescription = rightObject.getDescription();
                String mergedDescription = ((String) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription));
                target.setDescription(mergedDescription);
            }
            {
                String lhsTags;
                lhsTags = leftObject.getTags();
                String rhsTags;
                rhsTags = rightObject.getTags();
                String mergedTags = ((String) strategy.merge(LocatorUtils.property(leftLocator, "tags", lhsTags), LocatorUtils.property(rightLocator, "tags", rhsTags), lhsTags, rhsTags));
                target.setTags(mergedTags);
            }
            {
                ElementPrice lhsPrice;
                lhsPrice = leftObject.getPrice();
                ElementPrice rhsPrice;
                rhsPrice = rightObject.getPrice();
                ElementPrice mergedPrice = ((ElementPrice) strategy.merge(LocatorUtils.property(leftLocator, "price", lhsPrice), LocatorUtils.property(rightLocator, "price", rhsPrice), lhsPrice, rhsPrice));
                target.setPrice(mergedPrice);
            }
            {
                Reference lhsShop;
                lhsShop = leftObject.getShop();
                Reference rhsShop;
                rhsShop = rightObject.getShop();
                Reference mergedShop = ((Reference) strategy.merge(LocatorUtils.property(leftLocator, "shop", lhsShop), LocatorUtils.property(rightLocator, "shop", rhsShop), lhsShop, rhsShop));
                target.setShop(mergedShop);
            }
            {
                ProductDTO lhsProduct;
                lhsProduct = leftObject.getProduct();
                ProductDTO rhsProduct;
                rhsProduct = rightObject.getProduct();
                ProductDTO mergedProduct = ((ProductDTO) strategy.merge(LocatorUtils.property(leftLocator, "product", lhsProduct), LocatorUtils.property(rightLocator, "product", rhsProduct), lhsProduct, rhsProduct));
                target.setProduct(mergedProduct);
            }
            {
                ArticleDTO.ArticleCategories lhsArticleCategories;
                lhsArticleCategories = leftObject.getArticleCategories();
                ArticleDTO.ArticleCategories rhsArticleCategories;
                rhsArticleCategories = rightObject.getArticleCategories();
                ArticleDTO.ArticleCategories mergedArticleCategories = ((ArticleDTO.ArticleCategories) strategy.merge(LocatorUtils.property(leftLocator, "articleCategories", lhsArticleCategories), LocatorUtils.property(rightLocator, "articleCategories", rhsArticleCategories), lhsArticleCategories, rhsArticleCategories));
                target.setArticleCategories(mergedArticleCategories);
            }
            {
                ArticleDTO.RelatedArticles lhsRelatedArticles;
                lhsRelatedArticles = leftObject.getRelatedArticles();
                ArticleDTO.RelatedArticles rhsRelatedArticles;
                rhsRelatedArticles = rightObject.getRelatedArticles();
                ArticleDTO.RelatedArticles mergedRelatedArticles = ((ArticleDTO.RelatedArticles) strategy.merge(LocatorUtils.property(leftLocator, "relatedArticles", lhsRelatedArticles), LocatorUtils.property(rightLocator, "relatedArticles", rhsRelatedArticles), lhsRelatedArticles, rhsRelatedArticles));
                target.setRelatedArticles(mergedRelatedArticles);
            }
            {
                ArticleDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                ArticleDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                ArticleDTO.Resources mergedResources = ((ArticleDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
            {
                XMLGregorianCalendar lhsCreated;
                lhsCreated = leftObject.getCreated();
                XMLGregorianCalendar rhsCreated;
                rhsCreated = rightObject.getCreated();
                XMLGregorianCalendar mergedCreated = ((XMLGregorianCalendar) strategy.merge(LocatorUtils.property(leftLocator, "created", lhsCreated), LocatorUtils.property(rightLocator, "created", rhsCreated), lhsCreated, rhsCreated));
                target.setCreated(mergedCreated);
            }
            {
                XMLGregorianCalendar lhsModified;
                lhsModified = leftObject.getModified();
                XMLGregorianCalendar rhsModified;
                rhsModified = rightObject.getModified();
                XMLGregorianCalendar mergedModified = ((XMLGregorianCalendar) strategy.merge(LocatorUtils.property(leftLocator, "modified", lhsModified), LocatorUtils.property(rightLocator, "modified", rhsModified), lhsModified, rhsModified));
                target.setModified(mergedModified);
            }
            {
                Double lhsWeight;
                lhsWeight = leftObject.getWeight();
                Double rhsWeight;
                rhsWeight = rightObject.getWeight();
                Double mergedWeight = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "weight", lhsWeight), LocatorUtils.property(rightLocator, "weight", rhsWeight), lhsWeight, rhsWeight));
                target.setWeight(mergedWeight);
            }
        }
    }

    public ArticleDTO withName(String value) {
        setName(value);
        return this;
    }

    public ArticleDTO withDescription(String value) {
        setDescription(value);
        return this;
    }

    public ArticleDTO withTags(String value) {
        setTags(value);
        return this;
    }

    public ArticleDTO withPrice(ElementPrice value) {
        setPrice(value);
        return this;
    }

    public ArticleDTO withShop(Reference value) {
        setShop(value);
        return this;
    }

    public ArticleDTO withProduct(ProductDTO value) {
        setProduct(value);
        return this;
    }

    public ArticleDTO withArticleCategories(ArticleDTO.ArticleCategories value) {
        setArticleCategories(value);
        return this;
    }

    public ArticleDTO withRelatedArticles(ArticleDTO.RelatedArticles value) {
        setRelatedArticles(value);
        return this;
    }

    public ArticleDTO withResources(ArticleDTO.Resources value) {
        setResources(value);
        return this;
    }

    public ArticleDTO withCreated(XMLGregorianCalendar value) {
        setCreated(value);
        return this;
    }

    public ArticleDTO withModified(XMLGregorianCalendar value) {
        setModified(value);
        return this;
    }

    public ArticleDTO withWeight(Double value) {
        setWeight(value);
        return this;
    }

    @Override
    public ArticleDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ArticleDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ArticleDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="articleCategory" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "articleCategory"
    })
    public static class ArticleCategories
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> articleCategory;

        /**
         * Gets the value of the articleCategory property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the articleCategory property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getArticleCategory().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getArticleCategory() {
            if (articleCategory == null) {
                articleCategory = new ArrayList<Reference>();
            }
            return this.articleCategory;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theArticleCategory;
                theArticleCategory = (((this.articleCategory!= null)&&(!this.articleCategory.isEmpty()))?this.getArticleCategory():null);
                strategy.appendField(locator, this, "articleCategory", buffer, theArticleCategory);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ArticleDTO.ArticleCategories)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ArticleDTO.ArticleCategories that = ((ArticleDTO.ArticleCategories) object);
            {
                List<Reference> lhsArticleCategory;
                lhsArticleCategory = (((this.articleCategory!= null)&&(!this.articleCategory.isEmpty()))?this.getArticleCategory():null);
                List<Reference> rhsArticleCategory;
                rhsArticleCategory = (((that.articleCategory!= null)&&(!that.articleCategory.isEmpty()))?that.getArticleCategory():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "articleCategory", lhsArticleCategory), LocatorUtils.property(thatLocator, "articleCategory", rhsArticleCategory), lhsArticleCategory, rhsArticleCategory)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theArticleCategory;
                theArticleCategory = (((this.articleCategory!= null)&&(!this.articleCategory.isEmpty()))?this.getArticleCategory():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "articleCategory", theArticleCategory), currentHashCode, theArticleCategory);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ArticleDTO.ArticleCategories) {
                final ArticleDTO.ArticleCategories copy = ((ArticleDTO.ArticleCategories) draftCopy);
                if ((this.articleCategory!= null)&&(!this.articleCategory.isEmpty())) {
                    List<Reference> sourceArticleCategory;
                    sourceArticleCategory = (((this.articleCategory!= null)&&(!this.articleCategory.isEmpty()))?this.getArticleCategory():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyArticleCategory = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "articleCategory", sourceArticleCategory), sourceArticleCategory));
                    copy.articleCategory = null;
                    if (copyArticleCategory!= null) {
                        List<Reference> uniqueArticleCategoryl = copy.getArticleCategory();
                        uniqueArticleCategoryl.addAll(copyArticleCategory);
                    }
                } else {
                    copy.articleCategory = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ArticleDTO.ArticleCategories();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ArticleDTO.ArticleCategories) {
                final ArticleDTO.ArticleCategories target = this;
                final ArticleDTO.ArticleCategories leftObject = ((ArticleDTO.ArticleCategories) left);
                final ArticleDTO.ArticleCategories rightObject = ((ArticleDTO.ArticleCategories) right);
                {
                    List<Reference> lhsArticleCategory;
                    lhsArticleCategory = (((leftObject.articleCategory!= null)&&(!leftObject.articleCategory.isEmpty()))?leftObject.getArticleCategory():null);
                    List<Reference> rhsArticleCategory;
                    rhsArticleCategory = (((rightObject.articleCategory!= null)&&(!rightObject.articleCategory.isEmpty()))?rightObject.getArticleCategory():null);
                    List<Reference> mergedArticleCategory = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "articleCategory", lhsArticleCategory), LocatorUtils.property(rightLocator, "articleCategory", rhsArticleCategory), lhsArticleCategory, rhsArticleCategory));
                    target.articleCategory = null;
                    if (mergedArticleCategory!= null) {
                        List<Reference> uniqueArticleCategoryl = target.getArticleCategory();
                        uniqueArticleCategoryl.addAll(mergedArticleCategory);
                    }
                }
            }
        }

        public ArticleDTO.ArticleCategories withArticleCategory(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getArticleCategory().add(value);
                }
            }
            return this;
        }

        public ArticleDTO.ArticleCategories withArticleCategory(Collection<Reference> values) {
            if (values!= null) {
                getArticleCategory().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="relatedArticle" type="{http://api.company.biz}reference" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "relatedArticle"
    })
    public static class RelatedArticles
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Reference> relatedArticle;

        /**
         * Gets the value of the relatedArticle property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the relatedArticle property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getRelatedArticle().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Reference }
         * 
         * 
         */
        public List<Reference> getRelatedArticle() {
            if (relatedArticle == null) {
                relatedArticle = new ArrayList<Reference>();
            }
            return this.relatedArticle;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Reference> theRelatedArticle;
                theRelatedArticle = (((this.relatedArticle!= null)&&(!this.relatedArticle.isEmpty()))?this.getRelatedArticle():null);
                strategy.appendField(locator, this, "relatedArticle", buffer, theRelatedArticle);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ArticleDTO.RelatedArticles)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ArticleDTO.RelatedArticles that = ((ArticleDTO.RelatedArticles) object);
            {
                List<Reference> lhsRelatedArticle;
                lhsRelatedArticle = (((this.relatedArticle!= null)&&(!this.relatedArticle.isEmpty()))?this.getRelatedArticle():null);
                List<Reference> rhsRelatedArticle;
                rhsRelatedArticle = (((that.relatedArticle!= null)&&(!that.relatedArticle.isEmpty()))?that.getRelatedArticle():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedArticle", lhsRelatedArticle), LocatorUtils.property(thatLocator, "relatedArticle", rhsRelatedArticle), lhsRelatedArticle, rhsRelatedArticle)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Reference> theRelatedArticle;
                theRelatedArticle = (((this.relatedArticle!= null)&&(!this.relatedArticle.isEmpty()))?this.getRelatedArticle():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedArticle", theRelatedArticle), currentHashCode, theRelatedArticle);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ArticleDTO.RelatedArticles) {
                final ArticleDTO.RelatedArticles copy = ((ArticleDTO.RelatedArticles) draftCopy);
                if ((this.relatedArticle!= null)&&(!this.relatedArticle.isEmpty())) {
                    List<Reference> sourceRelatedArticle;
                    sourceRelatedArticle = (((this.relatedArticle!= null)&&(!this.relatedArticle.isEmpty()))?this.getRelatedArticle():null);
                    @SuppressWarnings("unchecked")
                    List<Reference> copyRelatedArticle = ((List<Reference> ) strategy.copy(LocatorUtils.property(locator, "relatedArticle", sourceRelatedArticle), sourceRelatedArticle));
                    copy.relatedArticle = null;
                    if (copyRelatedArticle!= null) {
                        List<Reference> uniqueRelatedArticlel = copy.getRelatedArticle();
                        uniqueRelatedArticlel.addAll(copyRelatedArticle);
                    }
                } else {
                    copy.relatedArticle = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ArticleDTO.RelatedArticles();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ArticleDTO.RelatedArticles) {
                final ArticleDTO.RelatedArticles target = this;
                final ArticleDTO.RelatedArticles leftObject = ((ArticleDTO.RelatedArticles) left);
                final ArticleDTO.RelatedArticles rightObject = ((ArticleDTO.RelatedArticles) right);
                {
                    List<Reference> lhsRelatedArticle;
                    lhsRelatedArticle = (((leftObject.relatedArticle!= null)&&(!leftObject.relatedArticle.isEmpty()))?leftObject.getRelatedArticle():null);
                    List<Reference> rhsRelatedArticle;
                    rhsRelatedArticle = (((rightObject.relatedArticle!= null)&&(!rightObject.relatedArticle.isEmpty()))?rightObject.getRelatedArticle():null);
                    List<Reference> mergedRelatedArticle = ((List<Reference> ) strategy.merge(LocatorUtils.property(leftLocator, "relatedArticle", lhsRelatedArticle), LocatorUtils.property(rightLocator, "relatedArticle", rhsRelatedArticle), lhsRelatedArticle, rhsRelatedArticle));
                    target.relatedArticle = null;
                    if (mergedRelatedArticle!= null) {
                        List<Reference> uniqueRelatedArticlel = target.getRelatedArticle();
                        uniqueRelatedArticlel.addAll(mergedRelatedArticle);
                    }
                }
            }
        }

        public ArticleDTO.RelatedArticles withRelatedArticle(Reference... values) {
            if (values!= null) {
                for (Reference value: values) {
                    getRelatedArticle().add(value);
                }
            }
            return this;
        }

        public ArticleDTO.RelatedArticles withRelatedArticle(Collection<Reference> values) {
            if (values!= null) {
                getRelatedArticle().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ArticleDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ArticleDTO.Resources that = ((ArticleDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ArticleDTO.Resources) {
                final ArticleDTO.Resources copy = ((ArticleDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ArticleDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ArticleDTO.Resources) {
                final ArticleDTO.Resources target = this;
                final ArticleDTO.Resources leftObject = ((ArticleDTO.Resources) left);
                final ArticleDTO.Resources rightObject = ((ArticleDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public ArticleDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public ArticleDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }

}
