//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.10.19 at 07:09:03 PM CEST 
//


package biz.company.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom;
import org.jvnet.jaxb2_commons.lang.MergeStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for productTypeDTO complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="productTypeDTO">
 *   &lt;complexContent>
 *     &lt;extension base="{http://api.company.biz}dto">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="brand" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="shippingFactor" type="{http://www.w3.org/2001/XMLSchema}double" minOccurs="0"/>
 *         &lt;element ref="{http://api.company.biz}price" minOccurs="0"/>
 *         &lt;element name="defaultValues" type="{http://api.company.biz}productTypeDefaultValuesDTO" minOccurs="0"/>
 *         &lt;element name="appearances" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}appearance" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="sizes" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}size" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="attributes" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}attribute" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="washingInstructions" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}washingInstruction" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="views" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}view" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="printAreas" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}printArea" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="stockStates" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}stockState" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="resources" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="weight" type="{http://www.w3.org/2001/XMLSchema}double" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "productTypeDTO", propOrder = {
    "name",
    "description",
    "brand",
    "shippingFactor",
    "price",
    "defaultValues",
    "appearances",
    "sizes",
    "attributes",
    "washingInstructions",
    "views",
    "printAreas",
    "stockStates",
    "resources"
})
public class ProductTypeDTO
    extends Dto
    implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
{

    protected String name;
    protected String description;
    protected String brand;
    protected Double shippingFactor;
    protected ElementPrice price;
    protected ProductTypeDefaultValuesDTO defaultValues;
    protected ProductTypeDTO.Appearances appearances;
    protected ProductTypeDTO.Sizes sizes;
    protected ProductTypeDTO.Attributes attributes;
    protected ProductTypeDTO.WashingInstructions washingInstructions;
    protected ProductTypeDTO.Views views;
    protected ProductTypeDTO.PrintAreas printAreas;
    protected ProductTypeDTO.StockStates stockStates;
    protected ProductTypeDTO.Resources resources;
    @XmlAttribute(name = "weight")
    protected Double weight;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the brand property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBrand() {
        return brand;
    }

    /**
     * Sets the value of the brand property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBrand(String value) {
        this.brand = value;
    }

    /**
     * Gets the value of the shippingFactor property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getShippingFactor() {
        return shippingFactor;
    }

    /**
     * Sets the value of the shippingFactor property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setShippingFactor(Double value) {
        this.shippingFactor = value;
    }

    /**
     * Gets the value of the price property.
     * 
     * @return
     *     possible object is
     *     {@link ElementPrice }
     *     
     */
    public ElementPrice getPrice() {
        return price;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementPrice }
     *     
     */
    public void setPrice(ElementPrice value) {
        this.price = value;
    }

    /**
     * Gets the value of the defaultValues property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDefaultValuesDTO }
     *     
     */
    public ProductTypeDefaultValuesDTO getDefaultValues() {
        return defaultValues;
    }

    /**
     * Sets the value of the defaultValues property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDefaultValuesDTO }
     *     
     */
    public void setDefaultValues(ProductTypeDefaultValuesDTO value) {
        this.defaultValues = value;
    }

    /**
     * Gets the value of the appearances property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.Appearances }
     *     
     */
    public ProductTypeDTO.Appearances getAppearances() {
        return appearances;
    }

    /**
     * Sets the value of the appearances property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.Appearances }
     *     
     */
    public void setAppearances(ProductTypeDTO.Appearances value) {
        this.appearances = value;
    }

    /**
     * Gets the value of the sizes property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.Sizes }
     *     
     */
    public ProductTypeDTO.Sizes getSizes() {
        return sizes;
    }

    /**
     * Sets the value of the sizes property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.Sizes }
     *     
     */
    public void setSizes(ProductTypeDTO.Sizes value) {
        this.sizes = value;
    }

    /**
     * Gets the value of the attributes property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.Attributes }
     *     
     */
    public ProductTypeDTO.Attributes getAttributes() {
        return attributes;
    }

    /**
     * Sets the value of the attributes property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.Attributes }
     *     
     */
    public void setAttributes(ProductTypeDTO.Attributes value) {
        this.attributes = value;
    }

    /**
     * Gets the value of the washingInstructions property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.WashingInstructions }
     *     
     */
    public ProductTypeDTO.WashingInstructions getWashingInstructions() {
        return washingInstructions;
    }

    /**
     * Sets the value of the washingInstructions property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.WashingInstructions }
     *     
     */
    public void setWashingInstructions(ProductTypeDTO.WashingInstructions value) {
        this.washingInstructions = value;
    }

    /**
     * Gets the value of the views property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.Views }
     *     
     */
    public ProductTypeDTO.Views getViews() {
        return views;
    }

    /**
     * Sets the value of the views property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.Views }
     *     
     */
    public void setViews(ProductTypeDTO.Views value) {
        this.views = value;
    }

    /**
     * Gets the value of the printAreas property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.PrintAreas }
     *     
     */
    public ProductTypeDTO.PrintAreas getPrintAreas() {
        return printAreas;
    }

    /**
     * Sets the value of the printAreas property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.PrintAreas }
     *     
     */
    public void setPrintAreas(ProductTypeDTO.PrintAreas value) {
        this.printAreas = value;
    }

    /**
     * Gets the value of the stockStates property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.StockStates }
     *     
     */
    public ProductTypeDTO.StockStates getStockStates() {
        return stockStates;
    }

    /**
     * Sets the value of the stockStates property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.StockStates }
     *     
     */
    public void setStockStates(ProductTypeDTO.StockStates value) {
        this.stockStates = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link ProductTypeDTO.Resources }
     *     
     */
    public ProductTypeDTO.Resources getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProductTypeDTO.Resources }
     *     
     */
    public void setResources(ProductTypeDTO.Resources value) {
        this.resources = value;
    }

    /**
     * Gets the value of the weight property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getWeight() {
        return weight;
    }

    /**
     * Sets the value of the weight property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setWeight(Double value) {
        this.weight = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            String theBrand;
            theBrand = this.getBrand();
            strategy.appendField(locator, this, "brand", buffer, theBrand);
        }
        {
            Double theShippingFactor;
            theShippingFactor = this.getShippingFactor();
            strategy.appendField(locator, this, "shippingFactor", buffer, theShippingFactor);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            ProductTypeDefaultValuesDTO theDefaultValues;
            theDefaultValues = this.getDefaultValues();
            strategy.appendField(locator, this, "defaultValues", buffer, theDefaultValues);
        }
        {
            ProductTypeDTO.Appearances theAppearances;
            theAppearances = this.getAppearances();
            strategy.appendField(locator, this, "appearances", buffer, theAppearances);
        }
        {
            ProductTypeDTO.Sizes theSizes;
            theSizes = this.getSizes();
            strategy.appendField(locator, this, "sizes", buffer, theSizes);
        }
        {
            ProductTypeDTO.Attributes theAttributes;
            theAttributes = this.getAttributes();
            strategy.appendField(locator, this, "attributes", buffer, theAttributes);
        }
        {
            ProductTypeDTO.WashingInstructions theWashingInstructions;
            theWashingInstructions = this.getWashingInstructions();
            strategy.appendField(locator, this, "washingInstructions", buffer, theWashingInstructions);
        }
        {
            ProductTypeDTO.Views theViews;
            theViews = this.getViews();
            strategy.appendField(locator, this, "views", buffer, theViews);
        }
        {
            ProductTypeDTO.PrintAreas thePrintAreas;
            thePrintAreas = this.getPrintAreas();
            strategy.appendField(locator, this, "printAreas", buffer, thePrintAreas);
        }
        {
            ProductTypeDTO.StockStates theStockStates;
            theStockStates = this.getStockStates();
            strategy.appendField(locator, this, "stockStates", buffer, theStockStates);
        }
        {
            ProductTypeDTO.Resources theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            strategy.appendField(locator, this, "weight", buffer, theWeight);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProductTypeDTO)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProductTypeDTO that = ((ProductTypeDTO) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            String lhsBrand;
            lhsBrand = this.getBrand();
            String rhsBrand;
            rhsBrand = that.getBrand();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "brand", lhsBrand), LocatorUtils.property(thatLocator, "brand", rhsBrand), lhsBrand, rhsBrand)) {
                return false;
            }
        }
        {
            Double lhsShippingFactor;
            lhsShippingFactor = this.getShippingFactor();
            Double rhsShippingFactor;
            rhsShippingFactor = that.getShippingFactor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shippingFactor", lhsShippingFactor), LocatorUtils.property(thatLocator, "shippingFactor", rhsShippingFactor), lhsShippingFactor, rhsShippingFactor)) {
                return false;
            }
        }
        {
            ElementPrice lhsPrice;
            lhsPrice = this.getPrice();
            ElementPrice rhsPrice;
            rhsPrice = that.getPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            ProductTypeDefaultValuesDTO lhsDefaultValues;
            lhsDefaultValues = this.getDefaultValues();
            ProductTypeDefaultValuesDTO rhsDefaultValues;
            rhsDefaultValues = that.getDefaultValues();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultValues", lhsDefaultValues), LocatorUtils.property(thatLocator, "defaultValues", rhsDefaultValues), lhsDefaultValues, rhsDefaultValues)) {
                return false;
            }
        }
        {
            ProductTypeDTO.Appearances lhsAppearances;
            lhsAppearances = this.getAppearances();
            ProductTypeDTO.Appearances rhsAppearances;
            rhsAppearances = that.getAppearances();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appearances", lhsAppearances), LocatorUtils.property(thatLocator, "appearances", rhsAppearances), lhsAppearances, rhsAppearances)) {
                return false;
            }
        }
        {
            ProductTypeDTO.Sizes lhsSizes;
            lhsSizes = this.getSizes();
            ProductTypeDTO.Sizes rhsSizes;
            rhsSizes = that.getSizes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sizes", lhsSizes), LocatorUtils.property(thatLocator, "sizes", rhsSizes), lhsSizes, rhsSizes)) {
                return false;
            }
        }
        {
            ProductTypeDTO.Attributes lhsAttributes;
            lhsAttributes = this.getAttributes();
            ProductTypeDTO.Attributes rhsAttributes;
            rhsAttributes = that.getAttributes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "attributes", lhsAttributes), LocatorUtils.property(thatLocator, "attributes", rhsAttributes), lhsAttributes, rhsAttributes)) {
                return false;
            }
        }
        {
            ProductTypeDTO.WashingInstructions lhsWashingInstructions;
            lhsWashingInstructions = this.getWashingInstructions();
            ProductTypeDTO.WashingInstructions rhsWashingInstructions;
            rhsWashingInstructions = that.getWashingInstructions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "washingInstructions", lhsWashingInstructions), LocatorUtils.property(thatLocator, "washingInstructions", rhsWashingInstructions), lhsWashingInstructions, rhsWashingInstructions)) {
                return false;
            }
        }
        {
            ProductTypeDTO.Views lhsViews;
            lhsViews = this.getViews();
            ProductTypeDTO.Views rhsViews;
            rhsViews = that.getViews();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "views", lhsViews), LocatorUtils.property(thatLocator, "views", rhsViews), lhsViews, rhsViews)) {
                return false;
            }
        }
        {
            ProductTypeDTO.PrintAreas lhsPrintAreas;
            lhsPrintAreas = this.getPrintAreas();
            ProductTypeDTO.PrintAreas rhsPrintAreas;
            rhsPrintAreas = that.getPrintAreas();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "printAreas", lhsPrintAreas), LocatorUtils.property(thatLocator, "printAreas", rhsPrintAreas), lhsPrintAreas, rhsPrintAreas)) {
                return false;
            }
        }
        {
            ProductTypeDTO.StockStates lhsStockStates;
            lhsStockStates = this.getStockStates();
            ProductTypeDTO.StockStates rhsStockStates;
            rhsStockStates = that.getStockStates();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stockStates", lhsStockStates), LocatorUtils.property(thatLocator, "stockStates", rhsStockStates), lhsStockStates, rhsStockStates)) {
                return false;
            }
        }
        {
            ProductTypeDTO.Resources lhsResources;
            lhsResources = this.getResources();
            ProductTypeDTO.Resources rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            Double lhsWeight;
            lhsWeight = this.getWeight();
            Double rhsWeight;
            rhsWeight = that.getWeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "weight", lhsWeight), LocatorUtils.property(thatLocator, "weight", rhsWeight), lhsWeight, rhsWeight)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            String theBrand;
            theBrand = this.getBrand();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brand", theBrand), currentHashCode, theBrand);
        }
        {
            Double theShippingFactor;
            theShippingFactor = this.getShippingFactor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shippingFactor", theShippingFactor), currentHashCode, theShippingFactor);
        }
        {
            ElementPrice thePrice;
            thePrice = this.getPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            ProductTypeDefaultValuesDTO theDefaultValues;
            theDefaultValues = this.getDefaultValues();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultValues", theDefaultValues), currentHashCode, theDefaultValues);
        }
        {
            ProductTypeDTO.Appearances theAppearances;
            theAppearances = this.getAppearances();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appearances", theAppearances), currentHashCode, theAppearances);
        }
        {
            ProductTypeDTO.Sizes theSizes;
            theSizes = this.getSizes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sizes", theSizes), currentHashCode, theSizes);
        }
        {
            ProductTypeDTO.Attributes theAttributes;
            theAttributes = this.getAttributes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attributes", theAttributes), currentHashCode, theAttributes);
        }
        {
            ProductTypeDTO.WashingInstructions theWashingInstructions;
            theWashingInstructions = this.getWashingInstructions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "washingInstructions", theWashingInstructions), currentHashCode, theWashingInstructions);
        }
        {
            ProductTypeDTO.Views theViews;
            theViews = this.getViews();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "views", theViews), currentHashCode, theViews);
        }
        {
            ProductTypeDTO.PrintAreas thePrintAreas;
            thePrintAreas = this.getPrintAreas();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printAreas", thePrintAreas), currentHashCode, thePrintAreas);
        }
        {
            ProductTypeDTO.StockStates theStockStates;
            theStockStates = this.getStockStates();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stockStates", theStockStates), currentHashCode, theStockStates);
        }
        {
            ProductTypeDTO.Resources theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            Double theWeight;
            theWeight = this.getWeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "weight", theWeight), currentHashCode, theWeight);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ProductTypeDTO) {
            final ProductTypeDTO copy = ((ProductTypeDTO) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.brand!= null) {
                String sourceBrand;
                sourceBrand = this.getBrand();
                String copyBrand = ((String) strategy.copy(LocatorUtils.property(locator, "brand", sourceBrand), sourceBrand));
                copy.setBrand(copyBrand);
            } else {
                copy.brand = null;
            }
            if (this.shippingFactor!= null) {
                Double sourceShippingFactor;
                sourceShippingFactor = this.getShippingFactor();
                Double copyShippingFactor = ((Double) strategy.copy(LocatorUtils.property(locator, "shippingFactor", sourceShippingFactor), sourceShippingFactor));
                copy.setShippingFactor(copyShippingFactor);
            } else {
                copy.shippingFactor = null;
            }
            if (this.price!= null) {
                ElementPrice sourcePrice;
                sourcePrice = this.getPrice();
                ElementPrice copyPrice = ((ElementPrice) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
                copy.setPrice(copyPrice);
            } else {
                copy.price = null;
            }
            if (this.defaultValues!= null) {
                ProductTypeDefaultValuesDTO sourceDefaultValues;
                sourceDefaultValues = this.getDefaultValues();
                ProductTypeDefaultValuesDTO copyDefaultValues = ((ProductTypeDefaultValuesDTO) strategy.copy(LocatorUtils.property(locator, "defaultValues", sourceDefaultValues), sourceDefaultValues));
                copy.setDefaultValues(copyDefaultValues);
            } else {
                copy.defaultValues = null;
            }
            if (this.appearances!= null) {
                ProductTypeDTO.Appearances sourceAppearances;
                sourceAppearances = this.getAppearances();
                ProductTypeDTO.Appearances copyAppearances = ((ProductTypeDTO.Appearances) strategy.copy(LocatorUtils.property(locator, "appearances", sourceAppearances), sourceAppearances));
                copy.setAppearances(copyAppearances);
            } else {
                copy.appearances = null;
            }
            if (this.sizes!= null) {
                ProductTypeDTO.Sizes sourceSizes;
                sourceSizes = this.getSizes();
                ProductTypeDTO.Sizes copySizes = ((ProductTypeDTO.Sizes) strategy.copy(LocatorUtils.property(locator, "sizes", sourceSizes), sourceSizes));
                copy.setSizes(copySizes);
            } else {
                copy.sizes = null;
            }
            if (this.attributes!= null) {
                ProductTypeDTO.Attributes sourceAttributes;
                sourceAttributes = this.getAttributes();
                ProductTypeDTO.Attributes copyAttributes = ((ProductTypeDTO.Attributes) strategy.copy(LocatorUtils.property(locator, "attributes", sourceAttributes), sourceAttributes));
                copy.setAttributes(copyAttributes);
            } else {
                copy.attributes = null;
            }
            if (this.washingInstructions!= null) {
                ProductTypeDTO.WashingInstructions sourceWashingInstructions;
                sourceWashingInstructions = this.getWashingInstructions();
                ProductTypeDTO.WashingInstructions copyWashingInstructions = ((ProductTypeDTO.WashingInstructions) strategy.copy(LocatorUtils.property(locator, "washingInstructions", sourceWashingInstructions), sourceWashingInstructions));
                copy.setWashingInstructions(copyWashingInstructions);
            } else {
                copy.washingInstructions = null;
            }
            if (this.views!= null) {
                ProductTypeDTO.Views sourceViews;
                sourceViews = this.getViews();
                ProductTypeDTO.Views copyViews = ((ProductTypeDTO.Views) strategy.copy(LocatorUtils.property(locator, "views", sourceViews), sourceViews));
                copy.setViews(copyViews);
            } else {
                copy.views = null;
            }
            if (this.printAreas!= null) {
                ProductTypeDTO.PrintAreas sourcePrintAreas;
                sourcePrintAreas = this.getPrintAreas();
                ProductTypeDTO.PrintAreas copyPrintAreas = ((ProductTypeDTO.PrintAreas) strategy.copy(LocatorUtils.property(locator, "printAreas", sourcePrintAreas), sourcePrintAreas));
                copy.setPrintAreas(copyPrintAreas);
            } else {
                copy.printAreas = null;
            }
            if (this.stockStates!= null) {
                ProductTypeDTO.StockStates sourceStockStates;
                sourceStockStates = this.getStockStates();
                ProductTypeDTO.StockStates copyStockStates = ((ProductTypeDTO.StockStates) strategy.copy(LocatorUtils.property(locator, "stockStates", sourceStockStates), sourceStockStates));
                copy.setStockStates(copyStockStates);
            } else {
                copy.stockStates = null;
            }
            if (this.resources!= null) {
                ProductTypeDTO.Resources sourceResources;
                sourceResources = this.getResources();
                ProductTypeDTO.Resources copyResources = ((ProductTypeDTO.Resources) strategy.copy(LocatorUtils.property(locator, "resources", sourceResources), sourceResources));
                copy.setResources(copyResources);
            } else {
                copy.resources = null;
            }
            if (this.weight!= null) {
                Double sourceWeight;
                sourceWeight = this.getWeight();
                Double copyWeight = ((Double) strategy.copy(LocatorUtils.property(locator, "weight", sourceWeight), sourceWeight));
                copy.setWeight(copyWeight);
            } else {
                copy.weight = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ProductTypeDTO();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof ProductTypeDTO) {
            final ProductTypeDTO target = this;
            final ProductTypeDTO leftObject = ((ProductTypeDTO) left);
            final ProductTypeDTO rightObject = ((ProductTypeDTO) right);
            {
                String lhsName;
                lhsName = leftObject.getName();
                String rhsName;
                rhsName = rightObject.getName();
                String mergedName = ((String) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName));
                target.setName(mergedName);
            }
            {
                String lhsDescription;
                lhsDescription = leftObject.getDescription();
                String rhsDescription;
                rhsDescription = rightObject.getDescription();
                String mergedDescription = ((String) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription));
                target.setDescription(mergedDescription);
            }
            {
                String lhsBrand;
                lhsBrand = leftObject.getBrand();
                String rhsBrand;
                rhsBrand = rightObject.getBrand();
                String mergedBrand = ((String) strategy.merge(LocatorUtils.property(leftLocator, "brand", lhsBrand), LocatorUtils.property(rightLocator, "brand", rhsBrand), lhsBrand, rhsBrand));
                target.setBrand(mergedBrand);
            }
            {
                Double lhsShippingFactor;
                lhsShippingFactor = leftObject.getShippingFactor();
                Double rhsShippingFactor;
                rhsShippingFactor = rightObject.getShippingFactor();
                Double mergedShippingFactor = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "shippingFactor", lhsShippingFactor), LocatorUtils.property(rightLocator, "shippingFactor", rhsShippingFactor), lhsShippingFactor, rhsShippingFactor));
                target.setShippingFactor(mergedShippingFactor);
            }
            {
                ElementPrice lhsPrice;
                lhsPrice = leftObject.getPrice();
                ElementPrice rhsPrice;
                rhsPrice = rightObject.getPrice();
                ElementPrice mergedPrice = ((ElementPrice) strategy.merge(LocatorUtils.property(leftLocator, "price", lhsPrice), LocatorUtils.property(rightLocator, "price", rhsPrice), lhsPrice, rhsPrice));
                target.setPrice(mergedPrice);
            }
            {
                ProductTypeDefaultValuesDTO lhsDefaultValues;
                lhsDefaultValues = leftObject.getDefaultValues();
                ProductTypeDefaultValuesDTO rhsDefaultValues;
                rhsDefaultValues = rightObject.getDefaultValues();
                ProductTypeDefaultValuesDTO mergedDefaultValues = ((ProductTypeDefaultValuesDTO) strategy.merge(LocatorUtils.property(leftLocator, "defaultValues", lhsDefaultValues), LocatorUtils.property(rightLocator, "defaultValues", rhsDefaultValues), lhsDefaultValues, rhsDefaultValues));
                target.setDefaultValues(mergedDefaultValues);
            }
            {
                ProductTypeDTO.Appearances lhsAppearances;
                lhsAppearances = leftObject.getAppearances();
                ProductTypeDTO.Appearances rhsAppearances;
                rhsAppearances = rightObject.getAppearances();
                ProductTypeDTO.Appearances mergedAppearances = ((ProductTypeDTO.Appearances) strategy.merge(LocatorUtils.property(leftLocator, "appearances", lhsAppearances), LocatorUtils.property(rightLocator, "appearances", rhsAppearances), lhsAppearances, rhsAppearances));
                target.setAppearances(mergedAppearances);
            }
            {
                ProductTypeDTO.Sizes lhsSizes;
                lhsSizes = leftObject.getSizes();
                ProductTypeDTO.Sizes rhsSizes;
                rhsSizes = rightObject.getSizes();
                ProductTypeDTO.Sizes mergedSizes = ((ProductTypeDTO.Sizes) strategy.merge(LocatorUtils.property(leftLocator, "sizes", lhsSizes), LocatorUtils.property(rightLocator, "sizes", rhsSizes), lhsSizes, rhsSizes));
                target.setSizes(mergedSizes);
            }
            {
                ProductTypeDTO.Attributes lhsAttributes;
                lhsAttributes = leftObject.getAttributes();
                ProductTypeDTO.Attributes rhsAttributes;
                rhsAttributes = rightObject.getAttributes();
                ProductTypeDTO.Attributes mergedAttributes = ((ProductTypeDTO.Attributes) strategy.merge(LocatorUtils.property(leftLocator, "attributes", lhsAttributes), LocatorUtils.property(rightLocator, "attributes", rhsAttributes), lhsAttributes, rhsAttributes));
                target.setAttributes(mergedAttributes);
            }
            {
                ProductTypeDTO.WashingInstructions lhsWashingInstructions;
                lhsWashingInstructions = leftObject.getWashingInstructions();
                ProductTypeDTO.WashingInstructions rhsWashingInstructions;
                rhsWashingInstructions = rightObject.getWashingInstructions();
                ProductTypeDTO.WashingInstructions mergedWashingInstructions = ((ProductTypeDTO.WashingInstructions) strategy.merge(LocatorUtils.property(leftLocator, "washingInstructions", lhsWashingInstructions), LocatorUtils.property(rightLocator, "washingInstructions", rhsWashingInstructions), lhsWashingInstructions, rhsWashingInstructions));
                target.setWashingInstructions(mergedWashingInstructions);
            }
            {
                ProductTypeDTO.Views lhsViews;
                lhsViews = leftObject.getViews();
                ProductTypeDTO.Views rhsViews;
                rhsViews = rightObject.getViews();
                ProductTypeDTO.Views mergedViews = ((ProductTypeDTO.Views) strategy.merge(LocatorUtils.property(leftLocator, "views", lhsViews), LocatorUtils.property(rightLocator, "views", rhsViews), lhsViews, rhsViews));
                target.setViews(mergedViews);
            }
            {
                ProductTypeDTO.PrintAreas lhsPrintAreas;
                lhsPrintAreas = leftObject.getPrintAreas();
                ProductTypeDTO.PrintAreas rhsPrintAreas;
                rhsPrintAreas = rightObject.getPrintAreas();
                ProductTypeDTO.PrintAreas mergedPrintAreas = ((ProductTypeDTO.PrintAreas) strategy.merge(LocatorUtils.property(leftLocator, "printAreas", lhsPrintAreas), LocatorUtils.property(rightLocator, "printAreas", rhsPrintAreas), lhsPrintAreas, rhsPrintAreas));
                target.setPrintAreas(mergedPrintAreas);
            }
            {
                ProductTypeDTO.StockStates lhsStockStates;
                lhsStockStates = leftObject.getStockStates();
                ProductTypeDTO.StockStates rhsStockStates;
                rhsStockStates = rightObject.getStockStates();
                ProductTypeDTO.StockStates mergedStockStates = ((ProductTypeDTO.StockStates) strategy.merge(LocatorUtils.property(leftLocator, "stockStates", lhsStockStates), LocatorUtils.property(rightLocator, "stockStates", rhsStockStates), lhsStockStates, rhsStockStates));
                target.setStockStates(mergedStockStates);
            }
            {
                ProductTypeDTO.Resources lhsResources;
                lhsResources = leftObject.getResources();
                ProductTypeDTO.Resources rhsResources;
                rhsResources = rightObject.getResources();
                ProductTypeDTO.Resources mergedResources = ((ProductTypeDTO.Resources) strategy.merge(LocatorUtils.property(leftLocator, "resources", lhsResources), LocatorUtils.property(rightLocator, "resources", rhsResources), lhsResources, rhsResources));
                target.setResources(mergedResources);
            }
            {
                Double lhsWeight;
                lhsWeight = leftObject.getWeight();
                Double rhsWeight;
                rhsWeight = rightObject.getWeight();
                Double mergedWeight = ((Double) strategy.merge(LocatorUtils.property(leftLocator, "weight", lhsWeight), LocatorUtils.property(rightLocator, "weight", rhsWeight), lhsWeight, rhsWeight));
                target.setWeight(mergedWeight);
            }
        }
    }

    public ProductTypeDTO withName(String value) {
        setName(value);
        return this;
    }

    public ProductTypeDTO withDescription(String value) {
        setDescription(value);
        return this;
    }

    public ProductTypeDTO withBrand(String value) {
        setBrand(value);
        return this;
    }

    public ProductTypeDTO withShippingFactor(Double value) {
        setShippingFactor(value);
        return this;
    }

    public ProductTypeDTO withPrice(ElementPrice value) {
        setPrice(value);
        return this;
    }

    public ProductTypeDTO withDefaultValues(ProductTypeDefaultValuesDTO value) {
        setDefaultValues(value);
        return this;
    }

    public ProductTypeDTO withAppearances(ProductTypeDTO.Appearances value) {
        setAppearances(value);
        return this;
    }

    public ProductTypeDTO withSizes(ProductTypeDTO.Sizes value) {
        setSizes(value);
        return this;
    }

    public ProductTypeDTO withAttributes(ProductTypeDTO.Attributes value) {
        setAttributes(value);
        return this;
    }

    public ProductTypeDTO withWashingInstructions(ProductTypeDTO.WashingInstructions value) {
        setWashingInstructions(value);
        return this;
    }

    public ProductTypeDTO withViews(ProductTypeDTO.Views value) {
        setViews(value);
        return this;
    }

    public ProductTypeDTO withPrintAreas(ProductTypeDTO.PrintAreas value) {
        setPrintAreas(value);
        return this;
    }

    public ProductTypeDTO withStockStates(ProductTypeDTO.StockStates value) {
        setStockStates(value);
        return this;
    }

    public ProductTypeDTO withResources(ProductTypeDTO.Resources value) {
        setResources(value);
        return this;
    }

    public ProductTypeDTO withWeight(Double value) {
        setWeight(value);
        return this;
    }

    @Override
    public ProductTypeDTO withId(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProductTypeDTO withHref(String value) {
        setHref(value);
        return this;
    }

    @Override
    public ProductTypeDTO withLifeCycleState(String value) {
        setLifeCycleState(value);
        return this;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}appearance" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "appearance"
    })
    public static class Appearances
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeAppearanceDTO> appearance;

        /**
         * Gets the value of the appearance property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the appearance property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAppearance().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeAppearanceDTO }
         * 
         * 
         */
        public List<ProductTypeAppearanceDTO> getAppearance() {
            if (appearance == null) {
                appearance = new ArrayList<ProductTypeAppearanceDTO>();
            }
            return this.appearance;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeAppearanceDTO> theAppearance;
                theAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
                strategy.appendField(locator, this, "appearance", buffer, theAppearance);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.Appearances)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.Appearances that = ((ProductTypeDTO.Appearances) object);
            {
                List<ProductTypeAppearanceDTO> lhsAppearance;
                lhsAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
                List<ProductTypeAppearanceDTO> rhsAppearance;
                rhsAppearance = (((that.appearance!= null)&&(!that.appearance.isEmpty()))?that.getAppearance():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "appearance", lhsAppearance), LocatorUtils.property(thatLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeAppearanceDTO> theAppearance;
                theAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appearance", theAppearance), currentHashCode, theAppearance);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.Appearances) {
                final ProductTypeDTO.Appearances copy = ((ProductTypeDTO.Appearances) draftCopy);
                if ((this.appearance!= null)&&(!this.appearance.isEmpty())) {
                    List<ProductTypeAppearanceDTO> sourceAppearance;
                    sourceAppearance = (((this.appearance!= null)&&(!this.appearance.isEmpty()))?this.getAppearance():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeAppearanceDTO> copyAppearance = ((List<ProductTypeAppearanceDTO> ) strategy.copy(LocatorUtils.property(locator, "appearance", sourceAppearance), sourceAppearance));
                    copy.appearance = null;
                    if (copyAppearance!= null) {
                        List<ProductTypeAppearanceDTO> uniqueAppearancel = copy.getAppearance();
                        uniqueAppearancel.addAll(copyAppearance);
                    }
                } else {
                    copy.appearance = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.Appearances();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.Appearances) {
                final ProductTypeDTO.Appearances target = this;
                final ProductTypeDTO.Appearances leftObject = ((ProductTypeDTO.Appearances) left);
                final ProductTypeDTO.Appearances rightObject = ((ProductTypeDTO.Appearances) right);
                {
                    List<ProductTypeAppearanceDTO> lhsAppearance;
                    lhsAppearance = (((leftObject.appearance!= null)&&(!leftObject.appearance.isEmpty()))?leftObject.getAppearance():null);
                    List<ProductTypeAppearanceDTO> rhsAppearance;
                    rhsAppearance = (((rightObject.appearance!= null)&&(!rightObject.appearance.isEmpty()))?rightObject.getAppearance():null);
                    List<ProductTypeAppearanceDTO> mergedAppearance = ((List<ProductTypeAppearanceDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "appearance", lhsAppearance), LocatorUtils.property(rightLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance));
                    target.appearance = null;
                    if (mergedAppearance!= null) {
                        List<ProductTypeAppearanceDTO> uniqueAppearancel = target.getAppearance();
                        uniqueAppearancel.addAll(mergedAppearance);
                    }
                }
            }
        }

        public ProductTypeDTO.Appearances withAppearance(ProductTypeAppearanceDTO... values) {
            if (values!= null) {
                for (ProductTypeAppearanceDTO value: values) {
                    getAppearance().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.Appearances withAppearance(Collection<ProductTypeAppearanceDTO> values) {
            if (values!= null) {
                getAppearance().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}attribute" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "attribute"
    })
    public static class Attributes
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeAttributeDTO> attribute;

        /**
         * Gets the value of the attribute property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the attribute property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAttribute().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeAttributeDTO }
         * 
         * 
         */
        public List<ProductTypeAttributeDTO> getAttribute() {
            if (attribute == null) {
                attribute = new ArrayList<ProductTypeAttributeDTO>();
            }
            return this.attribute;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeAttributeDTO> theAttribute;
                theAttribute = (((this.attribute!= null)&&(!this.attribute.isEmpty()))?this.getAttribute():null);
                strategy.appendField(locator, this, "attribute", buffer, theAttribute);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.Attributes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.Attributes that = ((ProductTypeDTO.Attributes) object);
            {
                List<ProductTypeAttributeDTO> lhsAttribute;
                lhsAttribute = (((this.attribute!= null)&&(!this.attribute.isEmpty()))?this.getAttribute():null);
                List<ProductTypeAttributeDTO> rhsAttribute;
                rhsAttribute = (((that.attribute!= null)&&(!that.attribute.isEmpty()))?that.getAttribute():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "attribute", lhsAttribute), LocatorUtils.property(thatLocator, "attribute", rhsAttribute), lhsAttribute, rhsAttribute)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeAttributeDTO> theAttribute;
                theAttribute = (((this.attribute!= null)&&(!this.attribute.isEmpty()))?this.getAttribute():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attribute", theAttribute), currentHashCode, theAttribute);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.Attributes) {
                final ProductTypeDTO.Attributes copy = ((ProductTypeDTO.Attributes) draftCopy);
                if ((this.attribute!= null)&&(!this.attribute.isEmpty())) {
                    List<ProductTypeAttributeDTO> sourceAttribute;
                    sourceAttribute = (((this.attribute!= null)&&(!this.attribute.isEmpty()))?this.getAttribute():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeAttributeDTO> copyAttribute = ((List<ProductTypeAttributeDTO> ) strategy.copy(LocatorUtils.property(locator, "attribute", sourceAttribute), sourceAttribute));
                    copy.attribute = null;
                    if (copyAttribute!= null) {
                        List<ProductTypeAttributeDTO> uniqueAttributel = copy.getAttribute();
                        uniqueAttributel.addAll(copyAttribute);
                    }
                } else {
                    copy.attribute = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.Attributes();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.Attributes) {
                final ProductTypeDTO.Attributes target = this;
                final ProductTypeDTO.Attributes leftObject = ((ProductTypeDTO.Attributes) left);
                final ProductTypeDTO.Attributes rightObject = ((ProductTypeDTO.Attributes) right);
                {
                    List<ProductTypeAttributeDTO> lhsAttribute;
                    lhsAttribute = (((leftObject.attribute!= null)&&(!leftObject.attribute.isEmpty()))?leftObject.getAttribute():null);
                    List<ProductTypeAttributeDTO> rhsAttribute;
                    rhsAttribute = (((rightObject.attribute!= null)&&(!rightObject.attribute.isEmpty()))?rightObject.getAttribute():null);
                    List<ProductTypeAttributeDTO> mergedAttribute = ((List<ProductTypeAttributeDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "attribute", lhsAttribute), LocatorUtils.property(rightLocator, "attribute", rhsAttribute), lhsAttribute, rhsAttribute));
                    target.attribute = null;
                    if (mergedAttribute!= null) {
                        List<ProductTypeAttributeDTO> uniqueAttributel = target.getAttribute();
                        uniqueAttributel.addAll(mergedAttribute);
                    }
                }
            }
        }

        public ProductTypeDTO.Attributes withAttribute(ProductTypeAttributeDTO... values) {
            if (values!= null) {
                for (ProductTypeAttributeDTO value: values) {
                    getAttribute().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.Attributes withAttribute(Collection<ProductTypeAttributeDTO> values) {
            if (values!= null) {
                getAttribute().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}printArea" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "printArea"
    })
    public static class PrintAreas
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<PrintAreaDTO> printArea;

        /**
         * Gets the value of the printArea property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the printArea property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPrintArea().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link PrintAreaDTO }
         * 
         * 
         */
        public List<PrintAreaDTO> getPrintArea() {
            if (printArea == null) {
                printArea = new ArrayList<PrintAreaDTO>();
            }
            return this.printArea;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<PrintAreaDTO> thePrintArea;
                thePrintArea = (((this.printArea!= null)&&(!this.printArea.isEmpty()))?this.getPrintArea():null);
                strategy.appendField(locator, this, "printArea", buffer, thePrintArea);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.PrintAreas)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.PrintAreas that = ((ProductTypeDTO.PrintAreas) object);
            {
                List<PrintAreaDTO> lhsPrintArea;
                lhsPrintArea = (((this.printArea!= null)&&(!this.printArea.isEmpty()))?this.getPrintArea():null);
                List<PrintAreaDTO> rhsPrintArea;
                rhsPrintArea = (((that.printArea!= null)&&(!that.printArea.isEmpty()))?that.getPrintArea():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "printArea", lhsPrintArea), LocatorUtils.property(thatLocator, "printArea", rhsPrintArea), lhsPrintArea, rhsPrintArea)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<PrintAreaDTO> thePrintArea;
                thePrintArea = (((this.printArea!= null)&&(!this.printArea.isEmpty()))?this.getPrintArea():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "printArea", thePrintArea), currentHashCode, thePrintArea);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.PrintAreas) {
                final ProductTypeDTO.PrintAreas copy = ((ProductTypeDTO.PrintAreas) draftCopy);
                if ((this.printArea!= null)&&(!this.printArea.isEmpty())) {
                    List<PrintAreaDTO> sourcePrintArea;
                    sourcePrintArea = (((this.printArea!= null)&&(!this.printArea.isEmpty()))?this.getPrintArea():null);
                    @SuppressWarnings("unchecked")
                    List<PrintAreaDTO> copyPrintArea = ((List<PrintAreaDTO> ) strategy.copy(LocatorUtils.property(locator, "printArea", sourcePrintArea), sourcePrintArea));
                    copy.printArea = null;
                    if (copyPrintArea!= null) {
                        List<PrintAreaDTO> uniquePrintAreal = copy.getPrintArea();
                        uniquePrintAreal.addAll(copyPrintArea);
                    }
                } else {
                    copy.printArea = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.PrintAreas();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.PrintAreas) {
                final ProductTypeDTO.PrintAreas target = this;
                final ProductTypeDTO.PrintAreas leftObject = ((ProductTypeDTO.PrintAreas) left);
                final ProductTypeDTO.PrintAreas rightObject = ((ProductTypeDTO.PrintAreas) right);
                {
                    List<PrintAreaDTO> lhsPrintArea;
                    lhsPrintArea = (((leftObject.printArea!= null)&&(!leftObject.printArea.isEmpty()))?leftObject.getPrintArea():null);
                    List<PrintAreaDTO> rhsPrintArea;
                    rhsPrintArea = (((rightObject.printArea!= null)&&(!rightObject.printArea.isEmpty()))?rightObject.getPrintArea():null);
                    List<PrintAreaDTO> mergedPrintArea = ((List<PrintAreaDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "printArea", lhsPrintArea), LocatorUtils.property(rightLocator, "printArea", rhsPrintArea), lhsPrintArea, rhsPrintArea));
                    target.printArea = null;
                    if (mergedPrintArea!= null) {
                        List<PrintAreaDTO> uniquePrintAreal = target.getPrintArea();
                        uniquePrintAreal.addAll(mergedPrintArea);
                    }
                }
            }
        }

        public ProductTypeDTO.PrintAreas withPrintArea(PrintAreaDTO... values) {
            if (values!= null) {
                for (PrintAreaDTO value: values) {
                    getPrintArea().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.PrintAreas withPrintArea(Collection<PrintAreaDTO> values) {
            if (values!= null) {
                getPrintArea().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}resource" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "resource"
    })
    public static class Resources
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<Resource> resource;

        /**
         * Gets the value of the resource property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the resource property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getResource().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Resource }
         * 
         * 
         */
        public List<Resource> getResource() {
            if (resource == null) {
                resource = new ArrayList<Resource>();
            }
            return this.resource;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                strategy.appendField(locator, this, "resource", buffer, theResource);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.Resources)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.Resources that = ((ProductTypeDTO.Resources) object);
            {
                List<Resource> lhsResource;
                lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                List<Resource> rhsResource;
                rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Resource> theResource;
                theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.Resources) {
                final ProductTypeDTO.Resources copy = ((ProductTypeDTO.Resources) draftCopy);
                if ((this.resource!= null)&&(!this.resource.isEmpty())) {
                    List<Resource> sourceResource;
                    sourceResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
                    @SuppressWarnings("unchecked")
                    List<Resource> copyResource = ((List<Resource> ) strategy.copy(LocatorUtils.property(locator, "resource", sourceResource), sourceResource));
                    copy.resource = null;
                    if (copyResource!= null) {
                        List<Resource> uniqueResourcel = copy.getResource();
                        uniqueResourcel.addAll(copyResource);
                    }
                } else {
                    copy.resource = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.Resources();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.Resources) {
                final ProductTypeDTO.Resources target = this;
                final ProductTypeDTO.Resources leftObject = ((ProductTypeDTO.Resources) left);
                final ProductTypeDTO.Resources rightObject = ((ProductTypeDTO.Resources) right);
                {
                    List<Resource> lhsResource;
                    lhsResource = (((leftObject.resource!= null)&&(!leftObject.resource.isEmpty()))?leftObject.getResource():null);
                    List<Resource> rhsResource;
                    rhsResource = (((rightObject.resource!= null)&&(!rightObject.resource.isEmpty()))?rightObject.getResource():null);
                    List<Resource> mergedResource = ((List<Resource> ) strategy.merge(LocatorUtils.property(leftLocator, "resource", lhsResource), LocatorUtils.property(rightLocator, "resource", rhsResource), lhsResource, rhsResource));
                    target.resource = null;
                    if (mergedResource!= null) {
                        List<Resource> uniqueResourcel = target.getResource();
                        uniqueResourcel.addAll(mergedResource);
                    }
                }
            }
        }

        public ProductTypeDTO.Resources withResource(Resource... values) {
            if (values!= null) {
                for (Resource value: values) {
                    getResource().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.Resources withResource(Collection<Resource> values) {
            if (values!= null) {
                getResource().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}size" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "size"
    })
    public static class Sizes
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeSizeDTO> size;

        /**
         * Gets the value of the size property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the size property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSize().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeSizeDTO }
         * 
         * 
         */
        public List<ProductTypeSizeDTO> getSize() {
            if (size == null) {
                size = new ArrayList<ProductTypeSizeDTO>();
            }
            return this.size;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeSizeDTO> theSize;
                theSize = (((this.size!= null)&&(!this.size.isEmpty()))?this.getSize():null);
                strategy.appendField(locator, this, "size", buffer, theSize);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.Sizes)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.Sizes that = ((ProductTypeDTO.Sizes) object);
            {
                List<ProductTypeSizeDTO> lhsSize;
                lhsSize = (((this.size!= null)&&(!this.size.isEmpty()))?this.getSize():null);
                List<ProductTypeSizeDTO> rhsSize;
                rhsSize = (((that.size!= null)&&(!that.size.isEmpty()))?that.getSize():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "size", lhsSize), LocatorUtils.property(thatLocator, "size", rhsSize), lhsSize, rhsSize)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeSizeDTO> theSize;
                theSize = (((this.size!= null)&&(!this.size.isEmpty()))?this.getSize():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "size", theSize), currentHashCode, theSize);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.Sizes) {
                final ProductTypeDTO.Sizes copy = ((ProductTypeDTO.Sizes) draftCopy);
                if ((this.size!= null)&&(!this.size.isEmpty())) {
                    List<ProductTypeSizeDTO> sourceSize;
                    sourceSize = (((this.size!= null)&&(!this.size.isEmpty()))?this.getSize():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeSizeDTO> copySize = ((List<ProductTypeSizeDTO> ) strategy.copy(LocatorUtils.property(locator, "size", sourceSize), sourceSize));
                    copy.size = null;
                    if (copySize!= null) {
                        List<ProductTypeSizeDTO> uniqueSizel = copy.getSize();
                        uniqueSizel.addAll(copySize);
                    }
                } else {
                    copy.size = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.Sizes();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.Sizes) {
                final ProductTypeDTO.Sizes target = this;
                final ProductTypeDTO.Sizes leftObject = ((ProductTypeDTO.Sizes) left);
                final ProductTypeDTO.Sizes rightObject = ((ProductTypeDTO.Sizes) right);
                {
                    List<ProductTypeSizeDTO> lhsSize;
                    lhsSize = (((leftObject.size!= null)&&(!leftObject.size.isEmpty()))?leftObject.getSize():null);
                    List<ProductTypeSizeDTO> rhsSize;
                    rhsSize = (((rightObject.size!= null)&&(!rightObject.size.isEmpty()))?rightObject.getSize():null);
                    List<ProductTypeSizeDTO> mergedSize = ((List<ProductTypeSizeDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "size", lhsSize), LocatorUtils.property(rightLocator, "size", rhsSize), lhsSize, rhsSize));
                    target.size = null;
                    if (mergedSize!= null) {
                        List<ProductTypeSizeDTO> uniqueSizel = target.getSize();
                        uniqueSizel.addAll(mergedSize);
                    }
                }
            }
        }

        public ProductTypeDTO.Sizes withSize(ProductTypeSizeDTO... values) {
            if (values!= null) {
                for (ProductTypeSizeDTO value: values) {
                    getSize().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.Sizes withSize(Collection<ProductTypeSizeDTO> values) {
            if (values!= null) {
                getSize().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}stockState" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "stockState"
    })
    public static class StockStates
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeStockStateDTO> stockState;

        /**
         * Gets the value of the stockState property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the stockState property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getStockState().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeStockStateDTO }
         * 
         * 
         */
        public List<ProductTypeStockStateDTO> getStockState() {
            if (stockState == null) {
                stockState = new ArrayList<ProductTypeStockStateDTO>();
            }
            return this.stockState;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeStockStateDTO> theStockState;
                theStockState = (((this.stockState!= null)&&(!this.stockState.isEmpty()))?this.getStockState():null);
                strategy.appendField(locator, this, "stockState", buffer, theStockState);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.StockStates)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.StockStates that = ((ProductTypeDTO.StockStates) object);
            {
                List<ProductTypeStockStateDTO> lhsStockState;
                lhsStockState = (((this.stockState!= null)&&(!this.stockState.isEmpty()))?this.getStockState():null);
                List<ProductTypeStockStateDTO> rhsStockState;
                rhsStockState = (((that.stockState!= null)&&(!that.stockState.isEmpty()))?that.getStockState():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "stockState", lhsStockState), LocatorUtils.property(thatLocator, "stockState", rhsStockState), lhsStockState, rhsStockState)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeStockStateDTO> theStockState;
                theStockState = (((this.stockState!= null)&&(!this.stockState.isEmpty()))?this.getStockState():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stockState", theStockState), currentHashCode, theStockState);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.StockStates) {
                final ProductTypeDTO.StockStates copy = ((ProductTypeDTO.StockStates) draftCopy);
                if ((this.stockState!= null)&&(!this.stockState.isEmpty())) {
                    List<ProductTypeStockStateDTO> sourceStockState;
                    sourceStockState = (((this.stockState!= null)&&(!this.stockState.isEmpty()))?this.getStockState():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeStockStateDTO> copyStockState = ((List<ProductTypeStockStateDTO> ) strategy.copy(LocatorUtils.property(locator, "stockState", sourceStockState), sourceStockState));
                    copy.stockState = null;
                    if (copyStockState!= null) {
                        List<ProductTypeStockStateDTO> uniqueStockStatel = copy.getStockState();
                        uniqueStockStatel.addAll(copyStockState);
                    }
                } else {
                    copy.stockState = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.StockStates();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.StockStates) {
                final ProductTypeDTO.StockStates target = this;
                final ProductTypeDTO.StockStates leftObject = ((ProductTypeDTO.StockStates) left);
                final ProductTypeDTO.StockStates rightObject = ((ProductTypeDTO.StockStates) right);
                {
                    List<ProductTypeStockStateDTO> lhsStockState;
                    lhsStockState = (((leftObject.stockState!= null)&&(!leftObject.stockState.isEmpty()))?leftObject.getStockState():null);
                    List<ProductTypeStockStateDTO> rhsStockState;
                    rhsStockState = (((rightObject.stockState!= null)&&(!rightObject.stockState.isEmpty()))?rightObject.getStockState():null);
                    List<ProductTypeStockStateDTO> mergedStockState = ((List<ProductTypeStockStateDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "stockState", lhsStockState), LocatorUtils.property(rightLocator, "stockState", rhsStockState), lhsStockState, rhsStockState));
                    target.stockState = null;
                    if (mergedStockState!= null) {
                        List<ProductTypeStockStateDTO> uniqueStockStatel = target.getStockState();
                        uniqueStockStatel.addAll(mergedStockState);
                    }
                }
            }
        }

        public ProductTypeDTO.StockStates withStockState(ProductTypeStockStateDTO... values) {
            if (values!= null) {
                for (ProductTypeStockStateDTO value: values) {
                    getStockState().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.StockStates withStockState(Collection<ProductTypeStockStateDTO> values) {
            if (values!= null) {
                getStockState().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}view" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "view"
    })
    public static class Views
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeViewDTO> view;

        /**
         * Gets the value of the view property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the view property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getView().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeViewDTO }
         * 
         * 
         */
        public List<ProductTypeViewDTO> getView() {
            if (view == null) {
                view = new ArrayList<ProductTypeViewDTO>();
            }
            return this.view;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeViewDTO> theView;
                theView = (((this.view!= null)&&(!this.view.isEmpty()))?this.getView():null);
                strategy.appendField(locator, this, "view", buffer, theView);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.Views)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.Views that = ((ProductTypeDTO.Views) object);
            {
                List<ProductTypeViewDTO> lhsView;
                lhsView = (((this.view!= null)&&(!this.view.isEmpty()))?this.getView():null);
                List<ProductTypeViewDTO> rhsView;
                rhsView = (((that.view!= null)&&(!that.view.isEmpty()))?that.getView():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "view", lhsView), LocatorUtils.property(thatLocator, "view", rhsView), lhsView, rhsView)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeViewDTO> theView;
                theView = (((this.view!= null)&&(!this.view.isEmpty()))?this.getView():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "view", theView), currentHashCode, theView);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.Views) {
                final ProductTypeDTO.Views copy = ((ProductTypeDTO.Views) draftCopy);
                if ((this.view!= null)&&(!this.view.isEmpty())) {
                    List<ProductTypeViewDTO> sourceView;
                    sourceView = (((this.view!= null)&&(!this.view.isEmpty()))?this.getView():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeViewDTO> copyView = ((List<ProductTypeViewDTO> ) strategy.copy(LocatorUtils.property(locator, "view", sourceView), sourceView));
                    copy.view = null;
                    if (copyView!= null) {
                        List<ProductTypeViewDTO> uniqueViewl = copy.getView();
                        uniqueViewl.addAll(copyView);
                    }
                } else {
                    copy.view = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.Views();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.Views) {
                final ProductTypeDTO.Views target = this;
                final ProductTypeDTO.Views leftObject = ((ProductTypeDTO.Views) left);
                final ProductTypeDTO.Views rightObject = ((ProductTypeDTO.Views) right);
                {
                    List<ProductTypeViewDTO> lhsView;
                    lhsView = (((leftObject.view!= null)&&(!leftObject.view.isEmpty()))?leftObject.getView():null);
                    List<ProductTypeViewDTO> rhsView;
                    rhsView = (((rightObject.view!= null)&&(!rightObject.view.isEmpty()))?rightObject.getView():null);
                    List<ProductTypeViewDTO> mergedView = ((List<ProductTypeViewDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "view", lhsView), LocatorUtils.property(rightLocator, "view", rhsView), lhsView, rhsView));
                    target.view = null;
                    if (mergedView!= null) {
                        List<ProductTypeViewDTO> uniqueViewl = target.getView();
                        uniqueViewl.addAll(mergedView);
                    }
                }
            }
        }

        public ProductTypeDTO.Views withView(ProductTypeViewDTO... values) {
            if (values!= null) {
                for (ProductTypeViewDTO value: values) {
                    getView().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.Views withView(Collection<ProductTypeViewDTO> values) {
            if (values!= null) {
                getView().addAll(values);
            }
            return this;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://api.company.biz}washingInstruction" maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "washingInstruction"
    })
    public static class WashingInstructions
        implements Cloneable, CopyTo, Equals, HashCode, MergeFrom, ToString
    {

        protected List<ProductTypeWashingInstructionDTO> washingInstruction;

        /**
         * Gets the value of the washingInstruction property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the washingInstruction property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getWashingInstruction().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ProductTypeWashingInstructionDTO }
         * 
         * 
         */
        public List<ProductTypeWashingInstructionDTO> getWashingInstruction() {
            if (washingInstruction == null) {
                washingInstruction = new ArrayList<ProductTypeWashingInstructionDTO>();
            }
            return this.washingInstruction;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<ProductTypeWashingInstructionDTO> theWashingInstruction;
                theWashingInstruction = (((this.washingInstruction!= null)&&(!this.washingInstruction.isEmpty()))?this.getWashingInstruction():null);
                strategy.appendField(locator, this, "washingInstruction", buffer, theWashingInstruction);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProductTypeDTO.WashingInstructions)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProductTypeDTO.WashingInstructions that = ((ProductTypeDTO.WashingInstructions) object);
            {
                List<ProductTypeWashingInstructionDTO> lhsWashingInstruction;
                lhsWashingInstruction = (((this.washingInstruction!= null)&&(!this.washingInstruction.isEmpty()))?this.getWashingInstruction():null);
                List<ProductTypeWashingInstructionDTO> rhsWashingInstruction;
                rhsWashingInstruction = (((that.washingInstruction!= null)&&(!that.washingInstruction.isEmpty()))?that.getWashingInstruction():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "washingInstruction", lhsWashingInstruction), LocatorUtils.property(thatLocator, "washingInstruction", rhsWashingInstruction), lhsWashingInstruction, rhsWashingInstruction)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<ProductTypeWashingInstructionDTO> theWashingInstruction;
                theWashingInstruction = (((this.washingInstruction!= null)&&(!this.washingInstruction.isEmpty()))?this.getWashingInstruction():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "washingInstruction", theWashingInstruction), currentHashCode, theWashingInstruction);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ProductTypeDTO.WashingInstructions) {
                final ProductTypeDTO.WashingInstructions copy = ((ProductTypeDTO.WashingInstructions) draftCopy);
                if ((this.washingInstruction!= null)&&(!this.washingInstruction.isEmpty())) {
                    List<ProductTypeWashingInstructionDTO> sourceWashingInstruction;
                    sourceWashingInstruction = (((this.washingInstruction!= null)&&(!this.washingInstruction.isEmpty()))?this.getWashingInstruction():null);
                    @SuppressWarnings("unchecked")
                    List<ProductTypeWashingInstructionDTO> copyWashingInstruction = ((List<ProductTypeWashingInstructionDTO> ) strategy.copy(LocatorUtils.property(locator, "washingInstruction", sourceWashingInstruction), sourceWashingInstruction));
                    copy.washingInstruction = null;
                    if (copyWashingInstruction!= null) {
                        List<ProductTypeWashingInstructionDTO> uniqueWashingInstructionl = copy.getWashingInstruction();
                        uniqueWashingInstructionl.addAll(copyWashingInstruction);
                    }
                } else {
                    copy.washingInstruction = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ProductTypeDTO.WashingInstructions();
        }

        public void mergeFrom(Object left, Object right) {
            final MergeStrategy strategy = JAXBMergeStrategy.INSTANCE;
            mergeFrom(null, null, left, right, strategy);
        }

        public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy strategy) {
            if (right instanceof ProductTypeDTO.WashingInstructions) {
                final ProductTypeDTO.WashingInstructions target = this;
                final ProductTypeDTO.WashingInstructions leftObject = ((ProductTypeDTO.WashingInstructions) left);
                final ProductTypeDTO.WashingInstructions rightObject = ((ProductTypeDTO.WashingInstructions) right);
                {
                    List<ProductTypeWashingInstructionDTO> lhsWashingInstruction;
                    lhsWashingInstruction = (((leftObject.washingInstruction!= null)&&(!leftObject.washingInstruction.isEmpty()))?leftObject.getWashingInstruction():null);
                    List<ProductTypeWashingInstructionDTO> rhsWashingInstruction;
                    rhsWashingInstruction = (((rightObject.washingInstruction!= null)&&(!rightObject.washingInstruction.isEmpty()))?rightObject.getWashingInstruction():null);
                    List<ProductTypeWashingInstructionDTO> mergedWashingInstruction = ((List<ProductTypeWashingInstructionDTO> ) strategy.merge(LocatorUtils.property(leftLocator, "washingInstruction", lhsWashingInstruction), LocatorUtils.property(rightLocator, "washingInstruction", rhsWashingInstruction), lhsWashingInstruction, rhsWashingInstruction));
                    target.washingInstruction = null;
                    if (mergedWashingInstruction!= null) {
                        List<ProductTypeWashingInstructionDTO> uniqueWashingInstructionl = target.getWashingInstruction();
                        uniqueWashingInstructionl.addAll(mergedWashingInstruction);
                    }
                }
            }
        }

        public ProductTypeDTO.WashingInstructions withWashingInstruction(ProductTypeWashingInstructionDTO... values) {
            if (values!= null) {
                for (ProductTypeWashingInstructionDTO value: values) {
                    getWashingInstruction().add(value);
                }
            }
            return this;
        }

        public ProductTypeDTO.WashingInstructions withWashingInstruction(Collection<ProductTypeWashingInstructionDTO> values) {
            if (values!= null) {
                getWashingInstruction().addAll(values);
            }
            return this;
        }

    }

}
